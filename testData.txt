the // parent	1
the function is	22
the function a	4
the function to	1
the function and	1
the function in		5
the function for	1
the function that	1
the function can	1
the function or		3
the function has	1
the function pointer	5
the function library	2
the function where	1
the function we		1
the function return	1
the function cannot	1
the function address	1
the function call	1
the function they	1
the function type	1
the function must	1
the function through	1
the function was	1
the function name	1
the function calling	2
the function go		1
the function names	1
the function directly	1
the function modify	1
the function returns.	9
the function stores	1
the function could	1
the function body	1
the function call.	2
the function returns	1
the function definition.	1
the function longjmp		1
the function ReadTSC		1
the function argument		1
the function inline.		2
the function construct		1
the function declaration.	1
the function body.		1
the function prototype:		1
the function billions		1
the function add_horizontal)	1
the function bodies		1
the function scanf.		1
the if branch			1
the if statement		1
the if condition		1
the code is			19
the code of			1
the code to			6
the code and			3
the code in			8
the code that			8
the code are			2
the code can			8
the code if			1
the code with			1
the code you			1
the code have			1
the code more			4
the code will			3
the code then			1
the code from			1
the code has			2
the code cache			5
the code size			1
the code where			1
the code takes			1
the code so			1
the code faster			1
the code makes			2
the code less			1
the code rather			1
the code 16			1
the code up			1
the code must			1
the code inside			1
the code contains		2
the code memory.		1
the code automatically		2
the code cache.			2
the code difficult		1
the code becomes		4
the code together		1
the code smaller		1
the code section		5
the code still			1
the code prevent		1
the code further		1
the code execute		1
the code to:			1
the code could			1
the code involves		1
the code itself			1
the code automatically.		1
the code generated		2
the code relies			1
the code itself.		1
the code incompatible		1
the code only.			1
the code explicitly.		1
the code carefully		1
the code mixes			1
the code section,		1
the compiler is			6
the compiler to			21
the compiler and		1
the compiler in			1
the compiler that		5
the compiler can		9
the compiler if			1
the compiler not		1
the compiler may		7
the compiler you		2
the compiler have		1
the compiler will		3
the compiler from		8
the compiler at			1
the compiler has		4
the compiler takes		2
the compiler cannot		3
the compiler does		4
the compiler must		2
the compiler (see		1
the compiler doesn't		6
the compiler option		2
the compiler manual		2
the compiler uses		2
the compiler would		1
the compiler optimize		1
the compiler needs		2
the compiler optimizations	1
the compiler output		1
the compiler e.g.		1
the compiler explicitly		1
the compiler itself		1
the compiler generates		1
the compiler ..........................................................................................	1
the compiler additional											1
the compiler 8.1											1
the compiler documentation										2
the compiler optimizes											1
the compiler bypassing											1
the compiler sees											1
the compiler treat											1
the compiler interpret											1
the compiler recognizes											1
the compiler knows											1
the time the 3
the time is  2
the time of  3
the time to  1
the time and 2
the time it  16
the time on  1
the time you 1
the time used	1
the time we	1
the time before	2
the time goes	1
the time delay	1
the time stamp	4
the time consuming	1
the time spent		2
the time consumption	2
the time slices		3
the time MemberPointer	1
the use of		12
the more important	1
the more complicated	1
the memory is		1
the memory to		2
the memory if		1
the memory when		1
the memory used		1
the memory page		1
the memory allocation	1
the memory space	1
the memory model	1
the memory block	2
the memory block.	1
the memory footprint	1
the memory bus		1
the memory released	1
the data to		1
the data and		1
the data in		1
the data are		6
the data with		1
the data as		1
the data more		1
the data cache		1
the data set		1
the data into		2
the data object		2
the data elements	1
the data caching	1
the data cache.		6
the data block		1
the data section	1
the data fit		2
the data members.	2
the data optimally,	1
the data structure,	1
the program is		19
the program of		1
the program to		3
the program in		2
the program that	4
the program are		2
the program or		1
the program if		1
the program by		1
the program with	1
the program code	2
the program as		2
the program -		1
the program than	1
the program may		2
the program have	1
the program more	1
the program will	2
the program then	1
the program has		1
the program do		1
the program takes	1
the program before	1
the program less	1
the program must	1
the program uses	2
the program contains	1
the program under	3
the program happen	1
the program logic	2
the program had		1
the program itself	1
the program itself.	1
the program appear	1
the program runs	1
the program starts	2
the program 153		1
the program flow	2
the program flow.	1
the program afterwards	1
the program slower.	1
the program starts.	2
the program logic.	1
the vector class	2
the vector size		3
the vector register	1
the vector registers	3
the vector operations	2
the vector element	2
the vector size.	1
the vector registers.	1
the different functions	1
the different integer	1
the different compilers	1
the different instructions	1
the different versions		3
the different execution		1
the different parts		1
the different tasks		1
the different cores		1
the different microprocessors.	1
the same in   2
the same for  1
the same or   1
the same function	4
the same code		4
the same as		10
the same compiler	1
the same time		5
the same memory		8
the same data		1
the same instruction	1
the same cache		6
the same set		1
the same class		2
the same object		1
the same array		1
the same version	1
the same member		1
the same way		4
the same address	1
the same critical	1
the same register	4
the same time.		5
the same without	1
the same dynamic	2
the same part		3
the same bits		2
the same type		1
the same result		1
the same processor	4
the same thread		1
the same precision	2
the same few		1
the same structure	1
the same inline		1
the same shared		1
the same space		1
the same cache.		1
the same name		3
the same source		3
the same induction	1
the same reason		1
the same after		1
the same piece		2
the same function,	1
the same compiler.	1
the same range		1
the same core		1
the same errors		1
the same variables.	1
the same operation	2
the same level-1	1
the same resources.	1
the same class.		1
the same object.	1
the same time,		1
the same priority	2
the same thing		4
the same logical	1
the same subexpression	1
the same resource	1
the same generation	1
the same address.	1
the same module		2
the same features	1
the same value.		1
the same unit		1
the same register.	1
the same DLL		1
the same object,	1
the same core.		1
the same constant.	1
the same principle	1
the same regardless	1
the same result.	1
the same resources,	1
the same cache,		1
the same brand.		1
the same way,		1
the same chip		1
the same name.		1
the same arguments	1
the same executable.	1
the same machine.	1
the same thing.		2
the same template.	1
the same chip.		1
the same effect.	1
the same class).	1
the same computer,	1
the same name,		1
the same algorithm,	1
the same directory	1
the same divisor.	1
the same queue,		1
the functions that	8
the functions are	2
the functions memset	1
the functions malloc	1
the functions lrintf	1
the only one  1
the only way  1
the only situation	1
the only reasonable	1
the CPU is		1
the CPU to		4
the CPU and		5
the CPU can		1
the CPU it		1
the CPU by		1
the CPU than		1
the CPU may		1
the CPU time		1
the CPU from		3
the CPU has		3
the CPU which		1
the CPU used		1
the CPU clock		3
the CPU doesn't		1
the CPU doing		1
the CPU was		1
the CPU dispatching	2
the CPU dispatcher	2
the CPU dispatch	1
the CPU core		1
the CPU supports	2
the CPU (See		2
the CPU cores		1
the CPU dispatching.	1
the CPU brand		1
the CPU detection	7
the CPU family		1
the CPU brand.		1
the CPU chip.		1
the CPU supports,	1
the other is		1
the other with		1
the other then		1
the other way		3
the other thread	1
the other thread.	1
the other way.		1
the other hand,		5
the other way,		1
the other compilers).	1
the other volumes	1
the instruction set	4
the instruction code.	1
the instruction sets	1
the instruction set.	1
the instruction xor	1
the point is	1
the point where	1
the loop is	4
the loop and	3
the loop in	3
the loop are	1
the loop can	2
the loop or	2
the loop if	3
the loop by	5
the loop will	1
the loop branch	1
the loop without	1
the loop does		1
the loop counter	5
the loop count		5
the loop control	9
the loop further	1
the loop unroll		2
the loop condition	1
the loop buffer		1
the loop body		1
the loop is.		1
the loop counter.	2
the loop increment	1
the loop index.		1
the loop counter,	1
the loop exits,		1
the loop overhead.	1
the one that		4
the one it		1
the cache to		1
the cache in		2
the cache will		2
the cache then		1
the cache so		1
the cache between	1
the cache always	1
the cache line		5
the cache contentions	1
the cache size.		2
the cache lines		2
the cache miss		1
the integer is		1
the integer in		2
the integer has		1
the integer size	1
the integer value	1
the integer registers	1
the integer operations	1
the integer expression	1
the integer calculations.	1
the integer factorial		1
the set can 1
the class is	1
the class of	1
the class that	1
the class or	3
the class has	1
the class c1	1
the class Vec16s	1
the class definition.	1
the class declaration.	1
the floating point	13
the example of		1
the example below	1
the compilers that	1
the compilers are	1
the compilers may	1
the compilers will	1
the compilers cannot	1
the compilers I		5
the compilers reduced	1
the most used 2
the most efficient	8
the most critical	10
the most often		3
the most simple		1
the most important	2
the most common		5
the most complicated	1
the most advanced	1
the most significant	1
the most time-consuming	2
the most frequent	1
the most reliable	1
the most predictable	1
the double precision	1
the size is		1
the size of		20
the size and		1
the size doesn't	1
the size known		2
the size parameter	2
the size (in		1
the Intel and		1
the Intel function	1
the Intel compiler	11
the Intel CPU		2
the Intel C++		2
the Intel libraries	1
the Intel mechanism	1
the Intel compiler.	1
the Intel math		1
the Intel libraries.	1
the Intel Core		1
the pointer is		3
the pointer or		1
the pointer it		1
the pointer has		2
the pointer does	1
the pointer p		1
the library is		3
the library that	2
the library function	2
the library has		1
the library functions	1
the library into	1
the library file	1
the library function.	1
the library through	1
the library functions.	1
the library function,	1
the library www.agner.org/optimize/asmlib.zip.	1
the library libmmt.lib				1
the multiple data				1
the multiple processor				1
the multiple .cpp				1
the two clock					1
the two operating				1
the two functions.				1
the two branches				1
the two induction				1
the two types					1
the two modules					1
the two constants				1
the two kinds					1
the two loops					2
the two AND					1
the two parentheses				1
the two formulas				1
the object is					7
the object of					1
the object in					1
the object can					1
the object or					1
the object it					1
the object on					1
the object x					1
the object then					1
the object has					2
the object file					2
the object does					1
the object doesn't				1
the object files				1
the object instead				1
the object file.				1
the object pointed				1
the object belongs				1
the object owns.				1
the number of					37
the number and					2
the static version				1
the static keyword				2
the static modifier				1
the static keyword:				1
the static keyword,				1
the 64-bit vector				1
the 64-bit instruction				1
the 64-bit systems				1
the 64-bit systems.				1
the 64-bit vectors				1
the 64-bit versions.				1
the 64-bit extension				1
the C++ compiler				1
the C++ template				1
the C++ programming				1
the C++ language				3
the C++ syntax					1
the C++ language,				1
the C++ language......................................................	1
the array is								3
the array a								1
the array to								1
the array or								1
the array size								1
the array pointer							1
the array elements							1
the array address							1
the array must								1
the array element							2
the array after								1
the array index								1
the array i)								1
the array 800								1
the many rules								1
the many people								1
the possible alternatives						1
the clock cycles							1
the clock count								1
the clock frequency							4
the clock counts							2
the clock frequency.							2
the clock frequency,							1
the clock period							1
the version in								1
the version that							1
the version changes							1
the value is								3
the value of								22
the value and								1
the value in								2
the value that								4
the value it								1
the value from								2
the value has								1
the value each								1
the value before							1
the value 0								1
the value 10								1
the value pointed							2
the value wrap								1
the value 1000.								1
the value -100+100+100							1
the value infinity,							1
the value 0x2C								1
the objects in								1
the objects are								2
the objects should							1
the objects stored							1
the objects they							1
the objects together							1
the objects (memory							1
the variable is								5
the variable to								1
the variable in								2
the variable that							1
the variable as								1
the variable from							1
the variable at								1
the variable two							1
the variable always							1
the variable pointed							2
the variable whose							1
the variable Day.							1
the variable __intel_cpu_feature_indicator				1
the variable __intel_cpu_feature_indicator_x.				1
the variable 85								1
the variable m.								1
the variables that							1
the variables might							1
the return address							1
the return statement:							1
the table is								3
the table to								2
the table in								2
the table that								1
the table are								1
the table from								1
the table at								1
the table has								1
the table takes								1
the table inside							1
the table values							1
the table lookup.							1
the table static.							1
the performance is							2
the performance of							5
the performance if							1
the performance by							2
the performance then							1
the performance because							2
the performance even							1
the performance counters						1
the performance during							1
the performance monitor							3
the performance under							1
the performance significantly						1
the performance dramatically						1
the performance somewhat.						1
the performance costs.							1
the very time-consuming							1
the software to								1
the software for							1
the software programming						1
the software contains							2
the software was							2
the software implementation						2
the software development						2
the software package							1
the order of 7
the order in 6
the order a[0],	1
the long double	1
the 32-bit version.	1
the 32-bit integer.	1
the 32-bit case.	1
the branch is		1
the branch by		1
the branch inside	2
the branch target	3
the branch prediction	1
the branch misprediction	1
the member function		1
the member functions		2
the member pointer		1
the member function.		1
the member pointer.		1
the member relative		1
the way the			2
the way a			1
the way of			2
the way member			1
the way microprocessors		1
the way m			1
the elements of			1
the elements in			1
the elements are		4
the elements from		1
the elements consecutively	1
the elements matrix[r][c]	1
the const int			1
the const keyword		1
the const restriction		2
the called function.		2
the address of			21
the address can			1
the address calculation		2
the address range		2
the 4 lines 1
the critical function	5
the critical code	3
the critical functions	2
the critical code.	1
the critical part	7
the critical function.	3
the critical parts	1
the critical innermost	5
the critical stride	7
the critical stride,	1
the critical stride.	1
the call to  3
the call and 1
the call stack	1
the call p->f()	1
the 8 most	1
the bit scan	2
the operating systems	1
the operating system	16
the operating system.	4
the operating system,	2
the unsigned integer	1
the first in 1
the first time	4
the first data	1
the first two	2
the first object	1
the first way		1
the first call		1
the first time.		1
the first processors	1
the first result	1
the first element	3
the first 128		2
the first four		1
the first program.	1
the first application	1
the first byte		2
the first algorithm	1
the first operand	3
the first six		1
the first PC's		1
the first sum,		1
the first sub-vector.	1
the first dimension	1
the register size	1
the register stack	2
the register usage	1
the register keyword.	1
the optimization of	1
the optimization unless	1
the optimization features	1
the optimization capabilities	1
the optimization effort		1
the optimization efforts	1
the optimization job.		1
the libraries named		1
the code. The 1
the code. //  1
the code. This	2
the code. It	1
the code. See	1
the code. For	1
the code. Example:	2
the code. Some		1
the code. Many		1
the code. Let's		1
the code. Sometimes	1
the code. C#,		1
the code. Inserting	1
the time. The		1
the time. This		1
the time. A		1
the template function	2
the template parameters	4
the template parameter	1
the template function,	1
the template parameter.	2
the registers eax,	1
the need to   3
the need for  1
the pointers and	1
the test and 1
the test program	2
the test loop.		1
the new version		2
the new value		1
the new function.	1
the new bigger		1
the new block.		1
the new features.	1
the new context.	1
the user is		1
the user to		2
the user and		2
the user can		1
the user if		1
the user will		1
the user has		2
the user but		1
the user must		1
the user never		1
the user actually	1
the user interface	3
the user might		1
the user interface.	2
the user expects	1
the user interface,	1
the even integer	1
the method of		1
the method that		1
the method used		1
the access to		1
the access non-sequential	1
the SSE2 or			4
the SSE2 instruction		17
the SSE2 version		1
the SSE2 (or			1
the following example,		1
the following assembly		2
the following methods		1
the following example:		1
the following conditions	2
the following way.		3
the following explanation	1
the following table.		1
the following disadvantages	1
the following reasons:		3
the following way:		3
the following cases:		1
the following alternatives:	1
the following steps		1
the following work-around	1
the following features:		1
the following sections.		1
the following solutions,	1
the system code			2
the system may			1
the system database		1
the system forbids		1
the 32 sets			1
the file is			2
the file to			1
the file for			1
the file has			1
the file until			1
the programming language	1
the programming manuals		1
the dynamic libraries		2
the dynamic linker.		1
the part of 1
the bits of 2
the bits for	1
the type of	5
the type and	1
the type that	1
the type conversion	2
the type T		1
the case a		1
the case of		4
the case in		1
the case that		1
the case if		1
the case with		1
the case then		1
the case we		1
the case labels		1
the cases where		1
the cases described	1
the short vector	1
the & operator		2
the & operation		1
the & operator;		1
the simple function	1
the simple function,	2
the instructions listed	1
the processors that	1
the processors on	1
the available vector	1
the available instruction	2
the available options		1
the constant is			1
the constant vector		1
the constant 8			1
the constant single		1
the constant 5.			1
the constant 3.5		1
the constant subexpression.	1
the constant 2.5,		1
the error is 1
the error code	1
the error code.	1
the error doesn't	1
the error condition.	1
the stack is		1
the stack and		2
the stack in		2
the stack for		1
the stack can		1
the stack when		1
the stack at		1
the stack before	2
the stack rather	1
the stack always	1
the stack (see		1
the stack pointer.	1
the stack Variables	1
the stack unwinding	1
the stack (three	1
the Gnu compiler	9
the Gnu manual		1
the Gnu mechanism	1
the Gnu directives	1
the Gnu compiler.	1
the Gnu C		2
the Gnu compiler,	1
the Gnu utilities	1
the function. The	4
the function. This	4
the function. In	1
the function. Copying	1
the function. Compile	1
the extra function	1
the extra operations	1
the extra work		1
the extra overhead	1
the extra bits.		1
the assembly output	4
the large graphics	1
the large overhead	1
the while loop		3
the while loop,		1
the arrays are		7
the arrays or		1
the arrays as		1
the arrays very		1
the work it		1
the work into		2
the work load		2
the work load.		1
the work evenly		1
the Windows operating	1
the Windows system.	1
the Windows Template	1
the calls to		2
the calculations of	1
the calculations in	1
the calculations are	1
the calculations on	1
the calculations so	1
the calculations inside	1
the execution of 2
the execution to 1
the execution time	2
the execution speed	1
the execution units	1
the execution considerably.	1
the result is 3
the result of 7
the result in 3
the result can	1
the result will	1
the result vector	4
the result 100		1
the result back		1
the result -56		1
the processor is	3
the processor and	2
the processor can	1
the processor has	1
the compiled code	2
the compiled code.	1
the compiled versions	1
the big registration	1
the threads are		1
the threads use		1
the threads will	1
the threads write	1
the threads share	1
the best and		1
the best compiler	1
the best possible	3
the best way		3
the best optimization	1
the best optimized	2
the best optimizing	1
the best implementation	1
the best cases.		1
the best algorithm	1
the best Java		1
the best job		1
the best optimizer.	1
the best algorithm.	1
the necessary functions	1
the necessary instruction	1
the necessary library		1
the necessary calculations	1
the necessary information	1
the necessary cleanup		1
the necessary initialization.	1
the speed of  5
the speed or  1
the speed by  1
the speed will	1
the speed here	1
the specific instruction	1
the specific purpose		1
the specific event		1
the specific literature		1
the virtual function		3
the virtual table		1
the virtual function.		1
the virtual functions.		1
the virtual table.		1
the virtual 53			1
the common language		1
the common entry		1
the thread to			1
the thread in			1
the thread function		1
the thread have			1
the thread priority		1
the exception handling		2
the exception handler		3
the exception handler,		1
the allocated memory		1
the allocated array		1
the allocated object,		1
the overflow and		1
the overflow condition		1
the overflow behavior		1
the integers from		1
the option for			2
the option that			1
the option -fpic		1
the option -fno-pic		1
the option -fpie		1
the option -mveclibabi=acml.	1
the option -ftrapv,		1
the option /QaxAVX		1
the option -read_only_relocs	1
the option -mveclibabi=svml.	1
the power of			3
the power function		1
the matrix is			2
the matrix when			1
the matrix into			1
the matrix line			1
the matrix longer		1
the matrix 512			1
the matrix element.		1
the AVX and			1
the AVX or			1
the AVX instruction		6
the AVX 32			1
the AVX instructions.		2
the AVX part.			2
the line that			1
the line number			1
the line containing		1
the optimized code		2
the optimized version		2
the manual for			2
the calculated value.		1
the calculated result.		1
the calculation of		14
the calculation in		2
the calculation time		2
the uses of	1
the four cache	2
the four results	1
the four B		1
the four G		1
the four R		1
the four sums		1
the parameters of	1
the parameters are	1
the parameters on	1
the parameters would	1
the check for  1
the check after	1
the problem is	3
the problem and	2
the problem that	1
the problem by		1
the problem cannot	1
the solution is		2
the solution to		1
the container is	1
the container be	1
the container may	1
the container rather	1
the container expandable,	1
the advantage of		1
the advantage that		2
the supported instruction	1
the operators new		1
the few cases 1
the list is   1
the list does 1
the list every	1
the list causes	1
the likely case	1
the structure to	1
the structure in	1
the structure or	1
the structure 8		1
the structure };	1
the structure y		1
the inline keyword	1
the standard libraries	1
the standard template	1
the standard stack	1
the standard calling	1
the standard header	1
the standard PC		4
the hardware is		1
the hardware can	1
the hardware implementation	2
the hardware platform		1
the hardware definition		1
the values of			5
the values in			2
the values because		1
the sign of			2
the sign bit			9
the sign bit:			2
the sign bit.			2
the sign bit,			1
the copy of			1
the copy constructor		1
the memory. The			1
the memory. This		1
the memory. It			1
the well optimized		1
the information is		1
the information in		1
the addresses of		4
the addresses are		2
the shared object		1
the shared variable		1
the shared resources		1
the shared object.		2
the shared object,		1
the program. The		4
the program. This		2
the program. In			1
the program. 3			1
the program. Reading		1
the program. 16.2		1
the program. Small		1
the program. Application	1
the intermediate code		1
the intermediate code.		1
the intermediate result		2
the intermediate expression	1
the allocation process		1
the write causes		1
the above code			1
the above example		3
the above example,		4
the above template		1
the above methods		1
the above examples		1
the above advantages		1
the above sections		1
the above table.		1
the above security		1
the programs they		1
the problems of			1
the problems and		1
the problems that		1
the problems mentioned		1
the problems associated		1
the optimal code		1
the optimal version		1
the optimal branch		1
the optimal solution		1
the optimal platform		2
the optimal choice		1
the optimal algorithm		3
the optimal order.		1
the optimal decomposition	1
the space explicitly		1
the dispatching only		1
the dispatching should		1
the particular application.	1
the microprocessor is		2
the microprocessor and		1
the microprocessor can		3
the microprocessor it		1
the microprocessor has		4
the microprocessor doesn't	1
the microprocessor hardware	1
the microprocessor jump		1
the microprocessor handles	1
the microprocessor wastes	1
the next time	   1
the next new	   1
the next function. 1
the next processor 1
the next model	   1
the next higher	   1
the next instance  1
the next generation	2
the next block.		1
the next element.	1
the next vector,	1
the next step		1
the next step.		1
the next calculation.	1
the next paragraph.	1
the next section.	1
the branches are	1
the Mac platform,	1
the multiplication is	2
the multiplication of	1
the multiplication can	1
the multiplication by	1
the multiplication would	1
the multiplication b[i]*c[i],	1
the application can		1
the application has		1
the application software	1
the application code.		1
the application uses		1
the application program.	3
the application programmer	1
the application software.	1
the application itself		1
the application programmer.	1
the caching conditions		1
the expression is		1
the expression a		2
the expression that		1
the expression contains		1
the expression y		1
the expression list[i]		1
the expression -(-a)		1
the complicated address		1
the dependency chain		1
the members of 1
the members individually.	1
the Boolean operators		4
the Boolean operands		1
the cache. The			3
the cache. When			1
the intrinsic function		1
the intrinsic hardware		1
the methods in			1
the methods described		1
the development of		1
the development process		1
the mathematical notion		1
the block size	 1
the name of	 1
the name in	 1
the name cannot	 1
the name _alloca)	1
the systems. There	1
the needs of 1
the conversion is	2
the conversion to	1
the conversion takes	1
the various optimization	1
the disadvantage of		1
the disadvantage that		3
the high processing		1
the high level			2
the high complexity		1
the zero flag			1
the Microsoft directives	1
the Microsoft platform		1
the Microsoft compiler.		1
the Microsoft Visual		1
the parameter is		1
the parameter has		1
the division faster.		1
the source is			1
the source code			1
the source code.		1
the source code,		1
the source files.		1
the source annotation		1
the cost of			6
the resources of		1
the induction variable		3
the reason why			4
the dispatcher function		2
the dispatcher function.	3
the dispatcher 128		1
the dispatcher signal		1
the string is  1
the programmer to	10
the programmer in	1
the programmer that	1
the programmer can	1
the programmer has	1
the programmer choosing	1
the programmer forgets	1
the programmer can.	1
the programmer hasn't	1
the three functions.	1
the keyword static	2
the keyword __restrict	1
the keyword volatile	1
the keyword far		1
the keyword __thread	1
the end of  5
the end in  1
the end when	1
the end user	4
the end user.	5
the && expression	1
the | operator		1
the | operator;		1
the examples in		1
the examples have	1
the examples I		1
the difference is	1
the difference between	6
the data. The  1
the data. This 1
the data. A    1
the data. Use  1
the runtime address	1
the runtime framework	1
the runtime polymorphism	1
the runtime polymorphism:	1
the last cache			1
the last 8			1
the last element		1
the last index			2
the last vector.		1
the last member.		1
the parts of			2
the optimizations that		1
the graphics processing		1
the framework and		1
the framework itself,		1
the numbers in			2
the numbers are			1
the dispatch on			2
the dispatch branch		1
the dispatch branches		1
the dispatch mechanism		1
the dispatch decision		1
the calling function		1
the calling program		1
the XMM registers		5
the second result		1
the second operand		4
the second generation		1
the second step			1
the second step.		1
the second sum,			1
the second operand.		1
the second sub-vector		1
the higher bits.		1
the vectors of			1
the vectors into		1
the AVX2 instruction		1
the piece of			2
the x86 instruction		2
the x86 CPUs.			1
the x86 family			3
the binary value		1
the binary decimals		1
the binary digits.		1
the advantages of		2
the advantages and		1
the advantages over		1
the results of 1
the results are	1
the storage order	1
the storage methods	1
the old memory		1
the old operating	1
the old block		1
the old Pentium		2
the old version.	1
the old fashioned	2
the options for		1
the options -S		1
the feature that	1
the feature information,	1
the link pointers		1
the appropriate function	1
the appropriate instruction	1
the appropriate version		6
the appropriate type		1
the appropriate header		2
the constructor itself.		1
the function, and		1
the function, but		1
the operands and		1
the operands are		3
the operands if			1
the operands have		2
the operands has		1
the operands because		1
the innermost loop		7
the innermost function,		1
the innermost loop.		3
the compiler. The		1
the compiler. You		1
the compiler. Some		1
the compiler. We		1
the compiler. Loop		1
the compiler. On		1
the compiler. Remember,		1
the advanced version		2
the advanced programming	1
the advanced principles		1
the range of 2
the start of 1
the start so 1
the modules of	1
the modules are	1
the modules appear	1
the smaller the		2
the core with		1
the core clock		1
the relevant optimization	1
the relevant books		1
the negative effects		1
the reductions that		1
the reductions manually.	1
the example: //			1
the contentions and		1
the main memory	2
the main program.	1
the main executable	3
the main reasons	1
the main feedback	1
the positive or		1
the loop. The		2
the loop. It		1
the loop. Example	2
the loop. If		1
the loop. In		1
the loop. Some		1
the loop. Most		1
the computer is		3
the computer for	1
the computer has	1
the computer while	1
the computer during	1
the computer starts	1
the overhead of		4
the pointer. These	1
the C style  1
the global offset	1
the conversions and	1
the conversions by	1
the conversions out	1
the statement was	1
the relative efficiency	1
the installation process	3
the syntax is	 3
the syntax described	1
the cases. The		1
the choice of		4
the choice between	1
the STL is 2
the STL are	1
the STL has	1
the STL also	1
the STL containers	1
the STL (Standard	1
the profiler may	1
the profiler itself.	1
the index is 1
the index by 1
the inlining causes	1
the size. However,	1
the size. Integers	1
the network is		2
the network or		1
the slow GOT		1
the desired function	1
the desired program	1
the desired instruction	2
the desired version	2
the desired function.	1
the desired version.	1
the desired polymorphism	1
the desired functionality	1
the desired measurement		1
the desired interval		1
the #pragma vector		2
the whole program		2
the whole loop			1
the whole software		2
the whole structure		1
the whole program.		1
the inefficient virtual		1
the level-2 cache		7
the level-2 cache.		3
the response time		5
the response times		1
the hot spots			2
the hot spot			1
the hot spot.			1
the code, then			1
the code, which			1
the code, cache			1
the code, so			1
the code, including		1
the instance in			1
the fact that			1
the position-independent code	1
the position-independent code.	1
the out-of-order execution	2
the out-of-order mechanism	1
the out-of-order capabilities	1
the output of	 1
the output are	 1
the level-1 and	 1
the level-1 data 3
the level-1 cache	4
the level-1 cache.	2
the resources. In	1
the task in    1
the local object	2
the local name		1
the costs of		3
the costs to		1
the costs in		1
the costs if		1
the inlined function	2
the inlined function.	1
the class. Data		1
the class. Calling	1
the class. Storing	1
the class. Which	1
the database anyway	1
the constants are	1
the constants Sunday,	1
the frame function	2
the special feature	1
the destructor is	1
the destructor of	1
the destructor to	1
the destructor for	1
the destructor by	1
the destructor causes	1
the preceding one	2
the preceding value	1
the preceding example,	1
the preceding addition	2
the preceding iteration	1
the preceding label	1
the preceding one.	2
the preceding paragraph	1
the preceding row.	1
the safe formula	1
the Pentium 4		1
the efficiency of	2
the repeat count	5
the unroll factor.	3
the algorithm in	2
the sum of    1
the strings including	2
the exponent is		3
the exponent if		1
the possibility of	3
the possibility for	3
the possibility that	3
the discussion of	1
the maximum loop	1
the maximum possible	1
the maximum repeat	1
the maximum value.	1
the alignment is	1
the alignment explicitly	1
the alignment requirements	1
the right in  1
the right function	1
the right data		1
the right vector	1
the right version	3
the right prediction.	1
the right format	1
the right formula	1
the right positions	1
the offset of		3
the offset can		1
the offset as		1
the offset has		1
the offset relative	1
the compatibility with	1
the macro is	  1
the object. The	  1
the object. If	  1
the object. Make  1
the object. 7.17  1
the library. The  1
the library. This 1
the library. Add  1
the calculations. The	2
the operand that  2
the final program 1
the final size	  2
the final array	  1
the final version 1
the final value	  1
the final result  2
the final program.	1
the final application	1
the final program,	1
the final product.	1
the sake of		13
the tasks into		1
the effect of		1
the amount of		6
the variable. This	1
the variable. For	1
the time, but 1
the copying process,	1
the performance. 14.4	1
the processing power.	1
the so-called time	1
the so-called intrinsic	1
the so-called Java	1
the so-called position-	1
the so-called partial	1
the so-called commpage.	1
the so-called CPU-dispatcher	1
the total number		3
the total time.			1
the total execution		2
the total calculation		1
the total amount		1
the total computation		1
the child class			2
the priority back		1
the disk cache.			1
the iteration is		1
the counters when		1
the stack. The			1
the stack. This			3
the stack. A			1
the stack. Each			1
the stack. Is			1
the stack. Deallocation		1
the stack. String		1
the full advantage		1
the full information		1
the full 128-bit		1
the full declaration		1
the full generality		1
the thread. The			1
the RAM size			1
the rows in			1
the rows are			3
the least significant		2
the least recently		1
the algebraic reductions	1
the logical register		1
the logical structure		1
the logical architecture	1
the bitwise operators		2
the bitwise OR			1
the handle is			1
the heap is			1
the heap to			1
the heap has			1
the heap space			2
the heap manager		1
the target if			1
the target address		2
the target pointed		1
the entire program		2
the entire floating		1
the entire library		1
the entire 64			1
the entire file			1
the entire list			1
the entire level-1		1
the entire object.		1
the entire contents		1
the executable to		1
the executable file		3
the executable file.		1
the subexpression c+b		1
the nontemporal write		2
the bounds of	1
the SSE and	2
the SSE or	2
the updates if	1
the loading of	2
the reading of	2
the directly compiled	1
the simplest possible	1
the simplest code.	1
the simplest cases,	2
the simplest expressions	1
the simplest cases.		1
the simplest method,		1
the situation where		3
the message loop		1
the condition is		1
the condition can		1
the condition clause.		1
the resource use		1
the PathScale and		1
the previous value		3
the previous link		1
the previous iteration		1
the previous chapter		1
the previous value.		2
the previous one.		1
the previous iteration.		1
the vector. The			1
the vector. This		1
the program, and		3
the program, for		1
the program, it			1
the program, one		1
the loops if 1
the SSE4.1 instruction	2
the chapter "Register	1
the risk of 3
the header file	2
the header files	1
the future we		1
the future due		1
the fraction is		1
the fraction bits:	1
the sequence of		2
the sequence to		1
the sequence in		1
the compiler, and	1
the compiler, you	1
the CPU. It   1
the CPU. If   1
the CPU. Algebraic	1
the CPU. Unrolling	1
the length of		6
the module with,	1
the beginning of	9
the beginning rather	1
the alternative version.	1
the current instruction		1
the current array		1
the current version		1
the current .cpp		1
the current position.		1
the 'this' pointer.		1
the problem. This		1
the row length			1
the declaration class		1
the declaration "static"	1
the series of	1
the features of	1
the user. Time	1
the user. Making	1
the user. With		1
the user. Compatibility	1
the user. Feature	1
the chosen compiler	1
the chosen version	1
the chosen expression.	1
the device itself	1
the subsequent times	1
the subsequent instructions.	1
the subsequent counts		1
the subsequent manuals.		1
the subsequent counts.		1
the low priority		1
the latter is			1
the latter function		1
the latter has			1
the latter case			1
the latter function,		1
the latter case,		2
the default integer		1
the default size		1
the time-consuming data		1
the diagonal is	   1
the diagonal and   1
the diagonal are   2
the diagonal have  1
the diagonal there 1
the diagonal remain	1
the logic structure	1
the logic behind	1
the Microsoft, Intel,	2
the hard disk  1
the hard disk. 1
the typical repeat	1
the derived class	2
the derived class.	1
the derived class:	1
the overflow. Taking	1
the fully optimized	1
the factorial function	1
the OpenMP directives	2
the parent class	1
the value. The		1
the memcpy function	1
the memcpy function.	1
the procedure linkage	1
the parallelism is	2
the prediction turns	1
the polymorphic member	1
the polymorphic functions.	1
the graphical user		1
the lower 8   1
the lower 16  1
the label $B1$2:.	1
the iterations and	1
the misprediction before	1
the misprediction penalty	1
the background are		1
the background job		1
the chain of   1
the PLT and    1
the PLT entry  1
the heavy graphics	1
the heavy background	1
the additions are	1
the system. The		1
the inputs to		1
the inputs have		1
the interrupt 3		2
the fastest way		2
the fastest solution	1
the fastest first.	1
the DLL is  1
the DLL use 1
the factors that	1
the factors are		1
the Gnu, Clang		2
the Gnu, Clang,		3
the arrays. It		1
the arrays. An		1
the branch. It		1
the required amount	2
the GOT and  1
the GOT through	1
the array. This	1
the array. eax	1
the general case	1
the general case,	1
the general literature	1
the preferred programming	1
the preferred language		1
the software. You		1
the software. Smaller		1
the interpreted version		1
the vectors. This		1
the YMM register		1
the YMM registers.		1
the purpose of			1
the -fpic option.		1
the D language.			1
the sections below.		1
the carry and			1
the carry bit			2
the carry flag			3
the debugging options		1
the table. The			1
the table. Optimization		1
the object, and			1
the trick that			1
the disadvantages when		1
the disadvantages mentioned	1
the update mechanism		1
the update process.		1
the body of			2
the Java virtual		1
the memory, depending		1
the system, the			1
the system, as			1
the absolute value		3
the machine code		1
the CPUID is			1
the CPUID instruction		3
the CPUID information		1
the CPUID was			1
the saved variable		1
the changes of			1
the processor. This		1
the processor. Nested		2
the linker to  2
the linker and 1
the linker makes	1
the linker extracts	1
the measurements as	1
the representation of	1
the factor is	   1
the factor to	   1
the core. It	   1
the rules of	   2
the smallest data  1
the smallest integer	3
the smallest list	1
the smallest members	1
the smallest devices,	1
the responsibility of	7
the Borland and	   1
the Borland compiler	1
the Borland C++		1
the sense that		6
the latest instruction	2
the latest compilers	1
the latest version	3
the reciprocal of	2
the reciprocal in	1
the reciprocal factorials	1
the log on     1
the thousand results	1
the break a  1
the break will	1
the Common Language	1
the scope of		5
the principle for	1
the throughput of	3
the throughput (see	1
the expected real-time	1
the application. The	1
the application. In	1
the application. You	1
the largest vector	1
the largest available	1
the largest vector.	1
the dispatched function	1
the normal return	1
the portability could	1
the availability of	5
the .NET framework	1
the .NET framework.	1
the newest CPU		2
the newest instruction	2
the newest processors.	1
the B values.		1
the debugger is		1
the debugger to		1
the debugger then	1
the ^ operator.		1
the base classes.	1
the result. You		1
the compilation is	1
the behavior of	3
the 7 program	1
the form of	3
the worst possible	2
the worst case		2
the job of		1
the job into		1
the job before		1
the job fast		1
the biggest time	2
the biggest vectors:	1
the biggest time-consumer	1
the users with			1
the structure. Incrementing	1
the requirements of		3
the profiler. The		1
the __fastcall keyword		1
the increment and		1
the method. A 1
the remote data	1
the future. If	1
the future. 6	1
the future. Typically,	1
the future. To		1
the swapping of		1
the AVX512 instruction	1
the memset line		1
the rest of		5
the Digital Mars	1
the third generation	1
the CISC instruction	1
the effort to		2
the reduction in	1
the reduction would	1
the strict aliasing	2
the event of		1
the event that		2
the select function,	1
the actual clock	1
the actual load		1
the actual calculations.	1
the actual processor.		1
the console or			1
the advice in			1
the advice given		2
the pow function		1
the recommendation was		1
the physical movements		1
the pitfalls here:		1
the equivalent if(!(a		1
the command line		1
the relatively small		1
the guidelines below.		1
the excessive memory		1
the latency of			2
the latency and			1
the latency or			1
the larger vector		1
the larger address		1
the project at			1
the project window		1
the 107 number			1
the upper 32			1
the key values			1
the combined size		2
the ever bigger			1
the division. Some		1
the present manual		1
the present manual.		1
the strlen function		2
the divisor is			2
the bit-mask: c2		1
the highest instruction		1
the highest level		1
the eight-element vectors:	4
the obstacles to  1
the asmlib function	1
the asmlib library	1
the modulo operator	1
the loader to		1
the loader will		1
the loader calls	1
the SVML and		1
the "Intel Math		1
the "Intel Performance	1
the drawbacks of	3
the commercial compilers.	1
the x86-64 instruction		1
the pipeline and		1
the pipeline then		1
the pipeline structure		1
the flush-to-zero mode		2
the dispatcher. //		1
the queue of	1
the {} brackets	1
the appendix at	1
the empty throw()	1
the C-style type-casting	1
the C-style type-casting.	1
the bottleneck is		2
the directive __declspec(cpu_dispatch(...)).	1
the lrint function				1
the lrint function:				1
the user's time.				2
the user's needs.				1
the area of					1
the consequence of				1
the assumption that				2
the double. Another				1
the image base					1
the worst-case maximum				1
the individual bits				1
the diagonal. The				3
the diagonal. Each				1
the original is					1
the original pointer				1
the original object				1
the mirror elements				1
the functionality of				1
the counts. It	  1
the unit-test but 1
the unit-test does	1
the implicit pointer	1
the interval from	1
the interval 0		1
the interval [1.0,	1
the 33 result		1
the considerations that	1
the selected instruction	1
the selected version		1
the techniques of		1
the techniques in		1
the resolution of		1
the advices may			1
the 49 first			1
the wrong branch		1
the wrong branch.		1
the compiler-generated code	1
the combination of     1
the distance between   1
the C/C++ standard     1
the 124 necessary      1
the basis for	       1
the contents of	       2
the unfortunate consequence	1
the parameter, and		1
the time- consuming		1
the divisions (Division		1
the dividend is			2
the dividend to			1
the stack, which		2
the stack, except		1
the residual error		3
the operations: //		1
the operands. The		1
the nearest element		1
the nearest integer.		1
the 145 SSE2			1
the correct result		1
the correct child		1
the contrary, the		1
the contrary, you		1
the contrary, each		1
the Internet at			1
the Internet where		1
the easiest and			1
the track backwards		1
the ReadTSC function.		1
the same. The			1
the same. This			1
the same. If			1
the technical details		1
the specified instruction	1
the specified types		1
the history of			1
the microprocessor. Integer	1
the microprocessor. Multiplication	1
the micro-op cache. 1
the linker. The	    1
the linker. Both    1
the terminating zero	2
the numerically largest	2
the AVX-512 instruction	1
the market for		1
the logarithm of	1
the logarithm would	1
the logarithm again,	1
the services only	1
the product makes	1
the $B1$2 label		1
the flags register	1
the past history	1
the object's class	1
the object's class.	1
the context. The	1
the goal of  1
the screen. There	1
the screen. However,	1
the market. But		1
the market. Such	1
the dangers of		1
the external clock.	1
the CPU-specific versions	1
the mouse. The	 1
the mouse. This	 1
the relocations in	1
the early planning	1
the heap. The		1
the FDIV bug		1
the decimal point	1
the hint about		1
the loop, for		1
the loop: //		1
the minimum supported	1
the destination array.	1
the CPU, which	1
the answers in	1
the Standard Template	1
the const_cast operator	1
the resulting machine	1
the programmer. 79	1
the unsafe code	1
the movements of	1
the executable. Most	1
the lowest of	1
the parentheses manually.	1
the exponent, and		2
the cross-platform compatibility	1
the comments generated			1
the conflicting considerations		1
the 61 function	1
the sampling generates	1
the theoretical possibility	1
the file, especially		1
the question when		1
the denormals-are-zero mode	1
the branching takes    1
the caller to 1
the caller through	1
the G values,		1
the creation of		1
the vectorclass manual	1
the delay. But	1
the server. These	1
the array, which	1
the "override" feature.	1
the "worst case"	2
the first-in-last-out nature	1
the alignment. See    1
the template. The     1
the container, then   1
the container. STL    1
the container. Can    1
the inverted bit-mask:	1
the inverted mask.	1
the index, i.		1
the time-consumers mentioned	1
the recursion template<>	1
the planning phase		1
the R values 1
the fraction. The	1
the fraction. For	1
the ones that 1
the ones mentioned	1
the trivial programming	1
the symbolic link.	1
the ability to		2
the bottlenecks can	1
the FMA4 instruction	1
the processor). Integer	1
the processor). Optimizing	1
the corresponding instruction	1
the corresponding bitwise	1
the generic branch,		1
the reader has			1
the reader what			1
the low-level C			1
the book "Performance		1
the word static			1
the obstacle of			1
the IDE on   1
the factorials don't	1
the subroutine for	1
the time-critical part	1
the "best case"	  1
the effort. 7.21  1
the effort. Square	1
the overall performance	1
the overall computation	1
the factorials, but	1
the reinstallation work	1
the 512-bit ZMM	   1
the disassembly window	1
the FAQ for	1
the Xnu project.	1
the rows, not		1
the LLVM is		1
the importance of	1
the Boost collection	1
the tolerance may	1
the transformation of	1
the transitions between	1
the stack). ecx	1
the worst- case	1
the initial value	1
the workload between	1
the remaining bits	1
the formula: (set)	1
the usual object	1
the performance, it	1
the profile. It	 1
the IDE, for 1
the IEEE standard	1
the arrays: //		1
the capability to	1
the programmers' time,	1
the processor) when	1
the CPU-type is		1
the even-numbered logical	1
the __assume_aligned directive	1
the lifetime of	     1
the "generate map    1
the evaluation of    1
the bias of    1
the MKL relies 1
the majority of	1
the wheel. The	1
the self-explaining menus	1
the resource-hungry applications	1
the weekdays. The   1
the loader. 2.	    1
the strongest optimization	1
the sizeof operator.		1
the GetTickCount or		1
the original, poorly		1
the .exe file,			1
the burdensome position-independent	1
the scarcity of				1
the other, then				1
the rightmost 1-bit			1
the insertion of			1
the hint, but 1
the spell checking.	1
the likelihood that	1
the preprocessor can	1
the Professional and	1
the responsi- bility	1
the "FDIV bug".		1
the reciprocal: //	1
the post-increment operator	1
the oldest Pentium 1
the grandparent class:	1
the integer-to-float conversion	1
the BTB can	     1
the label. It	     1
the framework, during	1
the end. The   1
the STL. Some  1
the user-written code	1
the following: 130	1
the difference, let's	1
the truth depends	1
the ADX instructions	1
the producer will	1
the iterator in		1
the standards for	1
the broader perspective	1
the EXCLUSIVE OR	1
the representation, except	1
the computational power		1
the next. The	  1
the if-branch in  1
the "Macro loops" 1
the possibilities for	1
the <, <=,	  1
the non-reduced expression	1
the startup code		1
the exponent: //		1
the conversion. The		1
the sign, eee	1
the GOT, and	1
the fundamental laws	1
the design of	1
the texts they	1
the dimensions of	1
the best-case conditions.	1
the destructor, if		1
the wires that	1
the _mm_clflush intrinsic	1
the SelectAddMul example	1
the beginning. ret		1
the former case			1
the pipeline. If		1
the sign-bit if			1
the devirtualization (see	1
the attention of     1
the level- 1  1
the opposite: Don't	1
the for-loop: i++;	1
the complication that	1
the std::unexpected() function	1
the strictness is     1
the application, while	1
the essential task	1
the series: ex		1
the pros and		1
the leftmost column	1
the DelayFiveSeconds function	1
the occurrence is    1
the exact time 1
the circumstances around	1
the Pentium-II or 1
the device. Any	  1
the single-thread speed.	1
the newsgroup comp.lang.asm.x86	1
the C99 standard.		1
the columns. Every		1
the Active Template		1
the resultant code		1
the sequence, where		1
the kind: "what			1
the unit- test			1
the granularity is		1
the BIOS setup.	1
the task-specific part	1
is the function	  1
is the code	  2
is the time	  1
is the vector	  1
is the same	  7
is the only	  2
is the loop	  2
is the one	  1
is the most	  4
is the number	  2
is the variable	  1
is the first	  1
is the case	  2
is the Windows	  1
is the best	  1
is the calculation	1
is the name		1
is the reason		4
is the binary		1
is the old		1
is the feature		1
is the range		1
is the simplest		1
is the situation	1
is the D		1
is the responsibility	7
is the reciprocal	2
is the job		1
is the biggest		1
is the combination	1
is the nearest		1
is the same.		1
is the minimum		1
is the Standard		1
is the exponent,	1
is the "best		1
is the scarcity		1
is the responsi-	1
is the sign,		1
is a function		5
is a loop		1
is a cache		1
is a class		2
is a double		1
is a pointer		2
is a library		1
is a float		1
is a multiple		5
is a clock		2
is a performance	1
is a very		4
is a branch		1
is a way		2
is a register		1
is a template		1
is a new		1
is a useful		2
is a part		1
is a simple		3
is a constant		1
is a large		2
is a big		1
is a specific		1
is a single		1
is a common		5
is a small		1
is a good		4
is a power		16
is a problem		3
is a few		1
is a list		2
is a structure		1
is a standard		1
is a copy		1
is a counter		2
is a lot		2
is a complicated	1
is a dependency		1
is a model		1
is a disadvantage	1
is a high		2
is a reference		1
is a higher		1
is a switch		1
is a positive		2
is a hot		1
is a level-1		1
is a limited		1
is a sum		1
is a total		1
is a risk		2
is a significant	1
is a linear		2
is a penalty		1
is a matter		2
is a series		1
is a waste		2
is a pure		1
is a frequent		2
is a kind		1
is a try		1
is a branch.		1
is a fixed		1
is a convenient		1
is a portability	1
is a considerable	1
is a compromise		1
is a valid		1
is a loop-invariant	2
is a scarce		1
is a float,		1
is a pointer,		1
is a chip		1
is a minor		1
is a 90%		1
is a proxy		1
is a cheap		1
is a precious		1
is a compelling		1
is a staircase		1
is a bottleneck.	1
is of course		4
is to have		1
is to use		7
is to make		8
is to set		1
is to do		2
is to return		1
is to always		1
is to access		1
is to avoid		1
is to compile		2
is to run		1
is to store		1
is to replace		1
is to put		1
is to choose		1
is to turn		1
is to find		1
is to rely		1
is to save		1
is to divide		3
is to mix		1
is to insert		1
is to enable		1
is to keep		1
is to allocate		1
is to help		1
is to hold		1
is to remove		1
is to declare		1
is to detect		1
is to roll		1
is to wrap		1
is to join		1
is to resume		1
is to combine		1
is and interpreted	1
is in mathematical	1
is in fact		1
is in edx,		1
is for the		1
is for C++		1
is for advanced		1
is that the		26
is that a		1
is that it		11
is that if		2
is that x		1
is that you		1
is that all		1
is that we		1
is that access		1
is that branches	1
is that modern		1
is that communication	1
is that CParent::Hello()	1
is that r+i/2			1
is // erroneously		1
is it unusual			1
is by a				1
is on a				1
is on mathematical		1
is as efficient			3
is as fast			1
is as follows:			1
is not the			3
is not a			7
is not in			3
is not an			4
is not i			1
is not possible			5
is not less			1
is not even			1
is not always			6
is not out			1
is not part			1
is not accessed			2
is not necessary		5
is not good			1
is not advantageous		4
is not known			5
is not certain			1
is not shared			1
is not quite			1
is not recommended		3
is not optimal			4
is not efficient.		1
is not needed			5
is not divisible		2
is not predicted		1
is not intended			1
is not clear			1
is not needed.			2
is not copied			1
is not significant		1
is not standardized		1
is not included			1
is not resolved			1
is not allowed			2
is not evaluated		1
is not permissible		1
is not portable			1
is not necessarily		2
is not seen			1
is not necessary.		1
is not doubled.			1
is not optimal.			1
is not guaranteed		1
is not expensive.		1
is not cached.			1
is not optimized.		1
is not separated		1
is not unusual			2
is not modified.		1
is not vacant			1
is not supported.		1
is not visible			1
is not allowed.			1
is not uncommon			2
is not recognized		1
is not human			1
is not referenced		1
is not evaluated,		1
is not detected			1
is not standardized.		1
is not traditionally		1
is not satisfactory.		1
is not met			1
is an integer			2
is an Intel			1
is an object			1
is an array			1
is an even			1
is an important			2
is an extra			3
is an advantage			1
is an expression		2
is an advanced			1
is an integer,			2
is an arithmetic		1
is an n'th			1
is an integer).			1
is time consuming		1
is more than			1
is more efficient		18
is more important		1
is more common			1
is more advantageous		2
is more likely			1
is more complicated		2
is more efficient.		2
is more difficult		1
is more relevant		1
is more safe			1
is more expensive		1
is more predictable		1
is more compact			2
is more complex			2
is more focus			1
is more difficult.		1
is more complicated.		1
is more manageable		1
is then stored			1
is then de-referenced		1
is memory pooling.		1
is data decomposition.		1
is different for		1
is because the			3
is because it			1
is because we			1
is because modern		1
is because algebraic		1
is because computers		1
is only a  3
is only an 1
is only used	1
is only one	1
is only possible	2
is only called		1
is only calculated	2
is only safe		1
is only half		1
is only 10%		1
is other code		1
is other work		1
is all done		1
is all 1's		1
is used is		1
is used and		2
is used in		7
is used for		12
is used or		1
is used by		2
is used as		2
is used more		1
is used when		1
is used only		2
is used inside		1
is used during		1
is one of		3
is one that		1
is one set		1
is no more		1
is no loop		1
is no such		1
is no performance	2
is no way		3
is no operating		1
is no need		7
is no extra		1
is no big		1
is no exception		1
is no check		2
is no problem		1
is no advantage		1
is no cost		2
is no automatic		1
is no reason		5
is no difference	5
is no longer		1
is no graphics		1
is no checking		1
is no clear		1
is no risk		3
is no penalty		1
is no easy		2
is no try		1
is no heavy		1
is no loop-carried	1
is no 51		1
is no doubt		1
is no guarantee		1
is set in		1
is set by		1
is floating point.	1
is most efficient	1
is most often		1
is most useful		1
is most appropriate	1
is using a		1
is using one		1
is double There		1
is float 140		1
is two or		1
is number one		1
is also a 4
is also used	3
is also possible	2
is also called		2
is also useful		2
is also available	2
is also likely		1
is also quite		1
is also recommended	1
is also relevant	1
is also discussed	1
is also treated		1
is also deallocated.	1
is also de-allocated.	1
is efficient for	1
is efficient when	1
is many times		1
is possible to		29
is possible in		2
is clock cycles		1
is so long		1
is so important		1
is so large		1
is so big		1
is so much		1
is so small		1
is so complicated	1
is so high		2
is so kludgy		1
is 2 GHz		1
is very time		1
is very useful		1
is very important	3
is very large		1
is very small		1
is very likely		2
is very fast		1
is very inefficient	1
is very little		1
is very inefficient.	1
is very fast.		1
is very limited.	1
is very problematic	1
is very old-fashioned.	1
is long because		1
is long does		1
is branch prediction.	1
is member of		1
is faster the		1
is faster to		5
is faster //		2
is faster if		5
is faster with		1
is faster than		16
is faster when		1
is faster because	1
is stored in		6
is stored on		1
is stored as		4
is stored at		1
is stored (or		1
is called the		1
is called a		3
is called and		3
is called in		1
is called for		1
is called by		1
is called with		1
is called on		1
is called when		1
is called from		3
is called only		1
is called CPU		1
is called before	1
is called register	1
is called stack		1
is called through	1
is called name		1
is called core		1
is called square	1
is called garbage	1
is called once		1
is called CodeAnalyst.	1
is called VTune;	1
is 4 bytes		1
is critical when	1
is 8 kb	    1
is less than	5
is less efficient	7
is less useful		1
is less important	1
is less advantageous	1
is less efficient.	1
is less reliable.	1
is unsigned Examples:	1
is often the		1
is often a		2
is often an		1
is often more		2
is often possible	2
is often faster		2
is often useful		1
is often necessary	2
is often implemented	1
is often easier		2
is often determined	1
is often preferable	1
is often reorganized	1
is often seen,		1
is how the		1
is template metaprogramming	1
is useful to			1
is useful in			1
is useful for			6
is useful if			1
is useful on			1
is useful when			1
is useful because		1
is useful whenever		1
is even more			1
is sure to			2
is always 0			1
is always position-independent	1
is always inlined		1
is always resolved		1
is always enabled		1
is always one,			1
is always true/false		1
is always normalized,		1
is 16 bits			1
is out of			3
is 32 bits			1
is 32 bits,			1
is file access			1
is part of			2
is 0 and			1
is 0 for			1
is short in			1
is available in			3
is available for		3
is available then		2
is available from		2
is constant and			1
is important to			16
is important for		1
is important that		3
is accessed in			1
is accessed by			1
is accessed with		1
is accessed from		1
is accessed most		1
is accessed much		1
is accessed through		1
is accessed quite		1
is accessed after		1
is large or 1
is large then	1
is large because	1
is compiled to		1
is compiled and		1
is compiled in		1
is compiled for		3
is compiled with	1
is compiled as		1
is compiled when	1
is compiled into	1
is compiled without	1
is big and  1
is big enough	3
is best for	1
is best when	1
is best suited	1
is necessary to	10
is necessary for	1
is necessary if		1
is necessary here	1
is specific to		1
is much more		2
is much faster.		2
is much slower		1
is much simpler		1
is much faster,		1
is common to		2
is common for		1
is common practice	1
is exception safe	1
is allocated is		1
is allocated and	1
is allocated dynamically	1
is allocated separately.	1
is small and 2
is small or  2
is small then	1
is small enough	1
is good to	1
is good for	2
is good if	1
is done in	1
is done by	3
is done with	2
is done at	2
is done only	1
is done every	1
is done simply	1
is therefore a	1
is therefore not	1
is therefore more	1
is therefore possible	1
is therefore important	1
is therefore necessary	3
is therefore certain	1
is therefore recommended	2
is therefore equal		1
is therefore becoming		1
is therefore safer		1
is optimized is			1
is optimized for		1
is optimized away.		1
is inside a  1
is inside another	1
is explained on		1
is explained below	1
is calculated the	1
is calculated in	1
is calculated as	1
is calculated from	4
is calculated at	1
is calculated fast	1
is calculated twice	1
is calculated first,	1
is calculated internally	1
is 128 bits   1
is 128 bytes  1
is four places	1
is another security	1
is advantageous to	7
is advantageous in	2
is advantageous if	2
is advantageous because	1
is advantageous if,	1
is implemented in	3
is implemented with	1
is implemented as	2
is implemented simply	1
is implemented internally	1
is known to    4
is known with  1
is known from  1
is known at    6
is known which 1
is known before	1
is supported in	3
is supported by	7
is supported on	1
is eight in  1
is likely to 19
is likely in 1
is likely that	2
is doing an	1
is doing multiple	1
is doing two		1
is 1 0.5ns.		1
is simply the		1
is simply a		5
is simply not		1
is simply an		1
is simply no		1
is simply optimized	1
is simply predicted	1
is simply identical.	1
is able to		3
is certain to		2
is certain that		1
is shared between	1
is quite efficient	1
is quite simple		1
is quite certain	1
is quite difficult	1
is quite inefficient.	1
is quite expensive	1
is quite inefficient,	1
is quite tedious	1
is used. The		3
is used. A		1
is used. It		2
is used. For		1
is used. An		1
is used. However,	1
is used. Dynamic	1
is recommended to	21
is fast and    1
is fast anyway 1
is fast enough.	1
is optimal to	2
is optimal in	1
is optimal for	1
is optimal on	1
is optimal only	1
is typically between	1
is typically 64		2
is typically implemented	1
is typically aligned		1
is typically loaded		1
is preferably implemented	1
is automatically deallocated	1
is implementation dependent.	1
is never stored	  1
is never used.	  2
is never called.  2
is never changed. 1
is high and	  1
is high then	  1
is zero if	  1
is zero by	  1
is zero }	  1
is Microsoft Visual	1
is Microsoft Foundation	1
is running in		1
is running on		1
is running on,		1
is running on.		1
is running at,		1
is n places		1
is better than		2
is too important	1
is too big		1
is too big.		1
is too fine		1
is too high.		1
is too late.		1
is needed a		1
is needed in		1
is needed for		2
is needed only		1
is difficult to		4
is difficult for	3
is transferred to	1
is transferred as	1
is transferred from	1
is transferred at	1
is longer than 1
is aligned #pragma	1
is actually more	1
is actually quite	1
is actually used.	1
is actually needed	1
is actually hidden	1
is later ported		1
is calling itself	1
is declared or		1
is declared by		1
is higher for		1
is bigger than		3
is divisible by		6
is 512 kb    1
is 512 kb,   1
is usually the	1
is usually not	1
is usually faster	1
is usually called	2
is usually much		1
is usually done		1
is usually higher	1
is usually predicted	1
is usually inlined	1
is usually divided	1
is called. The		2
is called. This		2
is called. If		1
is called. You		1
is called. I		1
is called. Example:	1
is called. Lazy		1
is called. 118		1
is based on		2
is based mainly		1
is made to		2
is made very		1
is just a		1
is just an		1
is just long		1
is just easier		1
is smaller and		1
is smaller in		1
is smaller because	1
is relevant for		1
is relevant when	2
is replaced by		3
is negative or		1
is predicted if		1
is predicted well.	1
is predicted well,	1
is loaded or 1
is loaded into	1
is loaded cannot	1
is loaded rather	1
is compatible with	4
is 1. This    1
is intended to	2
is intended for	5
is intended as	1
is intended for.	2
is avoided for		1
is slow // 2
is slow unless	1
is inefficient to	2
is inefficient because	3
is described in		1
is described below.	1
is particularly critical.	1
is particularly interesting	1
is particularly risky		1
is particularly tricky.		1
is given in	1
is given as	1
is outside the	1
is outside this	1
is limited is	1
is limited to	1
is limited and	1
is limited by	2
is sometimes more	1
is sometimes possible	1
is inlined - 1
is still the 2
is still frustrated	1
is safe to		1
is safe and		1
is further explained	1
is clear that		2
is obtained if		1
is obtained by		3
is obtained with	2
is obtained when	1
is possibly more	1
is overloaded or	1
is possible. A		1
is OS independent	1
is needed. The		1
is needed. Example:	1
is needed. These	1
is needed. All		1
is needed. Objects	1
is changed to		1
is changed so		1
is true that		1
is true 50%		1
is true 10%		1
is initialized or	1
is initialized when	2
is initialized only	1
is discussed on		1
is discussed which	1
is discussed how	2
is discussed below.	1
is copied to 2
is copied by 1
is copied from	1
is defined in	2
is defined inside	1
is Visual Basic		1
is rarely possible	1
is rarely necessary	1
is rarely needed	1
is rarely needed.	1
is rarely enough	1
is rarely worth		1
is easier to		3
is identical to		2
is similar to		2
is significant if	1
is something that	1
is invalid when		1
is within a		1
is used, for		1
is used, it		1
is used, then		2
is used, but		1
is organized in		1
is organized if		1
is added to  5
is approximately three	1
is approximately 12	1
is approximately six	1
is easy to	 3
is chosen for	 1
is chosen as	 1
is chosen only	 1
is slightly more 2
is slightly less 1
is independent of	2
is low in      1
is enabled. The	2
is enabled. A	1
is enabled. There	1
is enabled. Conversion	1
is enabled. Conversions	1
is enabled. Typically,	1
is enabled. Volatile	1
is enabled. Few		1
is near the 1
is provided in	1
is provided as	2
is inefficient. Division,	1
is critical. The		2
is critical. Optimizing		1
is available. The		3
is brand new  1
is executed. The	1
is executed. This	1
is executed. An		1
is executed. Furthermore,	1
is executed. Optimizes		1
is executed. Without		1
is faster. In			1
is pure if 1
is pure __attribute((	1
is fully standardized	1
is fully portable	1
is mispredicted only	4
is standardized allows	1
is included in	2
is included for	1
is 12 bytes.	1
is now as	1
is lower than	1
is converted to	2
is converted by	1
is equally fast	1
is equally efficient.	1
is designed for		2
is fragmented and	1
is fast. Value		1
is fast. Calculating	1
is fastest on		1
is fastest because	1
is required for		2
is almost always	1
is almost certain	2
is almost independent	1
is preferred to		2
is preferred when	1
is interpreted in	1
is interpreted as	1
is interpreted again	1
is exactly as  1
is exactly identical	1
is determined by	2
is determined where	1
is resolved when	1
is resolved at		2
is poorly predictable	1
is poorly predictable.	1
is poorly predictable,	1
is important. This	2
is important. A		1
is important. Some	1
is important. An	1
is allowed only		1
is distributed and	1
is distributed as	1
is distributed between	1
is generally possible	1
is generally faster	1
is called, a 1
is called, it	3
is called, while	1
is free and		1
is far from		1
is hardly any		1
is hardly worth		1
is hardly ever		1
is waiting for		2
is available, 256	1
is measured in		1
is measured with	1
is measured simply	1
is Intel's term		1
is equal to		3
is compact and		1
is spent in		1
is spent on		1
is 15 on 1
is expected to	1
is convenient to	1
is costly if  1
is costly when	1
is efficient, but	1
is poor if    1
is evaluated only	1
is deallocated when	1
is permissible when	1
is 4. So       1
is obvious and 1
is swapped with	2
is portable in	1
is becoming increasingly	1
is executed only		1
is executed even		1
is executed 10			1
is finished. The		1
is finished. Example:		1
is finished. Obviously,		1
is finished. Register		1
is split between		1
is created or			2
is already in			1
is already known		2
is nothing to			2
is increased when		1
is nonzero } 1
is equivalent to	1
is relatively expensive,	1
is inefficient, of		1
is inefficient, especially	1
is inefficient, however,	1
is necessarily accessed		1
is safer to    2
is larger than 1
is unfortunately very	1
is divided into	 1
is valid only	 1
is seen in	 1
is contiguous with	2
is necessary. 101	1
is increasing faster	1
is AND'ed with		4
is definitely the	1
is doubled. The		2
is doubled. This	1
is true, and		1
is true, then		1
is true, which		2
is __asm int		1
is currently not	1
is currently only	1
is better. Whenever	1
is preferable to	1
is preferable for	1
is enabled there	1
is enabled (single	1
is sufficiently accurate	1
is bad The	1
is said here	2
is declared. If	1
is declared. An	1
is declared. Therefore,	1
is declared. Avoid	1
is true. The 1
is running. The	1
is running. If	1
is serial in	1
is serial because	1
is guaranteed to	2
is commonly the		1
is extended to		1
is contained in		1
is going to  1
is cached. Usually	1
is unsigned. The	1
is treated as		2
is prevented from	2
is seldom used.		1
is double. Here		1
is 50% of  1
is illustrated in	2
is optimized. We	1
is coded as   2
is represented with	1
is kept in     1
is selected if 1
is multiplied by	1
is inferior to		1
is unable to		2
is finished using	1
is run. The 1
is run. Examples	1
is run. Both		1
is simpler than		1
is simpler when		1
is deleted when		1
is deleted properly	1
is slow, you		1
is slow, then		1
is slow, difficult	1
is performed on		2
is removed from		1
is unfortunate because	1
is loaded. This		1
is implemented. The	2
is annoying to	1
is elsewhere then	1
is filled up,		1
is supplied with	1
is translated to	1
is translated into	1
is correct or 1
is stored. This	1
is inlined. An	1
is probably the	1
is beyond the	3
is infinity or	1
is false, then	1
is negligible when	1
is negligible because	1
is best. These		1
is best. 3.11		1
is odd and		1
is handled at		1
is handled separately:	1
is implicitly converting	1
is valid. For 2
is valid. Re-interpreting	1
is slow. If			1
is slow. Value			1
is limited. Example:		1
is limited. Dynamic		1
is ported to			1
is big. The			1
is extremely complicated	1
is extremely costly		1
is extremely inefficient,	1
is certainly a			1
is certainly more		1
is certainly something		1
is indeed a  1
is indeed vectorized	1
is sufficient to	2
is evicted before	1
is impossible to	1
is mostly compatible	1
is type-casted to	1
is 1024 bytes, 1
is 400 here.   1
is freed when  1
is biased allows	1
is reused again		1
is compiled. This	1
is compiled. #if	1
is volatile. The	1
is supported. For	1
is pure. Virtual	1
is bypassed by		1
is -0 (zero 1
is achieved when	1
is inserted in		1
is specified. The	1
is overwritten, possibly	1
is false. Likewise,		1
is small. The			1
is unsafe because		1
is concentrated on		2
is capable of	1
is worthwhile to	1
is eliminated. Loop	1
is profitable to	1
is unstable or		1
is required. The	1
is required. See	1
is 8192 /    1
is lost. This	1
is obviously influenced	1
is allowed. The		1
is (columns *		1
is defined. This	1
is known. This		1
is known. Example:	1
is restarted anyway.	1
is dividing repeatedly	1
is fed into 1
is relocated (rebased)	1
is consistent for	1
is created. There	1
is started. It		1
is deleted. Smart	1
is needed: //		2
is loaded, the		1
is loaded, but		1
is 0. The  1
is rolled out	1
is busy doing	1
is busy concentrating	1
is updated. Most	1
is wasted on		2
is stronger when	1
is fast, compact,	1
is somewhat more	1
is invalid. Boolean	1
is heavily loaded.	1
is available: //	2
is closed. The		2
is avoided. The		1
is 95 not   1
is repeated until	1
is accessed, and	1
is accessed, it		1
is inherently parallel	1
is safer. Type		1
is 102 also		1
is terminated. The	1
is moved, which		1
is saturated. This	1
is incremented. See	1
is insufficient. The	1
is unacceptable to	1
is unchanged across	1
is compiling. This	1
is enabled: //		1
is over. Virtualization	1
is dead code		1
is InstructionSet().The following	1
is correlated with	1
is ecx+eax*4. The	1
is system-independent, in	1
is occupied throughout 1
is referencing it      1
is unreasonably large. 1
is maintained for      1
is aiming at  1
is pushed on  1
is requested. See	1
is delayed for		1
is assumed that		1
is (int)(&list[100]) =	1
is mirrored in	     1
is closest to	     1
is utilized appropriately.	1
is developing so		1
is supposed to			1
is copyrighted by		1
is acceptable. 3.6		1
is unnecessarily wasteful	1
is caught by	 1
is checked before	1
is happening. It	1
is OK, however,		1
is opposite). 9.10	1
is reset or   1
is unchanged, while	1
is reserved for		1
is ambiguous and	1
is counting clock	1
is provoked here	1
is repetitive. The	1
is artificially changed	1
is advisable to	1
is inexact if	1
is exact. Multiple	1
is created, deleted,	1
is organized. Floating	1
is reflected, first	1
is terminated and	1
is returned. There	1
is pipelined, as	1
is taken. A   1
is taken, i.e.	1
is clearly better.	1
is destroyed. In	1
is shut down  1
is re-allocated every	1
is signed, or	1
is 83 called	1
is virtually no	1
is expanded like	1
is fastest. The		1
is distributed. The	1
is unrealistic that	1
is deprecated. This	1
is strongly recommended	1
is obvious. See		1
is obvious, then	1
is servicing. A		1
is inferior. A		1
is cached, but		1
is rare. Testing	1
is "undefined". This	1
is admittedly very	1
is 8*1024/64 =		1
is stored? If		1
is Borland's now	1
is Perl. Several	1
is wrong, but		1
is rebooted. To		1
is unlikely that	1
is profitable. On	1
is considerable. If	1
is costless. It	 1
is responsible for	1
is tempting to 1
is minimized. For	1
is minimized if		1
is re-loaded from	1
is incurred on		1
a is true   1
a is true,  1
a is true.  1
a is false. 1
a a &	    1
a a &&	    1
a a |	    1
a a ^	    1
a to the    1
a to be	    1
a to this   1
a to double 1
a to b	    2
a to unsigned	1
a to zero	2
a and b		15
a and r		1
a and b,	1
a and edx	1
a and b.	1
a in a		1
a = a		10
a = x		1
a = b		18
a = a,		1
a = b;		2
a = c;		1
a = 0,		2
a = (unsigned	4
a = parabola	1
a = 0x2710	1
a = (b		1
a = select(b	2
a = 1.0f	1
a = sin(0.8);	1
a = -100,	1
a = lookup[b];	1
a = _mm_or_si128(c2,	1
a = OneOrTwo5[b!=0];	1
a = (int)d;		1
a = (b*c)/d,		1
a = Func1(2);		1
a = -1.0E8,		1
a = 5.0f;		1
a = OneOrTwo5[b		1
a = _mm_blendv_epi8(bc,	1
a = CriticalFunction(b,	1
a = 10000,		1
a = b++;		1
a = ++b;		1
a = (*CriticalFunction)(b,	1
a = Multiply(10,8);		1
a = select_gt(b,		1
a = FactorialTable[b];		1
a function is			9
a function of			1
a function to			1
a function in			8
a function for			3
a function that			8
a function are			2
a function can			1
a function or			1
a function if			2
a function with			1
a function which		2
a function but			1
a function should		3
a function pointer		5
a function into			1
a function library		2
a function return		1
a function call			3
a function template		1
a function through		1
a function uses			1
a function parameter		2
a function just			1
a function library.		1
a function call.		1
a function library,		1
a function opens		1
a function parameter,		1
a function prototype		1
a function local:		1
a code that			2
a code then			1
a code one			1
a code version			1
a - n.a.			6
a - 1;				2
a - a-a				1
a - a*0				1
a - 0/a				1
a - a/1				1
a compiler to			2
a compiler that			2
a compiler can			1
a compiler with			1
a compiler may			1
a compiler option		1
a compiler generates		1
a compiler warning		1
a x -	   1
a time and 3
a time in  1
a time because	1
a time consumer	1
a time packed	1
a time measure.	1
a use situation	1
a more efficient	1
a more clear		2
a more well-structured	1
a more distant		1
a will be		1
a will never		1
a memory address	3
a memory block		2
a memory pointer.	1
a memory buffer		1
a memory address.	1
a memory pool.		1
a memory heap.		1
a memory pool,		1
a data member		4
a program is		3
a program and		1
a program for		1
a program that		1
a program than		1
a program may		1
a program you		1
a program then		1
a program has		6
a program where		1
a program uses		1
a program contains	3
a program reads		1
a program package	1
a program repeats	1
a program chooses	1
a program saying	1
a program executable:	1
a program creates	1
a program dictates	1
a vector of		9
a vector or		1
a vector register	1
a vector implementation	1
a vector goes		1
a vector just		1
a vector register.	1
a vector simultaneously.	1
a vector register,		1
a make utility.			2
a different function		1
a different code		1
a different compiler		1
a different way			1
a different operating		1
a different type		1
a different implementation	1
a different name		1
a different platform		1
a different compiler.		1
a different thread.		1
a different way.		1
a different address.		1
a different module		1
a different kind		1
a different array.		1
a different type.		1
a different meaning.		1
a different meaning		1
a only when 1
a CPU of    1
a CPU with  3
a CPU dispatcher	3
a loop is		1
a loop of		1
a loop and		1
a loop in		1
a loop for		1
a loop that		2
a loop or		1
a loop if		2
a loop with		2
a loop where		2
a loop contains		1
a loop counter		3
a loop count		1
a loop automatically	1
a loop needs		1
a loop becomes		1
a loop depends		1
a loop repeats		1
a loop manually		1
a loop counter,		1
a loop count.		1
a loop counter:		1
a one parameter.	1
a cache is		1
a cache of		1
a cache that		1
a cache line		2
a cache line.		3
a cache line:		1
a cache miss.		1
a set of		2
a class is		1
a class are		2
a class or		4
a class with		2
a class data		1
a class member		2
a class template	1
a class need		1
a class Variables	1
a class containing	1
a class definition.	1
a class (also		1
a floating point	13
a double by		1
a double which		1
a double takes		1
a double without	1
a double precision	1
a double uses		1
a pointer of		1
a pointer to		15
a pointer in		2
a pointer can		1
a pointer or		11
a pointer then		1
a pointer stored	1
a pointer does		1
a pointer well		1
a pointer points	1
a + b	  5
a + 2	  1
a + 1;	  6
a + 1.0f; 1
a + b;}	  1
a library of	1
a library function	2
a library other		1
a float or		2
a float uses		1
a float variable.	1
a multiple of		9
a number of		4
a number to		1
a static object		1
a static part		1
a static link		1
a static library.	1
a static buffer		1
a static library,	1
a 64-bit integer	1
a 64-bit double		2
a 64-bit version	1
a 64-bit shared		1
a 64-bit double,	1
a C++ program		1
a C++ program.		1
a C++ program,		1
a * 2;			4
a * 3;			4
a * (2n			1
a * a;}			1
a * 2.5;		1
a possible point	1
a possible minor	1
a clock cycle		4
a clock cycle?		2
a version control	1
a value is		1
a value that		2
a value from		1
a variable is		3
a variable in		3
a variable for		1
a variable that		1
a variable can		1
a variable or		2
a variable from		1
a variable because	1
a variable which	1
a variable number	1
a variable even		1
a variable through	1
a variable global	1
a variable until	1
a variable declaration	1
a 2 GHz	   1
a table of 5
a table in 1
a table // 2
a table with	1
a table lookup	1
a table lookup.	1
a table lookup:	2
a performance test	1
a performance penalty	1
a very efficient	2
a very long		1
a very user		1
a very useful		1
a very large		4
a very big		1
a very good		1
a very high		1
a very inefficient	2
a very low		1
a very dramatic		1
a very contrived	1
a very obscure		1
a software optimization	1
a software programming	1
a software implementation	2
a software framework		1
a software module		1
a software package		3
a long time			4
a long vector			2
a long time.			1
a long list			1
a long dependency		2
a long time,			1
a long sequence			1
a long delay.			1
a 32-bit integer		1
a 32-bit number			1
a 32-bit number.		1
a 32-bit (signed)		1
a branch that			3
a branch by			1
a branch will			2
a branch into			1
a branch inside			1
a branch (e.g.			1
a branch misprediction		1
a branch tree.			1
a < b	 1
a member of	5
a member function	6
a member function.	2
a way of 1
a way to 2
a way that	4
a faster vectorized	1
a const function	1
a const reference	2
a const reference.	1
a critical function	1
a critical part		1
a critical dependency	2
a critical piece	1
a call to  2
a register to	1
a register and	1
a register if	1
a register variable	2
a register rather	1
a register (see		1
a register variable.	2
a register stack.	1
a register except	1
a 64 64	   1
a rather unconventional	1
a time. This		1
a time. A		1
a time. You		1
a time. Do		1
a template has		1
a template class	2
a template parameter	1
a template parameter.	4
a template parameter:	2
a test program		1
a test run		1
a test feature		1
a test tool		1
a new and		1
a new compiler		1
a new memory		2
a new vector		1
a new instruction	1
a new cache		1
a new floating		1
a new object		2
a new version		1
a new value		1
a new software		1
a new branch		2
a new register		2
a new processor		1
a new element		1
a new addition		1
a new bigger		2
a new instance		2
a new one.		2
a new physical		1
a user is		1
a user has		1
a useful way		1
a useful source		1
a system with		1
a system call		1
a file is		1
a file in		1
a file that		1
a file can		1
a file by		1
a file on		1
a programming language	1
a dynamic library	3
a dynamic link		1
a part of 2
a short time	1
a short vector	1
a & a	1
a & b	1
a & 0	1
a & b;	2
a & -1	2
a & ~a	2
a & 0=	1
a & a=	1
a simple function	1
a simple integer	1
a simple class		1
a simple pointer	1
a simple array		2
a simple test		1
a simple type		1
a simple algorithm	1
a simple variable.	2
a simple regular	1
a simple index.		1
a simple periodic	2
a simple type,		1
a simple solution,	1
a constant is		6
a constant to		2
a constant that		1
a constant can		1
a constant with		1
a constant should	1
a constant (see		1
a constant known	1
a constant reference	1
a constant plus		1
a constant divisor	1
a stack frame		1
a stack frame,		1
a function. Using	1
a function. Avoid	1
a large memory		1
a large part		1
a large cost		1
a large runtime		1
a large positive	1
a large overhead	1
a large delay		1
a large fraction	1
a large object,		1
a must be		1
a ; parameter		1
a ; r			1
a ; top			1
a Windows compiler	1
a Windows program	1
a result of		2
a result then		1
a processor will	1
a processor has		1
a big program		1
a big loop		1
a big floating		1
a big matrix		1
a big program.		1
a big waste		1
a big mainframe		1
a language that		1
a specific CPU		4
a specific instruction	1
a specific size		1
a specific pointer	1
a specific advantage	1
a specific graphics	1
a specific load		1
a specific size.	1
a specific purpose.	1
a specific purpose,	1
a specific purpose:	1
a specific interval.	1
a much more		1
a single function	3
a single object		2
a single branch		1
a single call		2
a single bit		1
a single register	1
a single &		1
a single constant	1
a single function.	1
a single operation	1
a single task		1
a single executable	1
a single element.	1
a single step		1
a single result.	1
a single operation.	1
a single instruction.	1
a single container,	1
a single comparison:	1
a single result,	1
a single session.	1
a virtual function	2
a virtual table		2
a virtual member	2
a common way		1
a common programming	2
a common error		1
a common cause		1
a common source		1
a common denominator	1
a common denominator:	1
a thread is		1
a thread to		1
a thread that		1
a thread jumps		1
a thread environment	1
a thread affinity	1
a small and		1
a small bit		1
a small test		1
a small part		1
a small block		1
a small piece		2
a small fraction	1
a += b;	1
a += 2;	1
a good compiler	1
a good performance	1
a good way		1
a good implementation	1
a good choice		3
a good idea		3
a good deal		2
a good investment.	1
a good knowledge	1
a power of		28
a matrix is		4
a matrix a		1
a matrix and		1
a matrix in		1
a matrix for		1
a matrix when		1
a matrix using		1
a matrix line		1
a matrix line.		1
a Linux compiler,	1
a precision of		1
a line size 2
a manual on 1
a / b	 1
a 128 bit	3
a check before	1
a problem with	1
a problem when	1
a problem then	1
a problem since	1
a known CPU	1
a solution where	1
a container for		2
a container that	2
a container or		1
a container than	1
a container class	2
a container class.	1
a few more  1
a few functions	1
a few clock	6
a few cases	1
a few instructions	1
a few times		1
a few extra		1
a few arrays		1
a few cases,		1
a few unused		1
a few lines		1
a few machine		1
a few pitfalls		1
a few lines.		1
a few kilobytes		1
a few comments		1
a few places.		1
a list is		1
a list of		3
a list should		1
a list float		1
a structure or		5
a structure where	1
a standard for		1
a standard function	1
a hardware implementation	1
a hardware definition		5
a : b;	   1
a : b)	   1
a store operation	1
a store forwarding	2
a copy constructor	1
a copy protection	1
a well optimized	1
a certain modification	1
a certain tolerance.	1
a certain interval:	1
a counter that		1
a counter inside	1
a shared object		5
a shared object.	1
a shared object,	1
a program. The		2
a program. This		1
a program. Avoid	1
a program. Whole	1
a was zero 1
a space in 1
a lot of   22
a lot to   3
a lot in   1
a particular code	2
a particular compiler	1
a particular memory	2
a particular CPU	2
a particular instruction	2
a particular integer		1
a particular set		1
a particular programming	1
a particular part		1
a particular processor		1
a particular application	1
a particular piece		1
a particular brand		1
a particular application.	1
a particular reduction		1
a particular purpose.		1
a particular weakness		1
a particular meaning,		1
a particular subtask		1
a particular situation,		1
a microprocessor in		1
a microprocessor that		1
a microprocessor because	1
a multiplication and		1
a multiplication but		1
a complicated code		1
a complicated implementation	1
a complicated process		1
a dependency chain		1
a dependency chain.		1
a Boolean vector.		1
a Boolean NOT			1
a signed integer		2
a signed variable		1
a model that			1
a separate function		2
a separate version		1
a separate file			1
a separate dynamic		2
a separate function.		1
a separate thread		5
a separate C			1
a separate module		1
a separate subroutine		1
a separate module,		1
a block of 1
a needs to 1
a disadvantage for	1
a disadvantage if	2
a disadvantage when	1
a high power   2
a high overhead	1
a high repeat	1
a high level	1
a high priority.	1
a high degree		1
a high price,		1
a parameter is		1
a parameter of		1
a parameter to		1
a reference to		1
a reference or		2
a string is 2
a string of 1
a string and	1
a programmer may	1
a better version	1
a better result		1
a better solution	1
a better solution.	1
a better understanding	1
a lookup in		1
a lookup table		3
a lookup table:		2
a && a	 1
a && b	 2
a && b;	 1
a && true	1
a && false	1
a && !a		1
a | a		1
a | b		1
a | 0		2
a | b;		1
a | -1		2
a difference in	1
a mechanism called	1
a runtime check		1
a runtime DLL		1
a means of		1
a || b	1
a || b;	1
a || true	1
a || false	1
a || !a		1
a > b		1
a longer size	1
a graphics function	2
a graphics library	1
a graphics processing	1
a graphics card		1
a graphics accelerator	1
a graphics coprocessor	1
a public data		1
a public variable	2
a framework in		1
a framework sometimes	1
a linked function	1
a linked list		4
a linked list.		3
a platform with		1
a dispatch is		1
a second application	1
a second induction	1
a second step		1
a higher instruction	2
a higher number		1
a higher clock		1
a higher address	1
a higher risk		1
a piece of		10
a binary representation	1
a binary tree		1
a binary search,	1
a binary tree.		1
a 512 512		2
a union is		2
a feature for		2
a feature called	1
a link map		1
a constructor for	1
a compiler. Some	1
a compiler. Many	1
a #define directive	1
a switch in		1
a switch between	1
a switch statement	2
a smaller memory	1
a smaller size		1
a negative list		3
a negative result.	1
a positive integer	1
a positive list		3
a positive integer:	1
a loop. Example:	1
a computer with		1
a computer game		1
a pointer. The		1
a pointer. A		1
a pointer. It		4
a change in		1
a global variable	3
a global const		1
a global object.	1
a relative reference	1
a relative difference	1
a syntax restriction,	1
a profiler to		2
a profiler that		1
a profiler which	1
a profiler works	1
a Windows, Linux,	1
a modern CPU.		1
a network with		1
a network may		1
a slow and		1
a slow bit		1
a slow CPU,		1
a whole polygon		1
a whole workday		1
a level-2 cache		2
a response is		1
a hot spot 2
a hot spot.	1
a given instruction	1
a given task		1
a level-1 data		1
a task is 1
a task into	1
a task switch	1
a limited number	1
a limited range		1
a limited resource.	1
a limited audience	1
a local const		1
a local variable.	1
a database for		1
a database by		1
a bool is  1
a frame function	1
a frame function,	1
a special loop		1
a special cache		1
a special trick		1
a shift operation	1
a shift operation.	2
a shift operation,	1
a destructor to		1
a destructor that	3
a destructor if		1
a safe way   1
a safe programming	1
a Pentium 4		3
a Pentium 4.		1
a further discussion	1
a sum of  1
a discussion of	2
a non-Intel CPU.	1
a maximum of		1
a macro to		1
a macro in		1
a macro so		1
a reduced number	1
a variable. Make	1
a variable. Efficiency	1
a time, then		1
a processing speed	1
a so-called soft	1
a total offset		1
a total waste		1
a 128-bit vector	2
a 128-bit XMM		2
a full size		1
a thread. You		1
a square brackets	1
a little more		2
a little faster		1
a little explanation.	1
a little odd		1
a logical sequence.	1
a smart pointer		2
a smart pointer.	3
a subexpression to	1
a bounds check	1
a message loop	1
a condition is	1
a parallel structure	1
a ? b	   2
a previous branch.	1
a vector. If		1
a vector. 6.		1
a program, especially	1
a similar utility	1
a risk that		1
a risk factor		1
a garbage collector	1
a header file		1
a future version	1
a newer instruction	1
a newer version		1
a sequence of		2
a sequence where	1
a significant effect	1
a significant amount	1
a significant contribution	1
a linear function		2
a linear array			3
a linear list			1
a linear array.			1
a linear search,		1
a penalty for			1
a module by			1
a 'this' pointer		1
a 'this' pointer.		1
a problem. If			1
a row to   1
a matter of	8
a series of	6
a waste of	6
a map file	1
a 256-bit vector	1
a device driver.	1
a non-static member	2
a low instruction	1
a low positive		1
a low priority		1
a default constructor	1
a hard disk		4
a typical set		1
a typical software	1
a typical application	1
a typical degree	1
a usability problem	1
a pure function		1
a pure function.	1
a derived class		3
a derived class,	1
a fully compiled	1
a standardized manner.	1
a parent class 2
a false model  1
a false vendor 1
a temporary object	1
a temporary array	1
a temporary variable	1
a temporary register	1
a procedure linkage	3
a PC and    1
a PC platform.	1
a frequent cause	1
a frequent source	1
a prediction or		1
a polymorphic function	1
a polymorphic class	1
a polymorphic member	1
a polymorphic function.	1
a register. The		1
a register. If		1
a kind of   2
a graphical user	3
a lower instruction	1
a lower priority	1
a misprediction every	1
a misprediction penalty	1
a just-in-time compiler	1
a try block.   1
a background process	1
a PLT for    1
a heavy graphics	1
a hash table		1
a hash map		1
a hash map.		1
a profiling (see	1
a DLL can   1
a DLL with  1
a DLL goes  1
a branch. If	1
a GOT for 1
a GOT entry.	1
a fixed size	1
a fixed address	1
a fixed breakpoint	1
a non-sequential order	1
a non-sequential order.	3
a non-sequential manner	1
a non-sequential manner.	1
a jump from	 1
a random manner. 1
a measure that	 1
a poorly predictable	1
a vector, uses		1
a suitable set		1
a suitable choice	1
a suitable pivot	1
a suitable duration.	1
a serious legal		2
a far data		1
a collection of		1
a composite type	3
a composite object,	1
a highly optimized	1
a debug version		2
a factor of		1
a factor 4		1
a reliable source	1
a reliable decision.	1
a thousand cache	1
a thousand times	2
a thousand numbers.	1
a compile-time polymorphism,	1
a constant. The			1
a complex framework		1
a dispatched function		1
a normal array.			1
a convenient way		1
a portability issue		1
a reference, or			1
a self-relative address.	1
a Core i7	1
a debugger and	1
a ^ b	   1
a ^ 1;	   1
a ^ -1	   1
a ^ ~a	   1
a base class	1
a base address	1
a leaf function	2
a leaf function.	1
a six years		1
a structure. The	1
a structure. For	1
a profiler. A		1
a profiler. It		1
a loss of   1
a remote database,	1
a considerable amount	1
a considerable improvement	1
a considerable job,		1
a considerable debate		1
a third thread 1
a multidimensional array	1
a multidimensional structure	1
a strict formalism 1
a portable way	   1
a computer. The	   1
a computer. Security	1
a list, rolled		1
a realistic set		2
a realistic number	1
a console mode		2
a hundred or		1
a hundred clock		1
a hundred times		1
a hundred times.	1
a loop-carried dependency	1
a compromise between		2
a nonzero floating		1
a command or			1
a command line			2
a relatively primitive		1
a latency which			1
a larger memory			1
a project built			1
a valid address.		1
a valid 63			1
a loop-invariant code		1
a loop-invariant expression	1
a key or	 1
a key press	 1
a bit-mask: __m128i	2
a type. The 1
a place indicated	1
a bad dilemma.		1
a mouse move		1
a non-inlined copy	3
a round function	1
a pipeline where	1
a Taylor series.	1
a dispatcher. The	1
a class, structure	1
a queue as		1
a protected operating	2
a dramatic degradation	1
a contained object	1
a bottleneck than	1
a directive for		1
a scarce resource	1
a scarce resource.	1
a scarce resource,	1
a suboptimal way	1
a suboptimal way.	2
a float, but 1
a detailed overview	1
a dedicated test	1
a dedicated microprocessor	2
a dedicated physics		1
a breakpoint in			1
a unit-test without		1
a virus scanner			1
a pointer, a			1
a pointer, but			1
a soft processor		2
a hyperthreading processor	1
a reasonable upper		1
a reasonable estimate		1
a well-defined interface	2
a well-defined functionality	1
a wrong type.  1
a combination of	1
a hidden pointer.	1
a speed-critical program	1
a high-level language		1
a multithreaded program,	1
a parameter, so	1
a circular buffer	3
a register, not		1
a natural order		1
a natural ordering?	1
a sorted list		3
a negligible contribution	1
a well-structured C++		1
a micro-op cache  1
a CPU- specific	  1
a backup copy	  1
a nearby address  1
a pivot search:	  1
a float. (Both	  1
a built-in test	  1
a complete redesign	1
a variable, for		1
a variable, pointer	1
a viable solution	1
a viable compromise	1
a debugger. You		1
a debugger. However,	1
a computationally intensive	1
a subexpression. For		1
a chip that	 1
a biased binary	 1
a minor error	 1
a non-member function,	1
a decimal point		1
a PC. Nevertheless,	1
a PC. Similarly,	1
a hint and		1
a case: //		1
a GOT. Another		1
a string. The		1
a 90% chance		1
a proxy for		1
a floppy disk.		1
a variable-size array	1
a buffer. It	1
a name. #define	1
a third-party graphics	1
a null reference	1
a null reference.	1
a constructor, an	1
a physics processing	1
a re- usable		1
a programmable logic	1
a time-consumer even	1
a high-priority thread	1
a FIFO queue	1
a FIFO manner?	1
a discussion. 7.33	1
a cheap compiler	1
a division, which	1
a first-in-last-out fashion.	1
a coprocessor might 1
a systematic and    1
a systematic manner 1
a ^a =	     2
a release version	2
a distinction between	1
a symbolic link		1
a parenthesis around	2
a bitfield is 1
a bitfield by 1
a slight degradation	1
a generic version	1
a word processor	1
a matrix. For		1
a universal algorithm	1
a non-virtual member	1
a niche in    1
a "move constructor"	1
a typo in		1
a user-defined function	1
a union: //    1
a macro, but   1
a macro. If    1
a precious resource	1
a not-too-big upper	1
a basic understanding	1
a "function". Multiple	1
a plug-in to  1
a hand- written	1
a low-priority thread	1
a monotonically increasing	1
a top-of-stack index.		1
a button or    1
a minimal difference	1
a blend instruction	1
a wealth of		1
a zigzag course		1
a constructor. A	1
a number). Different	1
a sensible balance	1
a compelling security	1
a vector). The		1
a formalism. The	1
a narrow range		1
a multitasking environment,	1
a valuable source		1
a learning process		1
a 50-50 chance			1
a double: //			1
a First-In-Last- Out		1
a non-const reference,		1
a key? If   1
a password. The	1
a year or   1
a lineage of	1
a server in	1
a staircase function	1
a 2'nd order		1
a conditional move,	1
a polynomial. Scheduling	1
a ready-made profiler.		1
a discrete icon			1
a disassembly, probably		1
a tag on       1
a balanced mix 1
a First-In-First- Out	1
a fixed-size array	1
a lookup-table static.	1
a DLL. Another 1
a request for  1
a #define, const	1
a plain old		1
a genuine compiler	1
a thread-like scheduling	1
a non-recursing template	1
a thorough analysis		1
a zero-terminated ASCII		1
a polymorphous class?		1
a technological point		1
a bottleneck. Organize		1
a temp1 and   1
a XOR b	1
a stand alone	1
a zip file	1
a reply about	1
a graceful way.	1
a FILO manner?	1
a driver involves	1
a Gauss elimination.	1
a funda- mentally	1
a column-wise manner	1
a website. 5  1
a scalar (Scalar	1
a higher-priority thread	1
a destructor. A	  1
a bit-mask which  1
a pre-calculated table.	1
a printer or	 1
a union, as	 1
a square. //	 1
a strategy for	 1
a million times	 1
a minute if	 1
a textbook on	 1
a level-3 cache. 1
a unique key.	 1
a couple of	 1
a template: //	 1
a ^0 =	    1
a menu click	1
a subset, giving	1
a BSF (bit		1
a queue. It		1
a constant: Unsigned	1
a quadratic matrix,	1
of the function		6
of the code		25
of the compiler		2
of the time		10
of the memory		5
of the data		6
of the program		20
of the vector		2
of the different	1
of the same		13
of the functions	2
of the CPU		5
of the instruction	2
of the loop		5
of the integer		2
of the class		3
of the floating		2
of the compilers	4
of the most		7
of the size		1
of the Intel		4
of the pointer		3
of the library		3
of the two		4
of the object		3
of the number		1
of the 64-bit		1
of the C++		4
of the array		7
of the clock		2
of the value		2
of the objects		1
of the variable		2
of the table		2
of the performance	1
of the software		2
of the 32-bit		1
of the member		3
of the way		1
of the elements		1
of the called		1
of the address		1
of the 4		1
of the critical		9
of the operating	4
of the first		3
of the register		1
of the optimization	1
of the code.		7
of the time.		3
of the template		2
of the new		2
of the user		1
of the following	3
of the 32		1
of the bits		1
of the type		1
of the &		1
of the simple		1
of the processors	1
of the Gnu		2
of the function.	5
of the extra		2
of the large		1
of the while		1
of the execution	1
of the compiled		1
of the best		3
of the virtual		4
of the exception	1
of the power		1
of the matrix		3
of the AVX		2
of the four		2
of the problem		1
of the few		1
of the structure	2
of the standard		1
of the memory.		1
of the shared		1
of the program.		7
of the above		1
of the problems		1
of the next		1
of the multiplication	1
of the application	2
of the expression	1
of the Boolean		3
of the needs		1
of the Microsoft	1
of the parameter	1
of the source		1
of the induction	1
of the string		1
of the programmer	6
of the keyword		1
of the end		1
of the examples		1
of the difference	1
of the data.		1
of the graphics		1
of the framework	1
of the second		1
of the x86		1
of the advantages	3
of the storage		1
of the old		1
of the function,	1
of the operands		3
of the innermost	1
of the compiler.	1
of the advanced		1
of the core		1
of the main		1
of the loop.		2
of the installation	1
of the cases.		1
of the STL		3
of the size.		1
of the desired		1
of the whole		2
of the code,		4
of the fact		1
of the position-independent	1
of the level-1			1
of the resources.		1
of the task			1
of the costs			1
of the inlined			1
of the class.			3
of the preceding		5
of the exponent			1
of the possibility		1
of the maximum			1
of the library.			3
of the final			3
of the variable.		1
of the time,			1
of the total			1
of the child			1
of the counters			1
of the stack.			1
of the previous			1
of the program,			3
of the header			1
of the sequence			1
of the beginning		2
of the current			1
of the problem.			1
of the features			1
of the latter			1
of the default			1
of the derived			2
of the factorial		1
of the OpenMP			1
of the parent			1
of the memcpy			1
of the polymorphic		1
of the heavy			1
of the arrays.			2
of the branch.			1
of the GOT			1
of the array.			1
of the software.		1
of the object,			1
of the memory,			1
of the absolute			1
of the largest			1
of the .NET			1
of the base			1
of the result.			1
of the increment		1
of the advice			2
of the pitfalls			1
of the present			1
of the strlen			1
of the divisor			2
of the drawbacks		1
of the lrint			1
of the user's			1
of the considerations		1
of the techniques		1
of the advices			1
of the residual			2
of the specified		1
of the micro-op			1
of the object's			2
of the const_cast		1
of the executable.		1
of the comments			1
of the question			1
of the array,			1
of the alignment.		1
of the time-consumers		1
of the fraction.		2
of the trivial			1
of the subroutine		1
of the factorials,		1
of the Xnu			1
of the usual			1
of the programmers'		1
of the weekdays.		1
of the original,		1
of the user-written		1
of the iterator			1
of the kind:			1
of a and			3
of a function			4
of a code			1
of a compiler			1
of a will			1
of a memory			1
of a data			1
of a program			10
of a vector			1
of a different			1
of a loop			6
of a cache			1
of a class			6
of a floating			3
of a double			1
of a pointer			1
of a 64-bit			2
of a clock			3
of a variable			4
of a very			2
of a long			1
of a 32-bit			1
of a critical			2
of a template			1
of a new			2
of a simple			1
of a function.			1
of a ;				1
of a big			2
of a specific			2
of a virtual			1
of a matrix			2
of a list			1
of a store			1
of a copy			1
of a shared			1
of a program.			4
of a particular			1
of a signed			2
of a parameter			1
of a linked			2
of a piece			1
of a change			1
of a program,			1
of a row			1
of a hard			1
of a derived			2
of a parent			2
of a temporary			1
of a polymorphic		2
of a graphical			2
of a vector,			1
of a suitable			1
of a composite			2
of a structure.			1
of a list,			1
of a relatively			1
of a Taylor			1
of a class,			1
of a dedicated			1
of a variable,			1
of a debugger.			1
of a string.			1
of a third-party		1
of a re-			1
of a bitfield			1
of a macro.			1
of a "function".		1
of a double:			1
of that branch			1
of it (&ArraySize)		1
of function libraries		2
of function pointers		2
of function calls		2
of function inlining		2
of function calls.		1
of function libraries........................................................................................	1
of code is  4
of code to  1
of code and 4
of code in  3
of code that	3
of code can	1
of code you	1
of code then	1
of code into	1
of code compiled	1
of code gives		1
of code size.		1
of code execute		1
of code once		1
of code optimization",	1
of an int		1
of an integer		2
of an object		1
of an array		4
of an unsigned		2
of an error		1
of an execution		1
of an exception		2
of an optimized		1
of an intermediate	1
of an inlined		1
of an overloaded	1
of an exception.	2
of an update,		1
of an error;		1
of compiler may		1
of compiler There	1
of compiler options	1
of compiler ....................................................................................................	1
of compiler options.......................................................................................		1
of x is	    1
of x The    1
of x for    1
of x by	    1
of x must   1
of this is  1
of this function	2
of this by		1
of this bit		1
of this method		1
of this solution	1
of this section		1
of this fact		1
of this alignment	1
of this problem.	1
of this polynomial	1
of this method.		1
of this manual.		2
of this option.		1
of this bookkeeping	1
of this manual,		1
of this capability:	1
of time and		1
of time in		1
of time for		1
of time so		1
of time both		1
of time cleaning	1
of when they		1
of when type-casting	1
of A is	3
of A and	1
of memory to	1
of memory and	1
of memory for	2
of memory that	1
of memory or	1
of memory with	1
of memory will	1
of memory takes	1
of memory called	1
of memory inside	1
of memory addresses	1
of memory used.		1
of memory space		1
of memory needed	1
of memory required	1
of memory blocks,	1
of memory leaks		1
of memory blocks.	1
of data in		1
of data that		1
of data A		1
of data structures	1
of data members.	1
of data files.		1
of data ......................................................................................................	1
of data cache,													1
of data manipulation												1
of data shuffling,												1
of data (low													1
of data decomposition,												1
of data elements,												1
of program or													1
of program code													1
of program performance												1
of program efficiency												1
of program flow.												1
of vector register												1
of vector registers												1
of vector operations												1
of vector math													1
of vector operations,												1
of different function												1
of different integer												1
of different compilers												1
of different size												1
of different C++												3
of different type												1
of different intrinsic												1
of different types												4
of different sizes												2
of different algorithms												1
of different lengths												1
of different targets												1
of different compilers.............................................................................		1
of functions in													1
of functions that												1
of functions with												1
of functions A													1
of only half 1
of CPU that  1
of CPU dispatching	1
of CPU time,		1
of CPU cores.		1
of CPU development,	1
of other optimizations	1
of other tasks		1
of instruction latencies,	1
of instruction timing,		1
of loop ;      3
of loop iterations	1
of which code		1
of which functions	1
of which one		1
of which method		1
of which processor	2
of which optimizations	1
of all the		1
of all data		1
of all but		1
of all variables.	1
of all cleanup		1
of one iteration	2
of cache for		1
of cache space		2
of cache lines		1
of cache space.		2
of cache misses		2
of cache organization	1
of cache space,		1
of cache evictions	1
of integer register	1
of integer operations.	1
of class C1,		1
of floating point	9
of each function	1
of each vector		2
of each integer		1
of each object		2
of each array		2
of each version		1
of each table		1
of each run		1
of each string		1
of each row		1
of each factor		1
of each step		1
of each element,	2
of each method,		1
of example container	1
of example 15.1b	1
of example 12.4b	1
of most library		1
of using the		4
of using a		4
of using an		1
of using static		2
of using pointers	2
of using dynamic	1
of using exception	1
of using references	1
of using classes.	1
of using bitwise	1
of using smart		1
of using powers		2
of using ready		1
of Intel vector		1
of Intel C++		1
of Intel CPUs		1
of Intel microprocessors	1
of b is	 2
of b will	1
of b into	1
of library functions	1
of i to	   2
of i in	   1
of i will  1
of i which 2
of i into  1
of i must  1
of i ;	   1
of float or	1
of two different	1
of two double		1
of two induction	1
of two double.		1
of object files		1
of object p		1
of object oriented	3
of object pointed	1
of static and		1
of static data		1
of static linking	1
of static libraries.	1
of 64-bit integer	1
of 64-bit Windows	1
of 64-bit integers.	1
of 64-bit software,	1
of C++ and		3
of C++ but		1
of C++ should		1
of C++ compilers	1
of C++ projects		1
of C++ relates		1
of such container	1
of such contentions	1
of such checks		1
of efficient container	1
of array elements	1
of array ;		1
of array element	1
of array bounds		1
of array elements.	1
of possible pointer	1
of possible overflow	1
of possible inputs	1
of possible inputs.	1
of possible remedies	1
of clock pulses		1
of objects is		4
of objects in		2
of objects can		1
of objects they		1
of variable size	1
of variable storage	2
of variable size.	1
of variable storage.............................................................................	1
of any function												1
of any size												1
of some of												1
of some long												1
of some help												1
of variables can											1
of return prediction).											1
of 2 is	  1
of 2 and  1
of 2 in	  2
of 2 can  1
of 2 //	  2
of 2 or	  1
of 2 if	  6
of 2 by	  1
of 2 when 1
of 2 then 3
of 2 double	1
of 2 return	1
of 2 template	1
of 2 does	2
of 2 Integer	1
of 2 (See	1
of 2 applies	1
of 2 (i.e.	1
of table lookup	1
of performance on	1
of performance has	1
of performance monitoring	1
of software that		1
of software can			1
of software with		1
of software into		1
of software programmers		1
of software specifies		1
of software development,	1
of software develop-		1
of order or 1
of order execution	2
of 32-bit integers	1
of branch that		1
of branch prediction.	2
of member pointers	1
of elements is		3
of elements to		1
of elements in		8
of elements per		3
of elements Total	2
of elements Size	1
of const double		1
of 4 floats		2
of call and		1
of 8 -	1
of 8 bits	1
of 8 bytes	1
of 8 kb		1
of operating system	1
of operating system.........................................................................................	1
of unsigned integers												1
of register is													1
of register stack												1
of register variables.												1
of register temp												1
of register renaming												1
of 64 bits  2
of 64 bytes.	1
of optimization is	2
of optimization can	1
of optimization by	1
of how to	6
of how compilers	2
of code. The		1
of code. Example:	1
of code. Each		1
of code. Furthermore,	1
of time. The		1
of time. A		1
of time. You		1
of template parameters.	1
of registers is		2
of registers has	1
of registers used.	1
of pointers to		3
of pointers may		1
of pointers because	1
of test data		2
of test data.		2
of user interface	3
of user input		1
of user interfaces	1
of these functions	1
of these instruction	2
of these cache		1
of these compilers	1
of these two		2
of these also		1
of these methods	2
of these directives	1
of these conditions	1
of these classes.	1
of these purposes.	1
of these manuals	1
of these guidelines	1
of these obstacles	1
of these categories:	1
of 16 bits		1
of 16 bytes.		1
of system code.		1
of system programming,	1
of 32 bits		1
of programming will	1
of programming language	4
of programming languages	1
of programming languages,	1
of programming style.		4
of programming experience	1
of dynamic memory		5
of dynamic allocation		1
of dynamic linking		1
of bits in 1
of operations in	1
of operations can	1
of type short 1
of type T     1
of type int.  1
of short vector	1
of simple types	1
of instructions for	1
of processors is	1
of processors that	2
of processors on	1
of available registers	1
of error is  1
of error known	1
of error reporting.	1
of making the		4
of making two		1
of making software	1
of making sure		2
of times to		1
of times each		1
of times before		1
of times CriticalFunction	1
of stack unwinding		2
of its time			3
of its members			1
of its binary			1
of its child			1
of its arguments.		1
of its simplicity.		1
of CPUs is			1
of CPUs such			1
of CPUs increased		1
of CPUs unequally		1
of extra instructions		1
of extra resources.		1
of assembly language		1
of large memory			1
of large arrays			1
of arrays and			1
of arrays in			1
of arrays that			1
of arrays with			1
of work into			1
of calls to			1
of calculations then		1
of calculations without		1
of calculations forms		1
of execution speed		2
of processor models		2
of bytes to  1
of big memory	1
of threads is	1
of threads with	1
of necessary communication	1
of element number		1
of specific CPU			1
of specific processor		1
of virtual function		1
of virtual functions.		1
of several drivers,		1
of common string		1
of exception handling		1
of allocated resources.		1
of small microcontrollers:	1
of overflow is			1
of overflow and			2
of overflow Integer		1
of integers to			1
of integers and			1
of integers with		1
of good development		1
of Linux and			1
of classes and			1
of precision for		1
of precision on			1
of four parameters		1
of four (or			1
of four floats			1
of four float.			1
of four float's			1
of parameters then		1
of known type,			1
of container classes		2
of eight 16-bit			2
of whether you			1
of whether they			1
of list plus			1
of structure and		1
of structure or			2
of doing the 1
of doing floating	2
of doing type		1
of doing things		1
of doing whole		1
of every intermediate	1
of every version.	1
of standard C,		2
of hardware platform	4
of optimizing the	1
of optimizing ...............................................................................................	1
of optimizing University											1
of memory. See													1
of memory. These												1
of memory. One													1
of information about												1
of intermediate code												1
of both parent	1
of programs should	1
of problems you		1
of space on 1
of microprocessor The	1
of microprocessor ...........................................................................................	1
of branches and	  2
of branches that  1
of branches every 1
of typically 30	  1
of complicated algorithms	1
of handling errors		1
of handling cleanup		1
of dependency chains		1
of their time 1
of their execution	1
of their 23		1
of their superior	1
of Boolean operands	1
of Boolean operands.	1
of Boolean algebra,	1
of 256 Kbytes		1
of intrinsic vectors	1
of signed integers	1
of development are	1
of mathematical functions	1
of mathematical purity.		2
of separate layers		1
of #include directives		1
of #include directives.		1
of various instruction		1
of zero within			1
of parameter transfer		3
of induction variables		1
of n being   1
of n floats: 1
of string classes	1
of end user's		1
of && is		1
of data. The		3
of data. This		2
of data. A		1
of data. Use		1
of runtime DLL's	1
of || is   1
of expressions and	1
of expressions where	1
of longer response	1
of optimizations is	1
of optimizations in	1
of graphics objects	1
of graphics cards,	1
of public functions	1
of Intel, AMD		9
of microprocessors are	1
of microprocessors from	1
of platform is	   1
of your software.  1
of bigger vector   1
of << and 1
of binary data	1
of storage is	1
of storage space.	1
of 10 -	   1
of 10 double	2
of CPUs. The	1
of CPUs. These	1
of a[i] and	1
of advanced development	1
of advanced mathematical	1
of advanced features		1
of points is			1
of range is			1
of range and			1
of range }			1
of range (see			1
of range printf(Greek[n]);	1
of modules or			1
of smaller sizes		1
of things that			1
of things you			1
of main memory.			1
of my experiment		1
of errors in			2
of unused bytes			2
of columns a			1
of columns in			3
of dynamically linked		1
of consecutive variables.	1
of modern microprocessors	2
of modern CPUs,			2
of modern software,		1
of 2. The 1
of 2. Example:	2
of 2. Using	1
of 2. Objects	1
of 2. Contentions	1
of variables. Move	1
of lines is   1
of position-independent code.	1
of out-of-order execution.	1
of out-of-order execution,	1
of resources. For		1
of resources. Consider		1
of task switching.		1
of costs to			1
of S1 in 1
of S1 aligned	1
of math functions	1
of temp before		1
of inlined functions	1
of constants is		1
of constants we		1
of bool in   1
of special vector	1
of algorithm is		1
of sum depends		1
of Linux, BSD		1
of registers. This	1
of registers. There	1
of alignment problems.	1
of compatibility with	3
of compatibility problems	2
of macro expansions.		1
of 100 floats			1
of 100 numbers:			1
of 100 doubles:			1
of reduced performance.		1
of operations. A		1
of time, it    1
of copying it  1
of copying blocks	1
of optimization. 14	1
of containers is 1
of disk caching, 1
of unknown brand 1
of counters in	 1
of 2, so    1
of full optimization.	1
of N with		1
of N into		1
of N template		1
of RAM memory		1
of RAM memory.		2
of rows and		2
of compiling multiple	1
of compiling without	1
of precision. Let's	1
of algebraic reduction.	1
of structures and	1
of structures (without	1
of logical processors	1
of logical processors.	1
of heap management	1
of smart pointers	1
of nontemporal write	1
of bounds checking	1
of resource problems	1
of cores in 1
of cores or 1
of cores will	1
of parallel execution.	1
of calculating the	1
of ebx that    1
of e.g. four   1
of sizes other 1
of sizes 1,    1
of list[i] is  1
of statements that	1
of course a   1
of course be  2
of course make	1
of course also	1
of course inefficient.	1
of course far		1
of course system-specific.	1
of templates where		1
of templates makes		1
of CriticalFunction in		1
of seconds and	    1
of CPU. These	    1
of f is	1
of f cout	1
of F1 without	1
of setting a	1
of added information	1
of approximately seven	1
of order. See	 1
of order. Long	 1
of situations where	1
of 256-bit size		1
of finding a		1
of purposes such	1
of usability problems	1
of overflow. The	1
of overflow. Table	1
of storage. See		1
of addition, subtraction,	1
of everything else.		2
of (or in     1
of parent and 2
of parent class	1
of temporary objects	1
of procedure 4		1
of iterations is	1
of background processes	1
of CPUs, different	1
of additions and	2
of j as	     1
of fastest possible	1
of devices and		1
of branch. After	1
of zero. A 1
of multiplying by	1
of software. For	1
of jump targets.	1
of vectors. 12.10	1
of lazy loading		1
of lazy binding		1
of 1, 2,		1
of vector, such		1
of vector, bits		2
of algebra in		1
of algebra are		1
of suitable containers	1
of Java and 1
of Java are 1
of optimizations. The	1
of exceptions a	  1
of machine instructions	1
of changes in		1
of storing data		1
of storing strings	1
of 2: //   1
of 2: template	1
of composite type	1
of bits. The 1
of bits. This	1
of speed. Assume	1
of thousand numbers	1
of Intel's Math		1
of course, and		1
of course, that		1
of course, if		1
of course, because	1
of course, but		1
of scope or		1
of Func with		1
of Func ;a		1
of c1 before		1
of portability to	1
of comparing signed	1
of computers and	1
of B before  1
of five manuals	1
of five manuals.	1
of five manuals:	1
of poor CPU		1
of self-relative references	1
of truncation and		1
of powerful development		1
of C++, directly		1
of C++, Pascal			1
of mixed sizes.			1
of branches. Manual		1
of communication with		1
of inheritance is		1
of backwards compatible		1
of backwards compatibility	1
of memset and			1
of context switches		2
of reducing the			1
of development, testing		1
of abc is	2
of abc can	1
of 250 ms.	1
of computing resources.	1
of pointers, by		1
of physical processors	1
of nonzero floating	1
of unacceptably long	1
of n! is	1
of Basic is	1
of Basic was	1
of valid addresses,	1
of CPU-intensive software	1
of CPU-intensive programs	1
of manuals. 7.1	 1
of 18 software	 1
of two. In	 1
of ebx. The	 1
of ebx. Only	 1
of m and	 1
of bad CPU	 1
of resources, and	1
of declaring an		1
of defining integer	1
of precision, as	1
of precision, especially	1
of u.f We     1
of overflow, such	1
of modifications to	1
of efficiency. The	1
of efficiency. Using	1
of transferring the	1
of structured and	1
of structured software	1
of going either		1
of float, double	1
of alloca over		1
of unit-testing It	1
of unit-testing ......................................................................................	1
of sequential instructions,										1
of error. The 1
of abstraction is	1
of abstraction in	1
of abstraction which	1
of code). If   1
of aligning dynamically	1
of numbers: //		1
of calculations: //	1
of calculations, where	1
of xxn rather	 1
of int. A	 1
of position- independent	1
of C++. Yet, 1
of A, B	1
of text strings	1
of Pascal used	1
of overflow: //	1
of coefficients is	1
of longjmp if	1
of competing brands	1
of efficiency, platform	1
of bookkeeping in	1
of technical problems.	1
of organizing the	1
of measuring performance	1
of (0,0,0,0,0,0,0,0) __m128i	2
of (0,0,0,0,0,0,0,0) Is16vec8	1
of microprocessor. These	1
of returning a	   1
of security. b	   1
of (2n /     1
of vectors, as	1
of truncation. This	1
of double, then		1
of mispredictions (see	1
of allocations is 1
of n. The      1
of interpreting the	2
of jumping around	1
of x. This 1
of (2,2,2,2,2,2,2,2) __m128i	2
of (2,2,2,2,2,2,2,2) Is16vec8	1
of accumulators for  1
of interpretation or 1
of expressions, but  1
of jobs. For	1
of c+b will	1
of CriticalFunction. You	1
of keeping a	     1
of keeping data	     1
of dangers to	     1
of semaphores, mutexes,	1
of course. A   1
of course. It  1
of it, for 1
of range"; }	1
of range"; 134	1
of range. The	1
of range. This	1
of programming. The	1
of programming. 13.3	1
of starting and	1
of underflow. The	1
of predefined vector	1
of ArraySize by		1
of experiments on	1
of irrelevant software	1
of cross-platform portability.	1
of iterations. The		1
of Numerically Intensive	2
of sharing the 1
of digital building	1
of received data	1
of matrix[j][0] is	1
of squares: const	1
of sources. For		1
of algebra, we		1
of factorials: static	1
of factorials: const	1
of coprocessors is	1
of removing superfluous	1
of relieving a		1
of b+c will  1
of convenience -	1
of B. In       1
of sets). Here,	1
of strange and	1
of sets) (line	1
of frustration and	1
of algebra. For		1
of cc[i]+2 is		1
of titles. Literature	1
of 64. Each		1
of fine-tuning, testing,	1
of Mathcad (v.	1
of simultaneous lookups	1
of view. This	1
of 0x800 apart.	1
of switching to	1
of i&15 is   1
of if. This  1
of solving the	1
of (a+b). This	1
of underflow: //	1
of it). This  1
of randomness in	1
of &list[100] is	1
of it) load   1
of doubles by 1
of verifying, debugging	1
of downloaded program	1
of structures: //	1
of multithreading. 7.30	1
of 1/n! 1.,	   1
of N: #define	   1
of profiling. When 1
of modularity. For 1
of yesterday's big 1
of identifier names.	1
of attack for 1
of security, but	1
of matrices. An		1
of Denmark. Copyright	1
of temp. The		1
of ADC (add		1
of synchronizing and	1
of habit, it	 1
of CPU-time in	 1
of DLLs, configuration	1
of redesign. Some	1
of -fpic. This		1
of research on		1
of rows/columns in	1
of inte- ger	1
of sum. The	1
of managing a	1
of people. I	1
of jumps, calls	1
of RAM, a 1
of data", where	1
of rounding, but	1
of losing precision.	1
of pending instructions	1
of usability. This	1
of ways). If  1
of range"); or	1
of activating the	1
of occupying a		1
to the function		5
to the code		2
to the compiler		1
to the time		2
to the different	1
to the same		9
to the CPU		1
to the instruction	3
to the point		1
to the integer		1
to the class		1
to the most		2
to the Intel		1
to the library		1
to the object		1
to the number		1
to the value		1
to the called		1
to the address		3
to the critical		2
to the operating	2
to the first		1
to the new		2
to the user		3
to the constant		1
to the stack		3
to the Gnu		2
to the function.	2
to the calculations	1
to the best		1
to the thread		1
to the exception	1
to the power		3
to the AVX		1
to the standard		2
to the sign		1
to the copy		1
to the allocation	1
to the next		2
to the dispatcher	1
to the programmer	1
to the end		4
to the calling		1
to the second		1
to the x86		1
to the old		1
to the appropriate	5
to the desired		5
to the inlined		2
to the preceding	2
to the right		4
to the offset		1
to the object.		2
to the so-called	1
to the total		3
to the disk		1
to the situation	1
to the previous		1
to the vector.		1
to the length		1
to the beginning	4
to the current		1
to the user.		2
to the hard		1
to the required		1
to the general		1
to the table.		1
to the rules		1
to the availability	1
to the structure.	1
to the profiler.	1
to the rest		1
to the console		1
to the modulo		1
to the dispatcher.	1
to the area		1
to the diagonal.	1
to the selected		1
to the parameter,	1
to the nearest		1
to the $B1$2		1
to the CPU-specific	1
to the first-in-last-out	1
to the container.		1
to the reader			1
to the tolerance		1
to the IEEE			1
to the truth			1
to the standards		1
to the next.			1
to the exponent:		1
to the design			1
to the device.			1
to is a				1
to is identical			1
to is deleted			1
to is known.			1
to a =				1
to a function			5
to a more			1
to a different			3
to a class			2
to a floating			1
to a pointer			6
to a float			1
to a static			1
to a clock			1
to a variable			3
to a table			1
to a branch			1
to a <				1
to a const			1
to a new			1
to a file			1
to a function.			1
to a specific			4
to a virtual			1
to a signed			1
to a better			1
to a longer			1
to a graphics			3
to a public			1
to a smaller			1
to a pointer.			1
to a global			1
to a limited			1
to a local			2
to a macro			1
to a usability			1
to a pure			1
to a derived			1
to a base			1
to a structure.			1
to a command			1
to a valid			1
to a dispatcher.		1
to a dramatic			1
to a contained			1
to a wrong			1
to a complete			1
to a non-member			1
to a floppy			1
to a matrix.			1
to a narrow			1
to a driver			1
to a printer			1
to and you			1
to be the			2
to be a				2
to be in			2
to be as			1
to be an			3
to be very			1
to be faster			1
to be stored			2
to be less			2
to be 0				2
to be available			1
to be compiled			1
to be done			2
to be calculated		1
to be able			3
to be put			1
to be too			2
to be transferred		4
to be read			1
to be aligned			1
to be higher			1
to be divisible			1
to be called.			1
to be predicted			1
to be loaded			2
to be limited			1
to be inlined			1
to be possible.			1
to be changed			1
to be true			1
to be initialized		1
to be scattered			1
to be mispredicted		2
to be false			1
to be converted			1
to be designed			1
to be fragmented		1
to be distributed		2
to be slower			2
to be aware			2
to be available,		1
to be equal			1
to be updated			1
to be expressed			1
to be cleaned			2
to be obsolete.			1
to be spaced			2
to be filled			1
to be stored.			1
to be inlined.			1
to be evicted			1
to be pure.			1
to be overwritten,		1
to be irrelevant		1
to be profitable		1
to be cached			1
to be deleted.			1
to be slower.			1
to be moved.			1
to be installed.		1
to be mispredicted,		1
to be restored			1
to be saved.			1
to be renewed.			1
to be platform-independent	1
to be reloaded			1
to be signed.			1
to be noticeable		1
to be resized			1
to be annoying.			1
to are constant.		1
to can be			2
to function names.		1
to by r	    1
to by p	    1
to code the 1
to an integer	1
to an object	2
to an array	2
to an address	1
to an intermediate	1
to an output		1
to an inlined		1
to an integer,		2
to an existing		1
to int in		1
to int x		1
to x 43			1
to have the		2
to have a		2
to have no		1
to have two		1
to have many		1
to have separate	1
to have just		1
to have constructors	1
to this the		2
to this number		1
to this manual		3
to this problem		3
to this argument	1
to use the		21
to use a		14
to use and		1
to use in		1
to use for		3
to use that		1
to use it		1
to use an		1
to use than		2
to use this		1
to use vector		4
to use float		1
to use multiple		1
to use static		1
to use 64-bit		1
to use 32-bit		1
to use dynamic		2
to use assembly		2
to use exception	1
to use inline		1
to use intrinsic	1
to use induction	1
to use string		1
to use later		1
to use depends		1
to use vectorized	1
to use it.		1
to use algebraic	1
to use hyperthreading	1
to use denormal		1
to use SafeArray:	1
to use try,		1
to memory without	1
to memory management	1
to at a	  1
to data in	1
to data through	1
to data within	1
to make the	21
to make a	25
to make and	1
to make it	2
to make code	1
to make this	1
to make more	1
to make different	1
to make one		1
to make floating	1
to make multiple	1
to make two		1
to make table		1
to make software	2
to make member		1
to make register	1
to make pointers	1
to make sure		18
to make overflow	2
to make container	1
to make support		1
to make shared		1
to make their		1
to make better		1
to make aligned		1
to make special		1
to make 16-bit		1
to make profiling	1
to make explicit	1
to make CPU-		1
to make thread-specific	1
to make log2		1
to make memory-hungry	1
to different dynamically	1
to different platforms		1
to different tasks.		1
to functions and		1
to CPU dispatching.		1
to other parts			1
to other platforms		2
to point to			1
to all of			1
to all class			1
to all allocated		1
to all local			1
to all instances		1
to all zeroes.			1
to one of			3
to one class			1
to one thread			1
to cache misses,		1
to integer can			1
to integer takes		1
to integer without		1
to integer conversion		1
to integer According		1
to set the 2
to set an  1
to set number	1
to set up	1
to set seconds	1
to class C1	1
to floating point	6
to floating point.	1
to floating point:	1
to each compiler	1
to each other		1
to each new		1
to each element		2
to each task		1
to do the		10
to do is		1
to do a			3
to do and		1
to do it		1
to do as		1
to do an		1
to do this		3
to do more		2
to do when		1
to do different		1
to do integer		1
to do multiple		1
to do two		2
to do such		1
to do any		1
to do some		1
to do so		4
to do operations	1
to do simple		1
to do calculations	1
to do optimizations	1
to do things		3
to do something		2
to do this:		1
to do this.		1
to do so.		3
to do manually.		1
to do interprocedural	1
to do experiments	1
to do immediately	1
to do so).		1
to do cross-module	1
to do searches		1
to example 15.1b	1
to using a 1
to using new	1
to using templates	1
to using templates.	2
to using namespaces.	1
to using hyperthreading.	1
to using hyperthreading,	1
to using inheritance.		1
to double In			1
to double before		1
to double precision		1
to b for  1
to b memcpy(b,	1
to i and	1
to float in	1
to float conversion	1
to float conversions	1
to multiple operating	1
to multiple inheritance	1
to static or		1
to 64-bit mode,		1
to such a 1
to such an	1
to efficient use	1
to array elements.	1
to many hard		1
to many users.		1
to any other		2
to any known		1
to some of		1
to some other		1
to some extra		1
to some positive	1
to return from		2
to return a+1;.		1
to 2 by	  1
to 2 Mbytes.	1
to very big	1
to software optimization.	1
to 32-bit integers,		1
to const definitions		1
to 4 clock			1
to call the			7
to call a			5
to call or			1
to unsigned in			1
to unsigned for			1
to unsigned if			1
to unsigned int			1
to first look			1
to first convert		1
to 64 bits.			1
to take a			1
to take more			1
to take into			1
to take branch			1
to take extra			1
to take advantage		2
to take longer			1
to take special			1
to take maximum			1
to take care			2
to optimization are		1
to optimization by		4
to optimization MS		2
to optimization are.		1
to test the	3
to test a	1
to test in	1
to test for	1
to test //	2
to test on	1
to test this	1
to test when	1
to test all	1
to test each	1
to test 16	1
to test several	1
to systems with	2
to user input	1
to these problems	1
to even allocate	1
to always use		1
to always true		1
to always behave	1
to access the		2
to access a		4
to access it		1
to access an		2
to access x		1
to access these		1
to 16 bytes		1
to 16 lines		1
to 32 bit		1
to 0 and		2
to 0 //			1
to type in		1
to & unless		1
to simple things	1
to simple actions	1
to error handling.	1
to stack memory		2
to stack memory.	1
to its variables	1
to its own		1
to its functions,	1
to its child		1
to assembly language	1
to ; store  1
to arrays of	1
to arrays that	1
to work in	1
to work for	1
to work with	1
to work on	2
to work best	1
to work around	1
to (see page	1
to execution time.	1
to avoid the 5
to avoid that	2
to avoid this	2
to avoid multiple	1
to avoid long		2
to avoid these		1
to avoid dynamic	2
to avoid running	2
to avoid conversions	1
to avoid this.		2
to avoid them.		1
to avoid modulo		1
to avoid hard-to-find	1
to speed up		2
to c =	 1
to single precision.	1
to virtual function	1
to virtual member	1
to compile a		1
to compile for		1
to compile with		2
to compile for.		1
to exception handling	1
to small devices,	1
to integers of		1
to integers use		1
to matrix a 1
to Linux in 1
to cause contentions	1
to cause seven		1
to cause overflow,	1
to four bits,		1
to another by		1
to another class.	1
to another platform.	1
to get a   2
to get as  1
to get an  1
to get x   1
to get more	1
to get used	1
to get library	1
to get access	1
to get reliable	1
to get reproducible	1
to get rid		1
to check the		1
to check for		4
to check that		1
to check if		3
to check whether	1
to support different	1
to list and		1
to run the		2
to run a		2
to run most		1
to run two		2
to calculate the	13
to calculate than	1
to calculate when	1
to calculate each	1
to calculate self-relative	1
to calculate (c+d)		1
to calculate pow(x,10)		1
to inline the			2
to inline a			1
to inline and			1
to inline this			1
to hardware interfaces		1
to add the  1
to add i    1
to add new  1
to add unused	1
to add statements	1
to store the		1
to store is		1
to store x		1
to store data		1
to store all		1
to store each		1
to store many		1
to store objects	1
to store intermediate	2
to store aligned	1
to store strings	1
to store unaligned	3
to store help		1
to store application-specific	1
to copy the			2
to copy that			1
to certain programming		1
to addresses divisible		2
to count how 1
to count certain	1
to program. Many	1
to write the		4
to write a		1
to write 2.0/3.0	1
to write _mm_add_epi16(a,b).	1
to write if(!a			1
to optimize the			2
to optimize a			1
to optimize for			1
to optimize code		1
to optimize this		2
to optimize register		1
to optimize away		2
to optimize across		1
to optimize anything		1
to optimize access,		1
to optimize caching.		1
to optimize anything,		1
to problems of			1
to replace the			4
to replace a			2
to replace arrays		1
to replace u[1]			1
to automatically prefetch	1
to see the	 3
to see if	 4
to see which	 2
to see how	 1
to see whether	 2
to see this.	 1
to their 32-bit	 1
to signed integer	1
to signed before	1
to signed integers	1
to put the		2
to put a		3
to put file		2
to put time-consuming	1
to put measurement	1
to put time-		1
to zero is		1
to zero and		1
to zero for		1
to zero that		1
to zero //		1
to zero by		1
to zero than		1
to zero at		1
to zero We		1
to zero whenever	1
to zero memset(a,	1
to Microsoft compilers.	1
to Microsoft Visual	1
to what the  1
to end of    1
to read the  1
to read and  2
to read from 2
to give the  2
to give each 1
to give higher	1
to look up	2
to actually doing	1
to load the 3
to load a   2
to load more	1
to load several	1
to load aligned	1
to load unaligned	3
to control the		2
to assume the		1
to assume that		2
to assume no		1
to dispatch by		1
to your programming	1
to improve the		1
to improve cache	1
to improve speed	1
to improve performance.	1
to improve efficiency.	1
to binary code		1
to know how		4
to know whether		1
to know what		1
to know about.		1
to generate a		2
to generate an		2
to generate many	1
to generate interrupts	1
to reduce the		1
to reduce this		1
to reduce example	1
to reduce complicated	1
to reduce various	1
to reduce (a*b*c)+(c*b*a)	1
to 10 means			1
to choose the			1
to choose a			1
to choose between		1
to choose between.		1
to link with			1
to just one			1
to a[i] More			1
to require modifications	1
to switch to			1
to start the			1
to start a			1
to start and			1
to start at			1
to start calculations		1
to start up,			1
to around 1980			1
to 5 by	  1
to 5 }	  1
to 5 times	1
to go the	1
to go one	1
to go away	1
to go deeper	1
to change the	1
to p is	  2
to become fragmented	1
to become fragmented.	1
to become invalid,	1
to become obsolete	1
to turn on		2
to turn off		6
to network resources,	1
to desired values	1
to code, you		1
to find the		6
to find and		1
to find out		2
to find hot		2
to find elsewhere.	1
to rely on		2
to produce the		1
to produce binary	1
to produce tables	1
to out-of-order execution	1
to platforms that		1
to temp even 1
to frame functions	1
to frame functions.	1
to prevent memory	1
to prevent cache	1
to prevent such		3
to prevent optimizing	1
to save time		1
to save some		1
to save time.		1
to save power.		1
to save recovery	1
to tell the		8
to tell a		1
to tell these		1
to tell explicitly	1
to repeat or		1
to unroll the		2
to unroll a		3
to exponent }		1
to it. This 1
to it. Therefore,	1
to optimization. Prefetching	1
to accessing an	 1
to divide the	 6
to divide i	 2
to mix the	 1
to mix different 1
to mix integer	 1
to mix floating	 1
to mix simple	 1
to mix signed	 1
to mix mathematical	1
to fit the		6
to fit specific		1
to predict the		1
to predict a		1
to predict with		1
to predict which	4
to predict whether	1
to predict correctly	1
to 128-bit XMM		1
to execute the		1
to execute then		2
to execute it.		1
to execute CriticalFunction	1
to execute slower		1
to execute _mm_empty()		1
to square by			1
to fail if			1
to convert b			1
to convert float		1
to convert unsigned		1
to handle the			2
to handle an			1
to handle only			1
to handle strings		1
to handle unknown		1
to insert the			1
to insert a			2
to insert an			1
to insert optimization		1
to consider which		1
to reading as			1
to enable the			3
to enable constant		1
to enable fast			1
to e.g. a 1
to keep the	2
to keep multiple	1
to keep pointers	1
to keep up		1
to keep their		1
to keep together	1
to keep track		1
to align its		1
to align large		1
to align dynamically	1
to align arrays.	1
to BSD systems.		1
to come from		1
to SSE4.1 and		1
to CriticalFunction in	1
to swap memory	    1
to swap two	    2
to modify the	    1
to modify a	    1
to F1 only	    1
to gain in	    1
to gain if	    1
to gain by	    2
to apply to.	    1
to allocate the	    1
to allocate a	    3
to allocate more    1
to allocate one	    1
to allocate variable-size	1
to metaprogramming would	1
to define function 1
to define 64-bit   1
to define your	   1
to define application-specific	1
to implement the		2
to implement a			3
to implement in			1
to implement this		1
to 256-bit registers		1
to contain all			1
to integers. It			1
to integers. 7.25		1
to help the  2
to transfer a	1
to transfer ownership	1
to multiply j		1
to share the		1
to default constructors,	1
to vectorize the		3
to vectorize code		1
to include the			1
to include a			1
to fully utilize		1
to care about			1
to memcpy rather		1
to lower case:			1
to try different		1
to account for			1
to heavy competition.		1
to general improvements		1
to zero. The			1
to zero. You			1
to zero. 14.3			1
to measure the			1
to measure //			1
to measure how			1
to measure exactly		1
to delete the			1
to delete it			1
to disk. Memory			1
to disk. Software		1
to disk. Provoke		1
to update the			1
to integer. The			1
to hold the 2
to hold only	1
to 120 ms	1
to eliminate common	1
to eliminate everything	1
to 127 will  1
to debug and 1
to vectorization. The	1
to do. The	  1
to do. This	  1
to do. It	  1
to remove the	  2
to remove all	  1
to remove unreferenced	1
to transpose the	1
to transpose a		2
to transpose and	2
to transpose matrix	1
to wait for  4
to break a   1
to break down	1
to increase the	2
to identify the	2
to identify a	1
to identify and	1
to identify performance	1
to identify individual	1
to call. I  1
to declare the	1
to declare it	1
to declare objects	1
to dispatched function	1
to dispatched version	1
to detect if  1
to normal afterwards.	1
to show how		1
to evaluate the		1
to evaluate a		1
to evaluate and		1
to evaluate b		1
to evaluate whether	1
to five or  1
to poor documentation	1
to prefetch data	1
to truncation and	1
to base a     1
to completely rule	1
to roll out   5
to anything it	1
to increment the	1
to increment an		1
to economize the	3
to economize resource	1
to seven times		1
to overcome the		2
to overcome this	1
to overcome these	1
to maintain. The	1
to maintain. If		1
to maintain. Any	1
to maintain. And	1
to fourteen register	1
to fourteen parameters	2
to 122 this 1
to remote databases	1
to memset and		1
to install a		2
to install automatic	1
to consume time		1
to consume more		1
to select all		1
to recover in		1
to recover from		4
to split the		1
to split up		1
to limit the		1
to follow the		1
to compromise on	1
to understand and	1
to understand when	1
to understand how	1
to specify the		1
to specify static	1
to compare the		1
to compare two		1
to compare absolute	1
to valid values		1
to CPU-intensive code.	1
to wrap the	 2
to wrap around,	 1
to sum1 from	 1
to 15.1c as	 1
to 15.1c would	 1
to 15.1c was	 1
to recommend that	1
to recommend any	1
to lead to   1
to place the 1
to overlap the	2
to obtain the	2
to ebx. The	1
to modulo calculations:	1
to round addresses	1
to protected mode	2
to distinguish between	2
to distinguish elements	1
to distinguish these	1
to clean up    2
to contained objects?	1
to unsigned. //		1
to sum2 from 1
to suboptimal code.	1
to uncached memory	1
to individual array	1
to begin calculating	1
to another. The		1
to another. These	1
to recognize VIA	1
to mirror the		1
to force the		1
to virus attacks	1
to alias upon		1
to well-tested functions,	1
to zero, by    1
to reload the  2
to reload *p   1
to 12. Higher  1
to optimization, it	1
to ignore overflow	1
to manipulate the	2
to study the  2
to 0x273F will	1
to 0x273F into	1
to 0x273F would	1
to int. Reinterpret	1
to nearest integer	1
to justify the		1
to justify such		1
to cover the		2
to focus the		1
to issue an		1
to solve this		2
to utilize the		2
to top of  1
to decide which	1
to security. There	1
to security. Standard	1
to decrement operators	1
to determine the	1
to determine if		1
to determine whether	1
to 3-dimensional geometry	1
to a. I		 1
to post-increment. There	1
to invest in	   1
to invest more	   1
to 1024 bits	   1
to override the	   1
to override public 1
to CriticalFunction. If	1
to exit the	     1
to emulate the	     1
to C1::f } 1
to worry about	1
to worry much	1
to 15. If	1
to develop and	2
to non-AVX code	1
to non-AVX code.	1
to -56 which		1
to assembly: ALIGN	2
to construct obscure	1
to 15.1c. We 1
to join all  1
to join them 1
to note that 1
to creating and	1
to reorder instructions	1
to windows, graphic	1
to pressing a		1
to date. A  1
to date. Mac	1
to test, maintain	1
to isolate the		1
to 12.1a. Enable	1
to use. I 1
to use, incompatible	1
to read. It		1
to read. If		1
to lock a		1
to load. A		1
to push and		1
to verify that		1
to draw the		1
to draw each		1
to 155 test.		1
to distribute function	1
to distribute all	1
to reserve the		1
to reserve resources	1
to 11.1b automatically,	1
to test. disable	1
to respond quickly	1
to provoke error	1
to interrupts and	1
to do, at     1
to organize the	1
to organize data	1
to log, and 1
to low-level optimizations.	1
to fix the   2
to keyboard and	1
to keyboard or	1
to obey any 1
to obey certain	1
to 99 read	1
to flip the	1
to me. You	1
to a[i+2] ;	1
to answer questions	1
to C1::Disp() or	1
to resume after		1
to zero: //		1
to seek information	1
to mind. In		1
to finish. 3.8		1
to NULL. There		1
to be. The		1
to x?" or		1
to re-use a		1
to +127. An		1
to relocate, but	1
to diagnose. It		1
to 15.1c). 16		1
to thank the		1
to trace with		1
to experience. Occasionally,	1
to _endthread() cleans		1
to fine- tune	1
to date): Microsoft	1
to pool all		1
to Eclipse when		1
to print out		1
to obtain, such		1
to come. Even		1
to weigh the		1
to truly represent	1
to express any		1
to restart the		1
to vectorize, or	1
to remember that	1
to translate these	1
to query certain	1
to compose a		1
to compensate for	1
to exchange data	1
to fetch the		1
to facilitate porting	1
to perform poorly	1
to T+6, and		1
to OMF format.		1
to calculate. If	1
to localize the		1
to optimize, and	1
to T+5, then 1
to reinvent the	1
to combine the	1
to pass a  1
to reinstall a	1
to 36. There 1
to temporarily lock	1
to advertise new	1
to realize that		1
to objects) are		1
to great lengths	1
to port to		1
to controversies over	1
to deallocate the	1
to catching hardware	1
to Func1, while		1
to receive new		1
to 12.8b automatically	1
to ignore, then		1
to consult the		1
to minimize the		1
to reflect this		1
to refresh the		1
to adhere to		1
to feed into		1
to 15.1c, but		1
to a*b*c*2. It		1
to x^0/0! //		1
to collect the		1
to fake an 1
to develop. It	1
to 15.1c? We	1
to relax floating	1
to Object1.Hello(), though	1
to 151 15.1c	    1
to vectorize. The   1
to multithreading that	1
to C0::f or	  1
to 100000000. When	1
to mimic the  1
to adapt to   1
and the function	2
and the code		3
and the compiler	2
and the time		2
and the memory		1
and the data		2
and the program		2
and the vector		1
and the other		2
and the loop		1
and the most		3
and the Intel		1
and the library		1
and the object		1
and the number		3
and the array		1
and the elements	1
and the critical	1
and the operating	6
and the template	1
and the user		1
and the system		1
and the type		1
and the Gnu		2
and the work		1
and the result		2
and the best		1
and the speed		1
and the matrix		1
and the calculation	2
and the four		1
and the dispatching	1
and the multiplication	1
and the application	1
and the caching		1
and the cost		1
and the runtime		1
and the second		1
and the AVX2		1
and the options		1
and the whole		1
and the level-2		1
and the local		1
and the destructor	2
and the possibility	1
and the amount		1
and the entire		1
and the SSE		1
and the header		1
and the fraction	1
and the subsequent	1
and the low		1
and the derived		1
and the Gnu,		1
and the Java		1
and the CPUID		1
and the throughput	1
and the availability	1
and the rest		1
and the Digital		1
and the "Intel		1
and the 49		1
and the corresponding	1
and the 512-bit		1
and the FAQ		1
and the transitions	1
and the loader.		1
and the post-increment	1
and the EXCLUSIVE	1
and the texts		1
and the destructor,	1
and the wires		1
and the resultant	1
and is not		1
and is used		1
and is called		1
and is available	1
and is compiled		1
and is therefore	1
and a floating		1
and a pointer		1
and a 64-bit		1
and a table		1
and a member		1
and a template		1
and a hardware		1
and a Windows,		1
and a slow		1
and a level-2		1
and a processing	1
and a waste		1
and a derived		1
and a GOT		1
and a third		1
and a well-defined	1
and a release		2
and a generic		1
and a basic		1
and a server		1
and to make		2
and to optimize		1
and to put		1
and to know		1
and to mix		1
and to Eclipse		1
and in this		1
and in most		1
and in some		2
and in 32-bit		1
and for code		1
and for more		1
and for information	1
and for fast		1
and for saving		1
and for minimizing	1
and that the		1
and that there		1
and that threads	1
and that measurements	1
and that computers	1
and are in		1
and are difficult	1
and are equally		1
and can be		1
and can calculate	1
and it is		1
and it can		4
and it may		2
and it will		2
and it makes		1
and it needs		2
and it prevents		1
and it avoids		1
and it fills		1
and it understands	1
and function libraries	2
and function pointers	1
and function calls	2
and function inlining	1
and if an    1
and if you   1
and by the   1
and by not   1
and by avoiding	1
and by changing	1
and on Intel	1
and code size	1
and code addresses.	1
and not not		1
and not negative	1
and not easily		1
and not __INTEL_COMPILER	1
and an error			1
and an FPGA			1
and an addition.		1
and compiler makers.		1
and may be   1
and may produce	1
and you can	3
and you may	1
and you cannot	2
and you want	6
and you unroll	1
and have a	1
and have implemented	1
and this will		2
and this pointer	1
and this value		1
and this error		1
and time consuming.	1
and use the		2
and use a		1
and use multiple	1
and use alternative	1
and more efficient	2
and more error		1
and more efficient.	1
and more difficult	1
and more important.	1
and more compact	1
and more complex,	1
and will have		1
and then use		2
and then call		1
and then calls		1
and then transferred	1
and then convert	1
and then think		1
and then B,		1
and then interpret	1
and then 0+1.23456	1
and then merge		1
and memory access	1
and data in		1
and data are		2
and data can		1
and data A		1
and data memory		1
and data cache		2
and data caching	1
and data structures	1
and data .........................................................................................	1
and data decomposition.											1
and vector operations											1
and vector processors											1
and make the												2
and make a												2
and make it												1
and make this												1
and make one												1
and make sure												2
and make parts												1
and make appropriate											1
and make measurements											1
and different user											1
and different sizes											1
and functions consume											1
and only the  1
and only if   1
and only one  1
and only one, 1
and only if,  1
and CPU hardware.	1
and other data		1
and other compilers	1
and other extra		1
and other compiled	1
and other big		1
and other common	1
and other container	1
and other resources	2
and other things	1
and other languages	1
and other resource	2
and other features	1
and other optimizations.	1
and other protection		1
and other nearby		1
and other complications		1
and other hardware-related	1
and other system-		1
and other flaws			1
and other odd-sized		1
and other abuse			1
and instruction sets.		1
and which are	1
and which optimizations	1
and which reductions	1
and which not.		1
and all the		2
and all three		1
and all 0's		1
and used for		1
and one for		2
and one that		2
and one or		1
and one from		1
and one local,		1
and cache size.		1
and cache sizes.	1
and integer division.	1
and integer representations	1
and no branches			1
and no induction		1
and no destructor		1
and no multiplications.		1
and page 87			1
and class objects		1
and class members		1
and floating point		5
and each CPU 1
and each value	1
and most clean	1
and most up-to-date	1
and using the		1
and using advanced	1
and using overloaded	1
and double is		1
and double (see		1
and double precision	2
and double vectors	2
and double Floating	1
and double precision.	1
and size as		1
and Intel vector	1
and Intel compilers	3
and Intel compilers.	1
and pointer type	1
and b is    1
and b in    2
and b are   3
and b have  2
and b will  1
and b different	1
and b because	2
and b should	1
and b double	1
and b take	1
and b overlap.	1
and i >=	1
and static variables	1
and static const	1
and static data.	1
and 64-bit code		1
and 64-bit operating	1
and 64-bit Windows	2
and 64-bit Linux	2
and 64-bit systems.	2
and 64-bit Windows,	1
and 64-bit Linux,	1
and 64-bit mode.	1
and 64-bit Windows.	2
and 64-bit Linux.	1
and 64-bit integers,	1
and there is		2
and there are		3
and there will		1
and C++ is		1
and C++ faster		1
and also a		1
and efficient if	1
and array indices	1
and where the		1
and possible workaround.	1
and objects that		1
and objects are			1
and objects will		1
and objects should		2
and objects declared		3
and takes little		1
and variable names		1
and variable names.		1
and any other			1
and we do			1
and we don't			1
and some of			1
and some other			1
and some operating		1
and some tips			1
and so on.			1
and return a			1
and return and			1
and return operations		1
and table lookup		2
and very useful			1
and very time-			1
and software developers		1
and software engineering	1
and long double			2
and between simple		1
and 32-bit and			1
and 32-bit Windows		1
and 32-bit Linux		1
and branch is			1
and branch mispredictions.	2
and member functions		1
and makes it			1
and makes an			1
and before any			2
and stored in			1
and stored as			1
and call the			1
and call it			1
and 8 floating			1
and 8 bytes			1
and less efficient		1
and operating systems		3
and operating systems.		2
and operating system.		1
and operating systems".		3
and operating systems").	1
and operating systems"		1
and unsigned integers		4
and unsigned variables.		1
and unsigned integers.		1
and 64 bits  2
and take more	1
and often inefficient.	1
and often excessively	1
and how the		1
and how you		1
and how much		2
and test their		1
and new objects		1
and user settings	1
and these two		1
and these operations	1
and they are		2
and they can		1
and they always		1
and they waste		1
and without the		1
and without AVX		2
and even worse,		1
and always the		1
and always use		1
and SSE2 instruction	1
and system calls.	1
and system modules.	1
and system crash.	1
and system breakdown.	1
and 32 bit 1
and dynamic versions.	1
and dynamic linking.	1
and type of 1
and short vector	1
and simple to		1
and constant propagation	3
and error handling		2
and I believe			1
and making an			1
and stack entries		1
and want to			1
and Gnu compilers		1
and Gnu compilers.		2
and its return			1
and its parameters.		1
and accessed non-sequentially	1
and assembly code		2
and while the			1
and arrays can			1
and arrays by			1
and Windows platforms.		2
and Windows Template		1
and Windows 3.x.		1
and Windows Server		1
and calls alternately		1
and execution time.		1
and execution units.		1
and avoid dynamic		1
and compiled for		1
and big structures		1
and doesn't take		1
and necessary support.		1
and c are     1
and c can     1
and c __m128i 2
and c first.  1
and much time 1
and much less 1
and virtual function	1
and virtual functions	1
and several other	1
and AMD processors	1
and AMD CodeAnalyst.	1
and compile the		1
and compile them	1
and exception handling.	1
and small code		1
and integers Conversion	1
and integers ...................................	1
and Linux operating					1
and cause large						1
and cause contentions					1
and cause delays					1
and cause fatal						1
and classes Nowadays,					1
and done by 1
and therefore the	1
and therefore it	1
and therefore not	2
and therefore more	1
and therefore cannot	1
and therefore likely	1
and therefore count	1
and therefore difficult	1
and therefore fail	1
and works only		1
and optimized function	1
and manual 3: 1
and manual 5: 1
and uses more 1
and another part	1
and get a   1
and known to	1
and supported by	1
and supported on	1
and operators Integer	1
and operators Modern	1
and operators ......................................................................	1
and whether there									1
and doing multiple									1
and run any										1
and calculate it									1
and calculate *p+2									1
and 1 for     2
and add b     1
and add Divide	1
and store the	3
and store it	1
and copy the	1
and copy matrix	2
and optimizing for	1
and well thought-through	1
and simply put			1
and addresses in		1
and shared between		1
and intermediate code		1
and intermediate results	1
and write it	 1
and write configuration	1
and optimize both	1
and programs compiled	1
and microprocessor microarchitecture.	1
and branches in	   1
and Mac systems	   1
and Mac programs   1
and Mac platforms. 1
and Mac platforms  1
and Mac OS	   2
and Mac allow	   1
and Mac systems,   1
and multiplication are	1
and multiplication may	1
and multiplication (27	1
and multiplication (20	1
and see which	   1
and caching becomes	1
and sets all		1
and complicated algorithm	1
and their implementations	1
and don't modify		1
and model numbers		1
and model number.		3
and model numbers,		1
and development time.		1
and development tool		1
and development tools.		1
and mathematical functions	2
and mathematical operations	1
and mathematical calculations.	1
and put the	 1
and put an	 1
and put seldom	 1
and various efficient	1
and various programming	1
and zero flags		1
and Microsoft C++	1
and what it   1
and parameter transfer	2
and division take	1
and automatic vectorization	1
and automatic vectorization.	2
and automatic parallelization.	1
and automatic parallelization	1
and automatic CPU-dispatching	1
and resources should		1
and resources cleaned		1
and induction variables		1
and string functions		1
and string instructions.	1
and string manipulation		1
and three times			1
and better at			1
and better processor		1
and | operations		1
and last the			1
and last all			1
and || are			1
and types of			1
and difficult to		2
and after the 1
and after each	1
and after executing	2
and read or		1
and give the		2
and directives which	1
and public data		1
and public variables	1
and microprocessors work.	1
and assume that	    1
and later instruction	3
and later Intel		1
and later reads		1
and later deleted	1
and later discovers	1
and calling any		1
and interface frameworks.	1
and 512 bits  1
and generate a	2
and r in     1
and r are    1
and b, and   1
and reduce a 1
and 10 ms  1
and choose the	2
and choose this	1
and link with	1
and advanced prediction	1
and switch statements	2
and switch statements.............................................................................	1
and start the												1
and replaced by												1
and negative inputs											1
and negative impacts											1
and go back  1
and tested it.	1
and references in	1
and references are	1
and references Pointers	1
and references ............................................................................................	1
and loaded into													1
and VIA processors.												3
and VIA CPUs.													1
and VIA including												1
and VIA processors,												1
and VIA CPUs").													3
and VIA CPUs"													3
and VIA CPUs:													1
and VIA CPUs".													2
and C are													1
and global variables												1
and my manual													1
and off by													1
and columns in													2
and 1. The  1
and 1. Note 1
and turn on 1
and turn off	1
and inlining the	1
and network access	1
and network connections.	1
and >= operators).		1
and desired new			1
and hot spots.			1
and position-independent code	2
and output should	 1
and task switches;	 1
and sometimes it	 1
and sometimes unacceptably	1
and local variables		1
and frame functions.		1
and prevent it			1
and prevent legitimate		1
and shift out			1
and shift operations		1
and shift Floating		1
and shift operations.		1
and prevents all		1
and d in     1
and d would  1
and Linux, 32-bit	1
and compatibility problems	2
and writing from  1
and writing data  1
and copying different	1
and causes the		1
and divide it		1
and 16-bit Windows,	1
and child are		1
and child class		1
and child class.	1
and disk space		1
and disk space.		1
and possibly also	1
and possibly save	1
and overloaded operators.	2
and classes. The		1
and % means  1
and precision. The	1
and algebraic reductions	1
and handle one			1
and handle text			1
and initialized arrays.		1
and insert the	2
and insert a	1
and insert only	1
and reading the	1
and reading them	1
and message systems.	1
and enable one		1
and keep track		1
and PathScale compilers	2
and PathScale compilers.	3
and BSD comes 1
and rarely the	1
and easier to	1
and 20 clock	1
and expect this	1
and references. Most	1
and references. Arrays	1
and similar objects	1
and similar methods	1
and back again.		4
and garbage collection	2
and garbage collection.	1
and garbage collection,	1
and templates for	1
and header files.	1
and swap these		1
and sets. Let		1
and invalid pointers.	2
and setting the		1
and checks both		1
and current operating	1
and 3 -	    1
and waste of	1
and map are	1
and easy development	1
and easy development.	1
and 256-bit YMM		1
and scattered around	1
and writes may		1
and device drivers	1
and destructors of	1
and destructors to	1
and destructors A	1
and destructors ..................................................................................	1
and stores the	2
and search facilities,	1
and usability A		1
and usability ...............................................................................................	1
and vectorize the												1
and derived class												1
and standardized file												1
and memcpy is	 1
and c2 for 1
and misprediction of	1
and just-in-time compilation	1
and just-in-time compilation.	1
and algorithms in		1
and PLT for    1
and PLT tables 2
and PLT lookups	1
and profiling support	1
and fragmented hard	1
and who is     1
and fixed size 1
and fixed repeat	1
and interpreted line	1
and YMM registers	2
and measure how		1
and lazy binding	2
and delete is		1
and delete to		1
and delete or		2
and delete (or		1
and distributed as	1
and generally used	1
and Linux. The		1
and Linux. Asmlib	1
and Open BSD		1
and free are:		1
and rounding 137	1
and far procedures	1
and 120 for		1
and highly compatible	1
and again for		1
and Clang compilers.	1
and log are		1
and compile-time while	1
and wait until	 1
and 15 clock	 1
and declare all	 1
and normal unsigned	1
and show the		1
and show a		1
and c1 for		1
and efficient, but	1
and again. If  1
and deallocated in	2
and edx can	1
and edx contains	1
and soon also		1
and edx, respectively.	1
and branches. The	1
and internal functions	1
and loss of  1
and Fortran are	1
and Fortran code.	1
and drivers differ	1
and economize the	1
and maintain. Most	1
and fourteen in		1
and fourteen integer	1
and bc for   1
and Digital Mars	1
and CISC processors,	1
and 22 one		1
and searching for	1
and _WIN64 _M_X64	1
and pow at 1
and computing power	1
and 90 for    1
and understand compiler-generated	1
and returns a  1
and frameworks typically	1
and compare it 1
and manuals. I 1
and loop-invariant code	2
and jumps back	   1
and 13 objects,	   1
and written back.  1
and BSD, the	   1
and sixteen in	   2
and enables interprocedural	1
and databases with		1
and loader (requires		1
and objects. Storage		1
and mouse inputs		1
and subtraction (3		1
and ownership is		1
and drawbacks of		1
and x86-64 platforms.		2
and Watcom compilers		1
and 14.9 is			1
and maintenance -		1
and maintenance There		1
and maintenance ..........................................................................................	1
and maintenance easier.												1
and underflow except												1
and underflow neutralize											1
and splitting the												1
and video processing,												1
and sum2 are													1
and avoids many													1
and image processing.												1
and interfaces to												1
and aliasing. Operations											1
and changing then												1
and smaller. This												1
and structures. Useful												1
and reproducible as												1
and reproducible results.											1
and operators. Make												1
and (set) =    1
and fine-grained parallelism	1
and compact. The 1
and FPGA soft	 1
and earlier Intel	1
and 119 for 1
and compiler-generated code	1
and perhaps };	       1
and perhaps Mac	       1
and main() are	       1
and 14.30 will	       1
and keywords relevant  1
and divisions are      1
and trigonometric functions.	1
and 64, depending 1
and copies them	  1
and 135 show	  1
and leave the	  1
and leave them	  1
and c[i] are	  2
and ZMM registers 2
and logarithms take	1
and pop ebx.   1
and s3 can     1
and open source.	1
and measuring the	1
and read-only data	1
and read-only data.	1
and well-structured code	1
and multiplications. Subtractions	1
and market the	     1
and frameworks, rather	1
and truncation. The	1
and truncation. Efficient	1
and deallocation of		2
and decrement operators		1
and decrement operators.	1
and free. This			1
and free. These			1
and references, which		1
and LIBM libraries		1
and complexity (en.wikipedia.org/wiki/Standard_Template_Library).	1
and memcpy, at 1
and Sum3 in 1
and Sum3 are	1
and lack of	1
and mostly relative	1
and resolve any		1
and resolve compatibility	1
and discovered that		1
and scientific vector		1
and throw. It  1
and that's what	1
and GOT. The	1
and destination both	1
and 72 for	1
and 0x4700. These	1
and 14.13b works	1
and underflow. The	1
and web browsing	1
and p2 having		1
and maintaining a	1
and maintaining such	1
and sound processing	1
and servers should	1
and MOVNTDQ require	1
and 64-bit. Supports	1
and 64-bit. They	1
and isolate the		1
and v.f are 1
and afterwards a	1
and denormals-are-zero mode	1
and machines with      1
and debugging. A       1
and synchronization between	2
and high-priority threads	1
and verify than	  1
and searching, or 1
and restarted anyway.	1
and IDE's for 1
and fine-tuned for	1
and redo the   2
and deleting the	1
and deleting containers.	1
and flexible, but		1
and Gnu. There			1
and Mac. The			1
and Mac. Supports		1
and subtracting 1		1
and reusable classes.		1
and stop the 2
and attempts to	1
and recovering from	1
and direct hardware	1
and studying the	1
and press break		1
and involve a		1
and statistics, and	1
and later. The	1
and 9. Multiplications	1
and "best case"		1
and delete, and		1
and delete, or		1
and BSD. The		1
and BSD. If		1
and executables. Make	1
and clumsy, as	 1
and repagination are	1
and esp+12 and	 1
and "More Effective	1
and IA-32 Architectures	1
and C# and		1
and FuncB, then		1
and Newton-Raphson iterations.	1
and |) instead	   1
and object-oriented programming,	1
and Adolfy Hoisie:  1
and destructors. The	1
and de-allocation of	1
and off. It	  1
and unexpected behaviors.	1
and flexibility of		1
and A. Hoisie,	1
and matrixes. Algorithms	1
and uninstallation of		1
and temp++ actually		1
and 2B. There			1
and lrint. Unfortunately,	1
and communicating between	1
and USB sticks	  1
and finally (4)	  1
and analyzing program	1
and disadvantages. The	1
and fence instructions,	1
and 12.4c is		1
and shared_ptr. auto_ptr	1
and databases. The		1
and Fortran. These		1
and investigated by		1
and error-prone. The		1
and reorganize: //		1
and convoluted template		1
and create a   1
and popped from	1
and delete). 88	1
and classes............................................................................................ 51	1
and decoded in												1
and 3B. developer.intel.com.										1
and ||). The												1
and animations is											1
and cons of    1
and "Integrated Performance	1
and UNIX shell	1
and '$' are	1
and FPGAs. The	1
and cryptography (www.intel.com).	1
and Itanium systems.			1
and Z. Each 1
and correspondingly two	1
and hence higher    1
and systematization of	1
and memcpy: //	    1
and parsing are	    1
and 137, respectively.	1
and reorganize the	1
and micro-operation breakdowns	1
and _mm_free. A	    1
and non-constant references	1
and irregular response		1
and temp2. Modern		1
and stopping threads.		1
and double..................................................................................... 140	1
and operators............................................................................... 29	1
and tedious. The									     1
and free) causes									     1
and Sum3. Whether									     1
and bb[i]*cc[i] is									     1
and semicolons in									     1
and intelligible way									     1
and b. But	 1
and VIA. The	 1
and SVML. The	 1
and Enterprise editions).	1
and fffff is   1
and closer to  1
and foremost, in	1
and list[i].b. It	1
and flexibility, while	1
and 3A and	 1
and shifts one	 1
and y?" then	 1
and suggestions for	1
and increment. The	1
and restoring registers,	1
and newsgroups contain		1
and non-recoverable errors;	1
and concentrate the 1
and down. Remember  1
and modular. The    1
and WritePrivateProfileString to	1
and invoked with	      1
and Func2 were		      1
and maintainability of	      1
and relational operators      1
and decreased when	      1
and publish a 1
and mirroring is	1
and Gnu). Other		1
and suggests methods	1
and mainframes, and	1
and ease of	1
and recompile it.	1
and planned solutions.	1
and API's. Memory	1
and shuffling can	1
and closes the		1
and well- tested	1
and similarly sets	1
and clarity of		1
and __intel_new_strlen in	1
and ARM platforms      1
and getting them       1
and replaces the       1
in the //    1
in the function	4
in the code	19
in the compiler	3
in the data	2
in the program	8
in the different	1
in the same		20
in the CPU		5
in the other		1
in the instruction	1
in the loop		2
in the cache		1
in the set		1
in the class		1
in the most		4
in the Intel		2
in the library		1
in the object		1
in the 64-bit		1
in the array		1
in the clock		1
in the variable		1
in the table		1
in the order		4
in the long		1
in the branch		2
in the way		3
in the critical		5
in the operating	1
in the first		1
in the code.		5
in the template		1
in the test		1
in the following	9
in the programming	1
in the case		2
in the Gnu		3
in the assembly		1
in the while		1
in the Windows		1
in the big		1
in the best		1
in the thread		2
in the matrix		1
in the AVX		1
in the optimized	1
in the calculation	1
in the container	1
in the list		1
in the likely		1
in the structure	1
in the values		1
in the memory.		2
in the shared		1
in the program.		2
in the above		5
in the optimal		1
in the particular	1
in the next		3
in the multiplication	1
in the application	1
in the expression	1
in the cache.		3
in the high		1
in the Microsoft	1
in the source		2
in the end		3
in the last		1
in the XMM		1
in the second		2
in the x86		3
in the old		4
in the innermost	5
in the compiler.	3
in the relevant		1
in the main		3
in the global		1
in the choice		1
in the STL		2
in the level-2		4
in the code,		1
in the output		1
in the level-1		4
in the database		1
in the calculations.	1
in the final		4
in the copying		1
in the so-called	1
in the logical		1
in the entire		1
in the simplest		2
in the situation	1
in the condition	1
in the previous		2
in the chapter		1
in the future		1
in the sequence		2
in the CPU.		2
in the subsequent	1
in the latter		2
in the fully		1
in the procedure	1
in the background	1
in the system.		1
in the array.		1
in the general		1
in the software.	1
in the vectors.		1
in the YMM		2
in the sections		1
in the carry		2
in the table.		1
in the machine		1
in the core.		1
in the sense		6
in the latest		1
in the scope		1
in the debugger		3
in the form		3
in the future.		4
in the rest		1
in the event		3
in the select		1
in the project		1
in the present		1
in the asmlib		1
in the SVML		1
in the appendix		1
in the unit-test	1
in the interval		3
in the early		1
in the CPU,		1
in the file,		1
in the container,	1
in the container.	1
in the planning		1
in the book		1
in the disassembly	1
in the profile.		1
in the arrays:		1
in the MKL		1
in the majority		1
in the Professional	1
in the oldest		1
in the grandparent	1
in the BTB		1
in the end.		1
in the STL.		1
in the broader		1
in the representation,	1
in the "Macro		1
in the GOT,		1
in the beginning.	1
in the former		1
in the level-		1
in the Active		1
in the sequence,	1
in the unit-		1
in the BIOS		1
in a function		3
in a use		1
in a more		3
in a memory		3
in a program		2
in a vector		2
in a different		5
in a loop		4
in a class		2
in a library		1
in a number		1
in a static		3
in a 64-bit		1
in a C++		1
in a very		1
in a way		3
in a critical		1
in a register		5
in a rather		1
in a dynamic		2
in a short		1
in a simple		1
in a large		1
in a big		2
in a specific		1
in a single		6
in a virtual		1
in a thread		1
in a small		1
in a matrix		4
in a structure		2
in a hardware		3
in a shared		4
in a particular		3
in a microprocessor	1
in a separate		10
in a linked		1
in a binary		1
in a 512		1
in a compiler.		2
in a computer		2
in a global		1
in a network		1
in a special		1
in a safe		1
in a message		1
in a vector.		2
in a module		1
in a series		2
in a low		1
in a typical		2
in a standardized	1
in a temporary		2
in a procedure		2
in a register.		2
in a DLL		2
in a non-sequential	6
in a random		1
in a far		1
in a debugger		1
in a computer.		1
in a bad		1
in a protected		2
in a suboptimal		3
in a high-level		1
in a multithreaded	1
in a register,		1
in a well-structured	1
in a pivot		1
in a computationally	1
in a PC.		1
in a programmable	1
in a high-priority	1
in a FIFO		1
in a first-in-last-out	1
in a systematic		1
in a word		1
in a union:		1
in a hand-		1
in a multitasking	1
in a DLL.		1
in a graceful		1
in a FILO		1
in a Gauss		1
in a column-wise	1
in a pre-calculated	1
in code caching		1
in an object		2
in an array		1
in an application	1
in an &&		1
in an ||		1
in an unused		1
in an STL		1
in an inefficient	1
in an integer,		1
in an array.		1
in an appendix		1
in an FPGA		1
in an import		1
in an array,		1
in compiler price	1
in this example		7
in this table		1
in this way		2
in this case		5
in this range		1
in this example:	1
in this hot		1
in this series		1
in this case.		4
in this example.	1
in this format.		1
in this column.		1
in this block:		1
in this chapter.	1
in this respect.	1
in more than		1
in more complex		1
in more detail		1
in memory is		1
in memory or		2
in memory if		1
in memory by		1
in memory then		1
in memory takes		1
in memory rather	2
in program execution	1
in program memory.	2
in vector c		2
in vector c2		1
in vector Type		1
in vector bc		1
in different C++	1
in different versions	1
in different source	1
in different parts	1
in different places	1
in different ways.	1
in different modules.	1
in different browsers,	1
in only the  1
in other programming	1
in other threads	1
in other compilers.	1
in other ways		1
in other modules	1
in other languages.	1
in other ways,		1
in which the		6
in which data		1
in which they		6
in which alloca		1
in all the		1
in all possible		1
in all systems		1
in all cases,		1
in all operands		1
in one memory		1
in one way		1
in one big		1
in one source		1
in one operation	1
in one iteration	1
in one vector.		1
in one vector,		2
in one operation.	2
in one contiguous	1
in integer registers.	1
in set number		1
in floating point	2
in each vector		1
in each CPU		1
in each part		1
in each set.		1
in each case.		1
in each core.		1
in example 15.1b	2
in example 13.1		3
in example 16.2		2
in example 15.1c	1
in example 14.8		1
in example 12.4b	1
in example 14.28	2
in example 9.6b.	2
in example 9.5a		1
in example 11.3		2
in example 14.12b	1
in example 14.14a	1
in example 12.4a	1
in example 8.15a	1
in example 14.19	1
in example 14.1c	1
in example 11.2b	1
in example 11.1a	1
in example 15.1b.	1
in example 14.23	1
in example 14.7b	1
in example 7.32b.	1
in example 8.15b.	1
in example 16.2.	1
in example 8.23b	1
in example 14.7b,	1
in example 8.24		1
in example 16.1.	1
in example 7.35		1
in example 12.1b,	1
in example 7.22.	1
in example 9.5b.	1
in example 7.43b	1
in example 14.21	1
in example 9.1b.	1
in example 7.30b.	1
in most libraries	1
in most cases		5
in most cases,		4
in most cases.		3
in most cases:		1
in using the		1
in Intel function	1
in Intel compiler	2
in Intel compilers	1
in Intel processors	1
in Intel header		1
in b to	 2
in library functions	1
in library functions,	1
in library libircmt.lib.	1
in multiple versions		5
in multiple applications,	1
in multiple versions,		1
in two different		1
in two other			1
in two libraries		1
in two ways.			1
in two versions.		1
in two steps.			1
in static memory		3
in static memory.		2
in 64-bit operating		1
in 64-bit code.			1
in 64-bit systems		2
in 64-bit Windows		1
in 64-bit Linux			3
in 64-bit mode			7
in 64-bit systems.		6
in 64-bit mode.			3
in 64-bit Windows.		2
in 64-bit device		1
in C++ is 1
in C++ and	1
in C++ so	1
in C++ take	1
in C++ An	1
in C++ programs	1
in C++ programs.	1
in such a		1
in such cases.		1
in such applications.	1
in array ;		1
in many different	1
in many cases.		2
in many commercial	1
in many respects	1
in any of		1
in any situation	1
in some very		1
in some systems		1
in some cases		8
in some cases,		3
in some compilers.	1
in some cases.		3
in some embedded	1
in some situations,	1
in some rare		1
in so that		1
in table The		1
in table 19		1
in table 8.1		1
in table 9.1		1
in table 8.1.		1
in table 9.2.		1
in table 9.2,		1
in performance can	1
in performance if	1
in performance between	2
in performance over	1
in software writing	1
in software development.	1
in order to 47
in between the	1
in 32-bit or	1
in 32-bit operating	2
in 32-bit systems	7
in 32-bit Windows	1
in 32-bit Linux		1
in 32-bit mode		2
in 32-bit Mac		1
in 32-bit systems.	1
in 32-bit mode.		5
in 32-bit systems,	2
in 32-bit mode,		2
in member functions	2
in critical parts	1
in 64 bit   6
in registers in	1
in registers are	1
in registers by		1
in registers only	1
in registers rather	5
in registers (see	1
in registers instead	1
in registers anyway.	1
in registers (6		1
in registers (8		1
in test situations	1
in systems with		1
in these manuals	1
in system code		1
in system code.		1
in 32 bit 3
in programming nowadays	1
in case the    3
in case of     12
in case memory 1
in case F2     1
in cases where 5
in simple cases	1
in simple cases.	3
in stack memory		1
in Gnu compiler		3
in its own		1
in its API.		1
in assembly code.	1
in assembly language	1
in assembly language.	1
in assembly names.	1
in assembly language".	2
in assembly language",	1
in assembly language:	1
in large data		2
in large arrays.	1
in large applications.	1
in Windows 7		1
in Windows MFC).	1
in compiled C++		1
in compiled languages	1
in compiled C++.	1
in big blocks		1
in speed by		2
in speed between	3
in several stages	1
in small embedded	1
in matrix //		2
in matrix 96		1
in Linux and		3
in Linux kernel		1
in classes like		1
in optimized programs.	1
in manual 3: 2
in manual 2: 3
in manual 5: 4
in manual 4: 2
in another source	1
in another array.	1
in another module.	1
in eight consecutive	4
in list in		1
in hardware in		1
in optimizing library	1
in optimizing application-specific	1
in memory. The				1
in memory. This				1
in memory. It				1
in memory. Example:			1
in memory. Function			2
in memory. No				1
in memory. Variables			1
in memory. They				1
in shared objects			1
in both the				1
in both static				1
in both Windows				2
in both cases.				1
in both compiler,			1
in both 16-bit,				1
in programs that			1
in programs with			1
in programs where			1
in programs compiled			1
in microprocessor hardware		1
in Mac systems.	  1
in Mac OS	  1
in multiplication here:	1
in mathematical iterations	1
in separate threads		1
in separate modules		1
in various ways			1
in applications that		1
in applications without		1
in addition to	1
in addition to)	1
in your program	1
in your program,	1
in XMM registers	1
in vectors of		1
in x86 systems).	1
in binary representation	1
in binary form			1
in just a 1
in just one	1
in main will	2
in main has	1
in computer games	1
in computer games.	1
in C and    1
in my vector	1
in my test	1
in my blog.	1
in my experiments.	1
in my crystal		1
in STL for		1
in STL as		1
in dynamically allocated	1
in Windows, you			1
in turn calls			1
in fact be			1
in fact it			1
in fact an			1
in fact only			1
in fact using			1
in fact accessed		1
in fact doing			1
in fact represented		1
in fact addressed		1
in vectorized code		1
in special cases		1
in special mathe-		1
in Linux, BSD			1
in Linux, sched_setaffinity).	1
in registers. 64-bit		1
in registers. Except		1
in performance. A		1
in performance. There		1
in performance. I		1
in performance. Integer		1
in 16-bit systems		1
in 16-bit systems:		4
in x, and 1
in full use	1
in RAM memory.	1
in parallel if	1
in either case.	1
in ebx ;  1
in BSD work	1
in BSD Shared	1
in chapter 12.	2
in chapter 9.10,	1
in chapter 11.		1
in newer versions	1
in sequence are		1
in linear algebra)	1
in row 28 1
in Windows. It	1
in situations where	3
in situations like	1
in device drivers	1
in terms of		8
in addition, set	1
in PC processors.	1
in almost all		2
in interpreted languages	1
in interpreted script		1
in vectors. These		1
in random order.		2
in Linux. 32-bit		1
in Linux. Address		1
in memory, as			1
in memory, at			1
in memory, but			1
in details. The			1
in thousand so			1
in Intel's Math			1
in registers, not		1
in registers, regardless	1
in registers, whereas		1
in registers, totaling		1
in dispatched version		1
in column 28  1
in column 28, 1
in embedded systems	2
in 32- bit  1
in edx as   1
in one. The 1
in edx, to  1
in Fortran where	1
in list, the		1
in ever more		1
in b[i] and		1
in regular patterns	1
in parallel. Modern	1
in parallel. Small	1
in parallel. Fine-grained	1
in parallel. Coarse-grained	1
in advance and			2
in advance which		1
in advance rather		1
in efficiency. For		1
in aa: StoreVector(aa		3
in aa: a.store(aa+i);		1
in C, C++			1
in sequential order		1
in www.agner.org/optimize/cppexamples.zip. An	1
in www.agner.org/optimize/cppexamples.zip. These	1
in tests on				   1
in detail in				   1
in detail on				   1
in advance. The				   2
in advance. This			   1
in character arrays			   1
in Windows). There			   1
in Windows). Alternatively,		   1
in comparisons, such			   1
in kernel code"	1
in Unix-like systems	1
in Unix-like systems.	1
in vectors, but		1
in Day for  1
in x. The   1
in a. This  1
in Sum2 and 1
in ASCII form.	1
in scientific computing,	1
in stdint.h char		1
in non- sequential		1
in itself, and			1
in 36 C++  1
in p1 and  1
in question. You	1
in question. For	1
in doubt how 1
in use. The  1
in question without	1
in develop- ment	1
in C++: An  1
in C++: Preprocessor	1
in loops. Consider	1
in Wikipedia under	1
in Java, C#, 1
in reusable and	1
in time-critical code.	1
in exclusive mode,	1
in precompiled code.	1
in eax. The    1
in popularity when	1
in y. The     1
in duration compared	1
in interactive programs	1
in relation to 1
in edx. Furthermore,	1
in general. Assume	1
in scope. A 1
in advance, because	1
in two: //  1
in 2015 or  1
in nn ifbit=1	1
in Microsoft's .NET	1
in F1? Then    1
in connection with	1
in mind, that 1
in parts, for 1
in all, it    1
in applying the	1
in 2010. This	1
in a[] which	1
in disguise. Enums	1
in question: Put	1
in Windows) to		1
in isolation have	1
in parallel: Using	1
in green. It 1
in favor of  1
in a[i]. Note	1
in Linux). Threads	1
in nature, it		1
in meaningless event	1
The function is		2
The function that	1
The function code	1
The function may	1
The function library	1
The function call	1
The function names	1
The function F1		1
The function rounds	1
The if branch		1
The if statement	1
The code is		3
The code in		5
The code for		1
The code that		1
The code can		2
The code will		1
The code has		1
The code cache		2
The code examples	1
The code becomes	3
The code goes		1
The code section	3
The compiler is		3
The compiler can	6
The compiler may	12
The compiler will	7
The compiler has	3
The compiler makes	1
The compiler cannot	1
The compiler does	1
The compiler doesn't	2
The compiler option	1
The compiler supports	1
The compiler comes	1
The compiler sometimes	1
The compiler generates	1
The compiler inserts	1
The this pointer	1
The time that		1
The time it		9
The time you		1
The time when		1
The time used		1
The time unit		1
The time stamp		1
The time measurements	1
The time consumption	1
The use of		4
The } 59		1
The memory address	1
The memory space	2
The data in		1
The data have		1
The data cache		1
The data members	1
The data section	1
The program is		1
The program can		1
The program or		1
The program code	2
The program may		1
The program will	1
The program has		2
The program should	2
The program uses	1
The program logic	1
The vector class	1
The vector operations	1
The vector instructions	1
The different versions	2
The different threads	1
The different kinds	1
The same can  2
The same example	1
The same register	1
The same method		1
The same applies	2
The same rules		1
The same advice		1
The same argument	1
The same coding		1
The functions are	1
The functions must	1
The only way  1
The only allowed	1
The only CPUID		1
The CPU can		1
The CPU will		1
The CPU dispatcher	5
The CPU dispatch	2
The CPU supports	1
The CPU family		1
The CPU market		1
The other STL		1
The instruction add	2
The loop in	2
The loop can	1
The loop will	1
The loop branch	1
The loop would	1
The loop counter	1
The loop count		1
The loop control	1
The loop unrolling	1
The loop body		2
The loop initialisation	1
The cache line		2
The cache works		1
The integer size	1
The integer division	1
The integer representation	1
The integer comparison		1
The floating point		1
The example on			1
The compilers are		2
The compilers will		1
The compilers also		1
The compilers I			1
The most efficient		2
The most critical		1
The most important		5
The most common			4
The most compatible		1
The most serious		1
The most commonly		2
The size of			7
The size should			1
The size conversion		1
The size (in			1
The Intel compiler		8
The Intel vector		1
The Intel compilers		1
The pointer is			1
The library function		1
The library has			1
The float type			1
The multiple CPU		1
The two comparisons		1
The two summation		1
The object that			1
The object oriented		1
The object pointed		1
The number of			7
The static memory		1
The static data			1
The static keyword		2
The static declaration		1
The 64-bit version		1
The 64-bit systems		1
The C++ way			1
The C++ language		2
The C++ exception		1
The C++ syntax			1
The clock frequency		3
The clock counts		1
The version that		2
The value is			1
The value of			3
The objects are			1
The objects stored		1
The return type			1
The table of			1
The table can			1
The table should		1
The table shows			2
The performance is		1
The performance can		1
The performance on		1
The performance monitor		1
The performance measurement	1
The order of	2
The order in	1
The branch inside	1
The branch target	1
The member functions	1
The way to 2
The elements at	1
The const keyword	1
The address of		2
The critical stride	3
The operating system	3
The unsigned integer	1
The first time		1
The first two		1
The first way		1
The first processors	2
The first eight		1
The first count		2
The first thing		2
The first generation	2
The register stack	1
The register keyword	2
The 64 bit   1
The 64 64    1
The libraries included	1
The template parameter	1
The need for 1
The test data	1
The test should	1
The test tool	1
The user may	1
The user interface	1
The user expects	1
The method is		2
The method of		2
The method in		1
The method used		1
The method described	1
The method currently	1
The access is		1
The SSE2 instruction	3
The following compiler	1
The following example	17
The following table	2
The following list	1
The following methods	1
The following examples	1
The following algorithm	1
The following sections	1
The following guidelines	1
The following considerations	1
The following techniques	1
The system is 1
The file will 1
The file http://www.agner.org/optimize/asmlib.zip	1
The dynamic libraries					1
The type of 1
The type __m128i	1
The type __m128		1
The type __m128d	1
The & operator		1
The instructions mov	1
The constant N1	 1
The constant (2n 1
The stack is 2
The stack unwinding	2
The Gnu function	1
The Gnu compiler	6
The Gnu C++		1
The Gnu libraries	1
The extra time		1
The assembly output	1
The assembly listing	1
The Windows and		1
The Windows version	1
The calculations may	1
The execution times	1
The execution core	1
The result is 1
The result of 2
The result will	1
The result ebx	1
The threads have	1
The best function	1
The best compilers	1
The best possible	1
The best performance	3
The best way		2
The best solution	1
The best Java		1
The speed is		1
The speed of		1
The speed for		1
The speed on		1
The speed test		1
The c loop		1
The virtual processor	1
The common excuse	1
The AMD math		1
The exception is	2
The allocated memory	2
The AVX instruction	1
The AVX instructions	1
The optimized code	1
The optimized part	1
The calculation of	4
The calculation becomes	1
The calculation here	1
The parameters a	1
The problem is 1
The problem with	1
The problem only	1
The problem here	1
The solution a		1
The container class	1
The advantage of	8
The operators are	1
The operators &,	1
The few clock 1
The standard template	1
The standard stack	1
The standard solution	1
The hardware definition	1
The values of		1
The values are		2
The sign is		1
The copy constructor	1
The copy constructors	1
The copy constructor,	1
The intermediate code	1
The intermediate file	1
The intermediate files	1
The allocation of	1
The allocation and	1
The above code 3
The above example	1
The above examples	1
The optimal number	1
The space is		1
The dispatching to	1
The dispatching mechanism	1
The next time	1
The next instruction	1
The next example	1
The next two		1
The next line		1
The next section	1
The next chapter	1
The branches may	1
The multiplication by	2
The application program	2
The expression a	1
The expression that	1
The expression (Tuesday	1
The Boolean operations	1
The Boolean operators	1
The intrinsic vector	1
The development time	2
The name of	1
The name "position-independent	1
The conversion of		1
The conversion time		1
The conversion from		1
The conversion between		1
The disadvantage is		3
The disadvantage of		4
The high speed	 1
The high priority	1
The Microsoft and	1
The Microsoft compiler	1
The division is		1
The source code		1
The cost of		4
The automatic dispatching	1
The automatic vectorization	1
The reason is 4
The reason for	3
The reason why	3
The reason is,	1
The dispatcher function	1
The dispatcher changes	1
The string classes	1
The string length	1
The programmer can	1
The programmer does	1
The programmer typically	1
The three functions		1
The three clauses		1
The keyword static,		4
The keyword __fastcall		1
The examples in			1
The examples are		1
The examples on			1
The difference is		1
The difference between		1
The difference lies		1
The mechanism of		1
The mechanism relies		1
The last line 1
The load time 1
The calling function	1
The XMM vector		1
The second way		1
The second thing	1
The second generation	2
The bigger vectors	1
The AVX2 instruction	1
The x86 processors	1
The process of		1
The 512 512 1
The advantages of	9
The results of 1
The results are	2
The storage of	1
The storage principles	1
The old C-style		1
The union forces	1
The link to		1
The link order		1
The appropriate version	1
The constructor or	1
The constructor sets	1
The operands of	1
The range of 1
The smaller the	1
The core clock	2
The negative effects	1
The main advantage	1
The main reason		1
The main focus		1
The positive effects	1
The overhead of		4
The change of		1
The installation of	1
The installation program	1
The installation process	1
The syntax is	 1
The syntax in	 1
The syntax may	 1
The choice of	 5
The profiler counts	1
The profiler tells	2
The profiler inserts	1
The profiler measures	1
The profiler identifies	1
The modern microprocessors	1
The network access		1
The level-2 cache		1
The fact that			4
The output goes			1
The vectorized code		1
The costs of   3
The preceding paragraph	1
The safe way  1
The Pentium 4 1
The Pentium Pro	1
The efficiency of	4
The exponent is		2
The conditions that	1
The maximum loop	1
The maximum size	1
The maximum number	3
The alignment of	1
The offset of 1
The effect is 2
The effect of 3
The so-called objects	1
The so-called nontemporal	1
The so-called iterators		1
The total size			1
The child class			1
The child classes		1
The containers in		1
The counters will		1
The 128-bit XMM			2
The names of			2
The details of			1
The details about		1
The square brackets		1
The bitwise operators		3
The bitwise AND			1
The heap can			1
The heap space			1
The heap manager		3
The target of			1
The target address		1
The nontemporal write		1
The simplest and		1
The simplest possible		1
The simplest way		1
The simplest case		1
The situation is		1
The delay is  2
The delay on  1
The newer instruction	1
The sequence of		1
The length of		2
The penalty of		1
The reasons for		1
The alternative solution	1
The 'this' pointer		1
The gain in			1
The gain depends		1
The declaration of		1
The map file	2
The microarchitecture of	1
The 256-bit YMM	      1
The subsequent counts 1
The subsequent sections	1
The subsequent manuals	1
The transfer of		1
The latter is		2
The search for		1
The logic of		1
The Microsoft, Intel	1
The typical way		1
The usability may	1
The procedure to	1
The frequent allocation	1
The algorithms used	1
The PLT entry  1
The inputs for 1
The fastest execution	1
The Gnu, Intel		1
The preferred method	1
The volatile keyword	2
The YMM registers	1
The purpose is		1
The purpose of		3
The D language		1
The carry bit		1
The trick is		1
The trick of		2
The trick will		1
The trick violates	1
The disadvantages of	1
The update process	1
The developers may	1
The profilers are	1
The linker will		1
The representation of	1
The Clang compiler 2
The measured time  1
The measured results	1
The factor sizeof(S1)	1
The rules for		1
The latest versions	1
The log on 1
The CodeGear compiler	1
The principle of	2
The availability of	1
The .NET framework	2
The newest instruction	1
The prefetch instruction	1
The debugger cannot		1
The behavior of			1
The 32- bit  1
The worst case	1
The worst problem	1
The biggest disadvantage	1
The third thing			1
The CISC instruction		2
The AND operator		1
The context switches		1
The live range			1
The OR operator			1
The advice of			1
The pow function		1
The pitfalls of			2
The equivalent expression	1
The Codeplay compiler		1
The present manual		1
The highest performance		1
The highest efficiency		1
The "Intel Math			1
The pre-increment operator	1
The older MMX	  1
The 17 debug	  1
The empty throw()specification	1
The missing functions		1
The powN template		2
The lengths of			1
The splitting of		2
The consequence is		1
The consequence of		1
The original method		1
The returned pointer		1
The existing object		1
The explicit use		1
The MOVNTQ instruction		2
The implicit 'this'		1
The tests were			1
The conclusion is		2
The conclusion to		1
The C/C++ standard		1
The Intel-based Mac		1
The updating mechanism		1
The exponential function	1
The generality of		1
The initialization routine	1
The -fpie option   1
The easiest way	   2
The history of	   1
The CPU- specific  1
The InstructionSet() function	1
The unrolled loop    1
The built-in code    1
The symbol interposition	1
The fastcall modifier		1
The preprocessing macro		1
The formats can	  1
The FDIV bug	  1
The dynamic_cast operator	1
The opposite of	 1
The opposite order	1
The proxy is 1
The const_cast operator	1
The resulting code	1
The DLLs are  1
The renaming mechanism	1
The indirect function	1
The theoretical background	1
The pragmas must		1
The branching is		1
The creation of			1
The integrated development	1
The recursion must		1
The insight you			1
The funny looking		1
The clumsy AND-OR		1
The procedures for		1
The [] operator			1
The similarity between		1
The vulnerability of		1
The 16-byte instructions	1
The dot in  1
The Core2 processor	1
The benchmark performance	1
The recommendations are		1
The radical solution		1
The absence of			1
The fallacy of			1
The benefits of			1
The allocation, deallocation	1
The ?: operator	1
The lesson we	1
The FactorialTable in	1
The CodeGear, Codeplay	1
The ultimate solution	1
The official C		1
The reinterpret_cast operator	1
The characters '?',  1
The undocumented Intel	1
The static_cast operator	1
The IPP library	1
The distinctions between	1
The inequality sign		1
The i<20 loop  1
The compactness of	1
The loop-branch is	1
The advise of	1
The sin function	1
The MASM assembly	1
for the function	1
for the compiler	7
for the memory		1
for the vector		1
for the same		6
for the functions	1
for the CPU		3
for the other		1
for the instruction	2
for the loop		1
for the class		1
for the size		1
for the Intel		1
for the two		1
for the object		1
for the C++		1
for the performance	1
for the 32-bit		1
for the critical	1
for the first		2
for the new		1
for the user		1
for the SSE2		2
for the following	3
for the cases		1
for the error		1
for the stack		1
for the result		1
for the specific	2
for the common		2
for the exception	2
for the overflow	1
for the AVX		2
for the calculation	1
for the parameters	1
for the supported	1
for the hardware	1
for the intermediate	1
for the next		1
for the programmer	4
for the three		1
for the end		2
for the difference	1
for the link		1
for the appropriate	1
for the main		1
for the installation	1
for the desired		2
for the whole		1
for the level-2		1
for the level-1		1
for the object.		1
for the sake		13
for the performance.	1
for the child		1
for the stack.		2
for the logical		1
for the simplest	1
for the CPU.		1
for the user.		2
for the Microsoft,	1
for the purpose		1
for the latest		2
for the application.	1
for the availability	1
for the .NET		1
for the project		1
for the commercial	1
for the linker.		1
for the FDIV		1
for the reinstallation	1
for the IDE,		1
for the "FDIV		1
for the label.		1
for the <,		1
for the pros		1
for the newsgroup	1
for is likely		1
for a and		1
for a very		1
for a new		1
for a Windows		1
for a result		1
for a specific		4
for a single		1
for a virtual		1
for a few		1
for a list		1
for a particular	5
for a higher		2
for a 512		1
for a given		2
for a further		1
for a discussion	2
for a low		1
for a lower		1
for a portable		1
for a console		1
for a discussion.	1
for a 2'nd		1
for // multiply		1
for function libraries	1
for function F1.	1
for code that		2
for code bloat		1
for an integer		1
for an example		2
for an explanation	6
for an increasing	1
for an explanation.	2
for an example.		1
for x to		1
for this is		1
for this instruction	1
for this manual		1
for this function,	1
for this task		1
for this shift		1
for this efficiency	1
for this purpose.	1
for this purpose,	1
for this reason.	1
for use as		1
for more than		1
for more information	1
for more complicated	1
for more advanced	1
for more discussion	1
for vector operations.	1
for vector operations,	1
for vector intrinsics.	1
for different instruction	3
for different Intel		1
for different C++		6
for different objects		1
for different processors	2
for different arrays		1
for different matrix		1
for different compilers.	1
for different CPUs.		2
for different platforms		1
for different purposes		1
for different microprocessors,	1
for functions that		1
for CPU dispatching		1
for CPU brand			1
for other integer		1
for other virtual		1
for other purposes.		2
for other brands		1
for other purposes		2
for other reasons,		1
for other optimizations,	1
for all the			2
for all functions		1
for all static			1
for all these			1
for all public			1
for all modules			1
for all platforms.		1
for all unknown			1
for all applications.		1
for all suitable		1
for all objects.		1
for all Unix-like		1
for all major			1
for all squares:		1
for one array			1
for one segment			1
for integer vector		1
for integer division		1
for integer overflow.		1
for integer constants.		1
for class member		1
for floating point		4
for floating 26			1
for each function		1
for each different		1
for each other			1
for each instruction		1
for each set			1
for each version		2
for each test			1
for each type			1
for each processor		1
for each element		1
for each thread			1
for each allocated		1
for each line			1
for each process		1
for each object.		1
for each iteration		1
for each thread.		3
for each version.		1
for each row			1
for each process.		2
for each calculation.		1
for example to			1
for example if			2
for example when		2
for example i			1
for example 32			1
for example every		1
for example 9.5			1
for compilers that		1
for most purposes		1
for using the			1
for using an			1
for using overloaded		1
for double precision.		2
for size is			1
for size and			1
for Intel CPUs.			1
for Intel CPUs,			1
for pointer conversions.	1
for library functions.		1
for float expressions		1
for multiple variables		1
for multiple purposes.		2
for 64-bit operating		1
for 64-bit Linux		1
for 64-bit integers.		1
for 64-bit Windows).		1
for C++ for			1
for such optimizations		1
for such errors			1
for such applications,		1
for array elements		1
for array bounds		3
for array sizes			1
for many of			1
for many different		2
for many common			1
for many standard		1
for many applications		1
for many computer		1
for many programmers		1
for many platforms,		1
for many years			1
for objects stored		2
for any other			1
for any library			1
for any compile-time		1
for some small			1
for some CPU-intensive		1
for some caveats.		1
for some links.			1
for variables that		1
for variables declared		1
for performance reasons.	1
for very long	1
for very large	2
for software to	1
for software users	1
for software teachers	1
for 32-bit and		2
for 32-bit software	1
for 32-bit Windows	1
for 32-bit Mac		2
for 32-bit Windows,	1
for 32-bit Windows.	2
for 32-bit integers,	1
for branch prediction	1
for branch mispredictions.	1
for member functions.		1
for elements in			1
for elements inside		1
for address calculation		1
for critical applications	1
for less intensive		1
for example, to			2
for example, that		1
for example, you		3
for register variables		1
for register variables.		1
for register storage.		1
for how to   7
for test purposes.	2
for user input		2
for user input.		3
for these variables.	1
for these calculations.	1
for these methods.	1
for even the		1
for sure whether	1
for SSE2 and		1
for SSE2 or		1
for system code.	1
for file input		1
for dynamic allocation.	1
for simple types	1
for simple tasks	1
for simple variables,	1
for simple tasks.	1
for making the		1
for making a		1
for making data		1
for making multiple	1
for making clear	1
for making plug-ins	1
for CPUs with		2
for assembly language	1
for assembly programmers	1
for assembly output.		1
for large data			1
for large libraries		1
for arrays bigger		1
for Windows and			3
for Windows are			1
for Windows applications.	1
for execution speed		1
for big objects			1
for threads that		1
for best performance.		1
for speed is			1
for speed or			1
for speed /O2			1
for specific CPU		2
for single precision		1
for several different		2
for several seconds		1
for several iterations		1
for several reasons.		1
for common mathematical		1
for AMD CPUs			1
for AMD CPUs.			1
for AMD Family			1
for exception handling		1
for small x   2
for small embedded	1
for overflow of		2
for overflow and	1
for overflow by		1
for overflow before	1
for overflow outside	1
for good code		1
for matrix a:		1
for Linux have		1
for Linux systems.	1
for Linux platforms	1
for AVX or		1
for another memory	1
for (i =    29
for support of	1
for doing two	1
for doing some	1
for doing parallel	1
for inline assembly	1
for every element	1
for every four		1
for every iteration	1
for standard tasks	1
for sign and 1
for copy constructors	1
for optimizing execution	1
for optimizing code,		1
for information stored		1
for certain tasks		1
for intermediate results,	1
for fast and	 1
for fast 32-bit	 1
for fast access	 1
for fast division	1
for fast math		1
for (int i		13
for (int n		1
for programs that	1
for programs implemented	1
for Mac OS   1
for multiplication }	1
for handling a	   1
for Boolean vector 1
for intrinsic functions	3
for intrinsic functions,	1
for mathematical functions	1
for high precision		2
for source annotation		1
for running multiple		1
for automatic CPU		1
for automatic updates,		1
for string searching		1
for better metaprogramming	1
for applications that		1
for examples of	 3
for char pointers.	1
for char pointers).	1
for runtime type	1
for actually making	1
for Intel, AMD		1
for later maintenance.	1
for calling from	1
for your compiler	1
for your application	1
for XMM registers;	1
for vectors There	1
for AVX2 and		1
for x86 platforms.	1
for old processors	1
for advanced programmers	1
for switch statements		1
for switch statements,		1
for things like			1
for negative numbers.		1
for example: Use		1
for positive and		1
for positive n.			1
for my optimization		1
for my test			1
for relative addressing		1
for installation and		1
for Windows, while		1
for Windows, Linux		2
for Windows, -msse2,		1
for inlining a			1
for network resources		1
for whole program		2
for level-2 cache		1
for response from		1
for vectorization Not		1
for checking multiple		2
for checking how		1
for level-1 cache		1
for vectorized table		2
for local objects		1
for local references.		2
for constants that		1
for special position-independent	1
for special purposes			1
for further discussion			3
for further optimizations.		1
for further explanation.		1
for further discussion.			1
for further expansions			1
for discussion of			2
for testing multiple			1
for testing single			1
for tasks such				1
for optimization. For			1
for accessing the 1
for accessing a	  1
for accessing arrays	1
for accessing container	1
for accessing list[i].a	1
for adding bounds-checking	1
for 16-bit mode			1
for disk operations		1
for classes. The		1
for N a	     1
for N =	     2
for details on	1
for details about	1
for details (www.agner.org/optimize/testp.zip).	1
for containing thread-specific			1
for initialized variables			1
for improved performance.			1
for updates should				1
for updates each				1
for updates every				1
for parallel processing.			1
for calculating the				4
for calculating a				1
for calculating row				1
for calculating self-				1
for SSE4.1 and	1
for garbage collection.	1
for buffer overflow	1
for future models	1
for unaligned arrays.	1
for significant improvements.	1
for reasons of	2
for reasons explained	4
for setting up		1
for 'this' is		1
for Windows. 10		1
for approximately two	1
for finding the	  4
for finding problems	1
for finding hot		1
for finding elements.	1
for hard disk		1
for usability reasons.	1
for overflow. This	1
for overflow. Example:	1
for false and 1
for temporary storage.	1
for prediction and	1
for background services	1
for background jobs.	1
for interrupt 3.	1
for general function	1
for general purposes	1
for multiplying the	1
for random number	1
for D are  1
for debugging and	1
for debugging facilities,	1
for Linux. It 1
for Linux. 82 1
for Java today.	1
for executing the	1
for free in   1
for ( ;	 1
for exceptions thrown	1
for storing function	1
for storing user	1
for storing text	1
for powers of		1
for polymorphism A	1
for details. The 1
for details. //	 1
for details. Use 1
for details. Note	1
for details. Development	1
for details. Inheritance	1
for speed. Optimizing		1
for giving the			1
for giving specific		1
for converting the		1
for converting a		1
for specifying parallel		1
for self-relative addressing	1
for 32- and	  2
for security reasons	1
for communication and	1
for communication between	1
for avoiding the  1
for avoiding infinite	1
for internal references.	3
for reducing the		1
for strict floating		1
for (c =   4
for lists that	1
for computing mathematical	1
for computing i/2+r.		1
for Basic soon			1
for CPU-intensive code,		1
for present processors		1
for turning off			1
for regular access		1
for true. Boolean		1
for defining constants.		1
for restrictions on		1
for overflow, and		1
for transferring composite	1
for transferring additional	1
for saving a	 1
for saving memory	1
for saving registers	1
for (b +   1
for mixing different	1
for mixing single	1
for (r =   4
for detailed instructions.	1
for application-specific code.	1
for virus scanners	 1
for constants. Integer	 1
for prefetching data	 1
for aligning data	 1
for assuming no		 1
for speed-critical functions	1
for speed-critical functions.	1
for calculations: for		1
for multi-core processing.	1
for generality and		1
for (i=0; i<100;		1
for (i=0; i<n;			2
for implementing a		1
for implementing polymorphic	1
for cleaning up	 1
for improving the	1
for improving code	1
for organizing data	1
for metaprogramming, as	1
for InstructionSet() #include	2
for (x =	     3
for free. Visual     1
for interpreting or  1
for jumping out	 1
for modifying the	1
for vacant spaces.	1
for supporting multiple	1
for supporting multi-threaded	1
for uninitialized variables	1
for putting the	  1
for preventing program	1
for creating and	1
for Unix applications	1
for audio and		1
for updating. The	1
for (c2 =     2
for marketing reasons.	1
for verifying the	1
for WTL applications	1
for millisecond resolution.	1
for "assume no	1
for manipulating floating	2
for parallelization in		1
for AVX. These	    1
for AVX. 5.	    1
for Tuesday, Wednesday	1
for dealing with	1
for trivial tasks	1
for recovering or	1
for studying a 1
for statistics, signal	1
for exclusive access	1
for assigning different	1
for relieving the	1
for shared_ptr than	1
for (r2 =      2
for exploiting fine-grained	1
for IA-32/Intel64, 2009.	1
for transposition of		1
for issuing an	  1
for incrementing a	1
for Linux) 4.	 1
for those who	 1
for investigating performance	1
for vectorization............................................................. 117	1
for detecting errors							       1
for transposing and							       1
for foreground jobs							       1
for minimizing memory							       1
for (j =       1
for auto_ptr. Smart	1
for response. It	1
for vectors........................................................................ 119	1
for holding the									    1
for (c1 =   1
for signifying one	1
for demonstration purposes.	1
for SSE2, preferably		1
for hackers. It			1
for (row =   1
for (r1 =    1
for pow(x,N) where	1
for both, while		1
for combining multiple	1
for (temp =   1
for correctness must	1
for vectorizing mathematical	1
for Nerds at	1
for everything, which	1
for analysis. If	1
for fetching a		1
for Basic. A 1
for details). The	1
for educational purposes	1
for correctness. It		1
for RTTI then	 1
for 80x86 /	 1
for speeding up	 1
for "standard stack	1
for AVX2, or  1
for "function level	1
for raising an		1
for NOT. Instead,	1
for discussions. Turn	1
for (column =	 1
for reserving memory	1
for identifying hot	1
for distinguishing between	1
that the function  6
that the if	   1
that the code	   5
that the compiler  8
that the use	   1
that the memory	   2
that the same	   1
that the only	   1
that the CPU	   5
that the loop	   2
that the cache	   1
that the integer   1
that the floating  1
that the compilers 2
that the most	   1
that the Intel	   3
that the pointer   1
that the two	   1
that the object	   2
that the number	   2
that the 64-bit	   1
that the clock	   3
that the value	   7
that the objects   1
that the variable  2
that the variables 1
that the table	   1
that the software  1
that the order	   1
that the member	   1
that the elements  1
that the address   1
that the critical  1
that the bit	   1
that the operating 1
that the first	   1
that the template  1
that the user	   3
that the system	   2
that the type	   1
that the arrays	   2
that the result	   1
that the processor 1
that the compiled  1
that the list	   1
that the values	   2
that the addresses 1
that the microprocessor	4
that the next		3
that the name		1
that the conversion	1
that the dispatcher	1
that the programmer	2
that the end		2
that the last		1
that the numbers	1
that the operands	2
that the overhead	1
that the C		1
that the syntax		1
that the choice		2
that the level-2	1
that the response	2
that the repeat		1
that the alignment	1
that the compatibility	1
that the final		1
that the amount		1
that the rows		1
that the beginning	1
that the declaration	1
that the background	1
that the linker		1
that the representation	1
that the break		1
that the portability	1
that the behavior	1
that the rest		1
that the loader		1
that the original	1
that the C/C++		1
that the resulting	1
that the branching	1
that the reader		1
that the overall	1
that the remaining	1
that the producer	1
that the occurrence	1
that is a		3
that is not		1
that is an		1
that is more		1
that is used		5
that is most		1
that is two		1
that is member		1
that is stored		1
that is called		2
that is always		1
that is part		1
that is compiled	2
that is big		2
that is allocated	2
that is calculated	1
that is four		1
that is shared		1
that is optimal		1
that is n		1
that is difficult	1
that is longer		1
that is actually	1
that is divisible	3
that is compatible	3
that is obtained	1
that is initialized	1
that is easier		1
that is organized	1
that is added		1
that is almost		1
that is measured	1
that is larger		1
that is AND'ed		2
that is said		2
that is coded		1
that is slow,		1
that is ported		1
that is distributed.	1
that a is		1
that a function		3
that a compiler		1
that a will		1
that a program		1
that a loop		1
that a value		1
that a variable		3
that a call		1
that a template		1
that a new		1
that a user		1
that a must		1
that a specific		1
that a particular	4
that a binary		1
that a positive		1
that a detailed		1
that a user-defined	1
that a low-priority	1
that of yesterday's	1
that for a		1
that are not		5
that are only		1
that are used		14
that are no		1
that are so		1
that are very		1
that are stored		1
that are available	1
that are up		1
that are best		1
that are allocated	1
that are shared		1
that are members	1
that are never		2
that are running	1
that are too		1
that are needed		1
that are difficult	1
that are declared	2
that are bigger		1
that are called.	1
that are based		1
that are intended	1
that are particularly	2
that are scattered	1
that are missing	1
that are coded		1
that are modified	1
that are read-only	1
that are impossible	1
that are fine-tuned	1
that are inherently	1
that can be		16
that can make		1
that can do		1
that can call		1
that can take		1
that can reduce		1
that can go		1
that can prevent	1
that can tell		1
that can possibly	2
that can easily		1
that can benefit	1
that can skip		1
that can steal		1
that it is		15
that it can		9
that it may		3
that it will		1
that it has		2
that it takes		3
that it makes		2
that it cannot		2
that it does		2
that it doesn't		4
that it allows		2
that it becomes		1
that it calls.		2
that it rarely		1
that it writes		1
that it fits		1
that it adds		1
that it jumps		1
that it attempts	1
that if the		1
that if a		1
that if you		1
that if each		1
that code cache		1
that an object		1
that an optimizing	1
that compiler makers	1
that x is     1
that may be   4
that may need 1
that may improve	1
that you are		1
that you can		5
that you have		2
that you should		1
that you want		5
that you compile	1
that you optimized	1
that you see		1
that you don't		2
that you measure	1
that you analyze	1
that have a		1
that have to		1
that have floating	1
that have multiple	2
that have many		1
that have big		1
that have support	1
that have values	1
that have Boolean	1
that have tested	1
that have Booleans	1
that this is		1
that this method	1
that this part		1
that use the		2
that use only		1
that use these		1
that use large		1
that use big		1
that memory access	1
that data are		1
that has a		1
that has to		1
that has no		1
that has been		2
that has already	1
that make it		2
that make function	1
that make member	1
that make up		1
that make vectorization	2
that make developers	1
that different threads	1
that functions which	1
that only one  1
that all the   1
that all code  2
that all floating	1
that all variables	1
that all software	1
that all allocated	1
that all operators	1
that all destructors	3
that one function	1
that one thread		1
that should not		2
that no function	1
that no object		1
that no variable	1
that no overflow	1
that floating point	1
that each value		2
that each calculation	1
that each particular	1
that each intrinsic	1
that each statement	1
that do not		4
that do have		1
that do much		1
that most function	1
that most variables	1
that most software	1
that double precision	1
that pointer aliasing	1
that b is    1
that i can   1
that two pointers	1
that static linking	1
that there is		5
that there are		6
that there was		1
that C++ compilers	1
that also repeats	1
that such feature	1
that such devices	1
that such contrived	1
that many common	1
that many users		1
that takes a		1
that takes more		1
that takes advantage	1
that takes longer	1
that takes care		2
that we are		1
that we can		4
that we may		1
that we have		1
that we do		1
that we want		1
that we don't		2
that we know		1
that we expect		1
that some compilers	1
that some expression	1
that some development	1
that some microprocessors	1
that variables that		1
that software performance	1
that software developers	1
that software projects		1
that branch and			1
that makes code.		1
that makes sure			1
that take a			1
that take only			1
that take up			2
that need to			3
that need relocation.		1
that need relocation,		1
that pointers of		1
that pointers to		1
that pointers do		1
that these functions		1
that these integer		1
that these methods		1
that these directives		1
that they are			1
that they cannot		2
that they always		1
that they are.			1
that always goes		1
that access the			1
that access times		1
that I have 1
that I consider	1
that does the	2
that does floating	2
that must be		1
that work on		1
that calls the		2
that calls at		1
that calls other	1
that calls it.		1
that processor model	2
that big arrays		1
that doesn't call	2
that doesn't cause	1
that doesn't add	1
that doesn't automatically	1
that doesn't handle		1
that doesn't compromise		1
that threads can		1
that several variables		1
that exception handling		1
that overflow can		1
that overflow never		1
that cause the			1
that works for			1
that works on			1
that works best			2
that works well			1
that uses the			1
that uses a			1
that uses pointers		1
that uses few			1
that uses 90%			1
that container classes		1
that support the		1
that support a			1
that support this		1
that support intrinsic		1
that support it.		1
that supported 128-bit		1
that supported 256-bit		1
that contains only		1
that contains integer		1
that contains several		1
that would otherwise		1
that run in			2
that run many			1
that every function		1
that standard library		1
that add functionality		1
that simply prints		1
that certain calculations	1
that certain parts		1
that count how			1
that was used			1
that was unknown		1
that was saved			1
that particular part.		1
that branches can		1
that typically use		1
that typically take		1
that automatically reduces	1
that caching becomes		1
that allows you			2
that allows less		1
that allows bigger		1
that allows overriding		1
that allows direct		1
that don't need			1
that signed integer		1
that model N+1			1
that model N-1			1
that needs to			3
that needs them.		1
that what is			1
that source and			1
that n is   1
that string as	1
that requires several	1
that requires compilation	1
that your code			1
that generate floating		1
that r points 2
that goes one 1
that goes many	1
that goes randomly	1
that 10 is		1
that were not		1
that were unknown	5
that require cleanup	1
that depends only	1
that supports automatic	1
that supports this).	1
that my optimization	1
that p is		1
that p always		1
that index is		1
that modern processors	1
that gives the		3
that comes to		1
that comes with		1
that rely on		2
that rely heavily	1
that produce Boolean	1
that produce streaming	1
that macro parameters	1
that variable. The	1
that fit the   1
that fit their 1
that includes the	1
that allow you		1
that come with		3
that similar solutions	1
that future compilers	1
that seconds remains	1
that something takes	2
that F1 will   1
that checks whether	1
that programmers write	1
that current compilers	1
that contain pure	1
that could benefit	1
that everything that	1
that branch. The	1
that jump between	1
that volatile doesn't	1
that measurements are	1
that reads or	  1
that fits the	  2
that follows a	  1
that computers have	1
that depend on 1
that communication between	1
that memset is	   1
that specifies how 1
that select the	   1
that select between	1
that created a		1
that already works	1
that relies on		1
that runs quite		1
that runs under		1
that runs alone		1
that belong to		1
that performs best	1
that produces a		1
that produces another	1
that u.f and  1
that *p+2 is  2
that chooses between	2
that 150 you 1
that avoids overflow:	1
that seldom occur	1
that begin with		1
that N1 =  1
that appears in	1
that behaves like	2
that consumes most	1
that reflects the	1
that lies r   1
that copies the	1
that allocates memory	1
that scans all 2
that delays execution	1
that holds a		1
that a+b is		1
that decide how		1
that measures the	2
that accesses data	1
that accesses b		1
that thrown exceptions	1
that treats different	1
that loads the		1
that waits for		1
that covered the	1
that begins with	1
that previously required	1
that CParent::Hello() has	1
that owns the	      1
that limits the	      1
that transfers ownership	1
that looses ownership		1
that hackers often		1
that dates back			1
that u <   1
that connect them.	1
that "we don't		1
that draws a		1
that violate or		1
that (b*c) overflows,	1
that saves time		1
that r+i/2 could	1
that crashes the	1
that doesn’t. The	1
that discriminates between	1
that destroys any  1
that relate to	   1
that shares the	   1
that detects an	   1
that matters rather	1
be the one   1
be the optimal	1
be the fastest	1
be the easiest	1
be a time	1
be a class	1
be a very	2
be a member	1
be a register	1
be a simple	1
be a constant	1
be a good	1
be a power	4
be a disadvantage	1
be a better		2
be a difference		1
be a binary		1
be a destructor		1
be a waste		2
be a hundred		1
be a compromise		1
be a type.		1
be a bottleneck		1
be a viable		2
be a time-consumer	1
be a slight		1
be a million		1
be a level-3		1
be of the		1
be of some		1
be to include		1
be in the		3
be as small		1
be as standardized	1
be an efficient		3
be an advantage		2
be an expression	1
be an integer.		1
be an obvious		1
be an annoying		1
be an infinite		1
be time consuming	1
be more efficient	2
be more convenient	1
be more (128		1
be at a	1
be different for	1
be different sizes,	1
be because the		1
be only one		2
be used to		2
be used in		3
be used for		14
be used if		5
be used with		1
be used on		1
be used as		5
be used when		1
be used only		2
be used where		1
be used without		1
be used most.		1
be used freely		1
be cache contentions	1
be no extra		1
be no certain		1
be set then		1
be set up		1
be two or		1
be efficient whether	1
be possible to		6
be so many  1
be so high  1
be 2 In	    1
be very efficient	1
be very long		2
be very useful		2
be very inefficient	1
be very helpful		1
be faster than		2
be faster when		1
be faster despite	1
be stored in		10
be stored with		1
be stored on		1
be stored at		2
be stored together	3
be stored together......................................	1
be called when							1
be called from							3
be called only							1
be called before						1
be called whenever						1
be 8 and  1
be less than	3
be less efficient	2
be 64 bits		1
be useful to		6
be useful in		6
be useful for		5
be useful if		1
be useful when		1
be even faster		1
be sure that		2
be 0 or	2
be cases where	2
be available in	1
be important if	1
be accessed with	2
be accessed from	2
be accessed approximately	1
be accessed sequentially	1
be while (0 1
be compiled with	1
be compiled as		1
be compiled three	1
be necessary to		3
be necessary in		1
be allocated for	1
be allocated dynamically	3
be allocated dynamically.	2
be done in   1
be done by   2
be done with 5
be done on   1
be done as   1
be done at   1
be done outside	1
be done manually	1
be optimized if		1
be optimized by		1
be optimized to:	1
be optimized further.	1
be inside the		1
be calculated in	1
be calculated by	6
be calculated with	1
be calculated as	3
be calculated more	1
be calculated at	1
be calculated using	1
be calculated independently.	1
be advantageous to		7
be advantageous or		1
be advantageous if		2
be advantageous when		1
be implemented in		6
be implemented with		1
be implemented as		5
be implemented like		1
be implemented either		2
be known at    1
be 1 b	 1
be able to	12
be able do	1
be certain that	1
be shared between	1
be quite a		1
be quite inefficient	1
be quite time-consuming	1
be quite tedious	1
be quite substantial.	1
be used. If		1
be used. We		1
be used. Web		1
be fast in		1
be both cheaper		1
be optimal to		2
be optimal in		1
be signed or		1
be separate for		1
be put into 1
be put away 1
be three or 1
be better to	2
be better than	1
be better because	1
be too small.		1
be too worried		1
be too small,		1
be needed for		1
be needed because	1
be difficult to		3
be transferred in	5
be longer than 1
be read and    1
be read into   1
be read before 1
be aligned by  3
be linked into 2
be linked together	1
be linked either	1
be declared in		1
be declared const	1
be declared inside	2
be declared volatile.	1
be higher due		1
be bigger than		1
be divisible by		2
be called. It		1
be based on		1
be made for		1
be made more		1
be made available	1
be made about		1
be made much		1
be made smaller		1
be made local.		1
be just as		1
be smaller as		1
be relevant when	1
be replaced by		7
be replaced with:	2
be negative so		1
be tested in		1
be tested with		1
be tested on		2
be tested under		1
be predicted or		1
be predicted by		1
be predicted quite	1
be predicted depends	1
be predicted well.	1
be predicted perfectly	2
be predicted perfectly.	1
be loaded from		1
be loaded at		2
be loaded only		1
be loaded into		1
be loaded every		1
be loaded until		1
be loaded anyway.	1
be C or	  1
be compatible with	3
be dynamically created	1
be avoided in  1
be avoided by  9
be avoided on  1
be avoided when	1
be avoided because	2
be avoided unless	1
be 2. The  1
be particularly time	1
be given a	1
be given in	1
be limited by	1
be vectorized if	2
be vectorized with	1
be vectorized as	1
be vectorized automatically.	1
be inlined for			1
be inlined or			1
be inlined by			1
be safe to 1
be safe if 1
be further tested	1
be reduced to		2
be reduced to:		1
be clear from		1
be obtained in		1
be obtained by		1
be obtained with	2
be overloaded or	1
be possible. Template	1
be changed to		2
be changed by		1
be changed without	1
be changed to:		2
be changed freely.	1
be true anyway.		1
be initialized to	2
be initialized when	1
be improved is 1
be improved in 1
be improved by 8
be loading the 1
be below the   1
be copied or   1
be copied into 1
be copied simply	1
be invalid and		1
be invalid in		1
be invalid if		1
be used, but		1
be used, even		1
be organized as		1
be organized into	1
be organized so		2
be enough to 1
be added to  1
be added at  1
be situations where	1
be chosen based		1
be scattered around	2
be applied to		4
be critical. The	1
be critical. Therefore,	1
be mentioned here:	1
be mispredicted for	1
be mispredicted even	1
be mispredicted (See	1
be mispredicted whenever	1
be mispredicted 50%		1
be standardized and		1
be false regardless		1
be converted to			4
be designed so			1
be fragmented and		1
be 8, 16      1
be preferred to	1
be interpreted as	1
be determined in	1
be determined by	2
be determined with	1
be easily available	1
be allowed and		1
be distributed to	2
be called, or  1
be called, even	1
be slower or	1
be slower than	1
be expensive in	1
be saved in  1
be saved from	1
be saved either	1
be aware of	3
be aware that	2
be aware of.	1
be available, we	1
be measured separately.	1
be equal to 1
be expected to	1
be expected for	1
be expected that	1
be convenient to	1
be convenient for	1
be poor because		1
be static, as		1
be evaluated if		2
be completely contained	1
be completely unrolled	1
be permissible if	1
be mixed with  1
be turned into 1
be overcome by 1
be worth the   2
be obvious to  2
be swapped to  1
be portable to 1
be executed as 1
be executed faster	1
be split up 1
be increased to	1
be increased by	1
be divided into	2
be seen in 1
be necessary. If	1
be updated to 1
be updated every	1
be combined into	1
be written in		1
be preferable to	1
be said that  1
be true. template<>	1
be needed, however,	1
be extended to		1
be expressed as		4
be cleaned up		1
be cleaned up,		1
be cached. This		1
be prevented in		1
be prevented by		1
be eliminated if	3
be eliminated completely.	1
be illustrated by		1
be returned in 2
be found in 2
be found elsewhere.	1
be coded in		1
be represented with	1
be represented as	1
be identified by	1
be kept small 1
be kept entirely	1
be selected during	1
be multiplied by	2
be obsolete. But	1
be obsolete. Programmers	1
be unable to 2
be modified by	2
be carried out	1
be hidden by	1
be performed with	1
be removed after	1
be considered a		1
be considered metaprogramming	1
be spaced by  2
be filled up  1
be filled up. 1
be expected. The	1
be solved by 2
be stored. All	1
be inlined. But	1
be inlined. (In	1
be infinity or	1
be taken into	3
be handled in	1
be moved out	2
be joined into	2
be joined together	1
be placed in		2
be placed immediately	1
be sufficient for	1
be evicted when		1
be evicted from		1
be manipulated with	1
be freed before		1
be justified in		1
be justified for	1
be vectorized, because	1
be vectorized, but	1
be disabled in 1
be ruled out   2
be reused elsewhere.	1
be pure. This		1
be bypassed when	1
be achieved more	1
be visible at		1
be overwritten, and	1
be annoyingly high	1
be controlled. The	1
be controlled. Small	1
be worthwhile to	1
be irrelevant within	1
be careful when		1
be profitable (see	1
be negative. The	2
be defined. The		1
be obtained. If		1
be obtained. In		1
be predicted. The	1
be predicted. This	1
be fed directly		1
be cached more		1
be shared. You		1
be shared. Any		1
be optional and		1
be deleted. User	1
be left out 1
be wrapped into	1
be slower. Many	1
be optimally aligned.	1
be fetched from		1
be avoided, if		1
be avoided, there	1
be avoided. 37		1
be misleading reports	1
be repeated 1024/4	1
be moved. A 1
be installed. The	1
be mispredicted, which	1
be tolerated. PGI	1
be regarded as		1
be obeyed. Copy		1
be restored before	1
be undesired. Example:	1
be passed as  1
be broken up. 1
be arranged in	1
be cross- compiled	1
be combined. For	1
be improved. 3.2	1
be rounded to		1
be straightforward. The	1
be prepared for	    1
be non-zero, and    1
be saved. Any	    1
be programmed in    1
be reached with	    1
be renewed. Context 1
be weighed against  1
be reduced. This    1
be recycled? There  1
be postponed until  1
be omitted, of	    1
be considered. A    1
be speeded up  1
be used: //    1
be added. This 1
be adjusted if 1
be platform-independent and	1
be made) then		1
be reloaded eight	1
be evicted. Don't	1
be mitigated by		1
be signed. Be		1
be emphasized that	1
be noticeable but	1
be reinstalled and	1
be ameliorated by	1
be scheduled in		1
be followed by		1
be caused by		1
be wired for		1
be responded to		1
be ignored if		1
be re-calculated every	1
be accomplished by	1
be mainstream next	1
be resized in 1
be overridden in	1
be huge). Far 1
be reversed if	1
be propagated through	1
be annoying. We		1
be accessed. Pointer	1
are the same 3
are the integers	1
are the following:	1
are a number		2
are a few		3
are a scarce		2
are a couple		1
are of course		1
are in fact		5
are in doubt		1
are for those		1
are that software	1
are as fast		1
are as follows:		1
are not used		2
are not very		1
are not stored		1
are not sure		1
are not always		4
are not necessary	1
are not optimized	1
are not known		1
are not supported	1
are not doing		1
are not well		1
are not able		1
are not used.		1
are not recommended	1
are not compatible	3
are not enough		1
are not critical.	1
are not fully		1
are not suitable	1
are not permissible	2
are not backwards	1
are not necessarily	1
are not optimal.	1
are not cached.		1
are not satisfied	1
are not overlapping	1
are not computationally	1
are not suited		1
are not testing.	1
are not accessible	1
are not yet		1
are not safe,		1
are not affected	1
are not used).		1
are not reproducible.	1
are time consuming.	1
are more efficient	2
are more useful		1
are more important	1
are more frequent	1
are more predictable	1
are then you		1
are then linked		1
are then output		1
are different for	1
are different ways	1
are different opinions	1
are only available	2
are only four		1
are only slightly	1
are other cache		1
are other possible	1
are used in		8
are used for		3
are used by		2
are used with		1
are used at		1
are used only		1
are used most		1
are used many		1
are used together	6
are used near		1
are used twice		1
are one byte		1
are integer expressions	1
are no cache		1
are no long		1
are no instructions	1
are no big		1
are no copy		1
are no caching		1
are no longer		2
are no checks		1
are set to		1
are floating point-to-integer	1
are most efficient		2
are most critical.		1
are using the			2
are using and			1
are using an			2
are using vector		1
are using functions		1
are using single		1
are using advanced		1
are using 8-bit			1
are using __fastcall.		1
are using unions		1
are double precision		1
are two or 2
are two different	1
are two versions	1
are two things		1
are two main		1
are two commonly	1
are there between	1
are also other		2
are also stored		4
are also 4		1
are also situations	1
are also available.	1
are also available,	1
are also deallocated	1
are also third-party	1
are also included.	1
are efficient because	1
are many function	1
are many functions	1
are many cases		1
are many allocations	1
are many branches):	2
are possible only	1
are objects in		1
are some differences	1
are some examples:	1
are so many		1
are so big		1
are so small		1
are so fast		1
are so expensive	1
are variables than	1
are very difficult	1
are very similar	1
are very fast.		1
are very expensive.	1
are very smart.		1
are 32-bit integers,	1
are faster than		2
are stored in		10
are stored can		1
are stored on		3
are stored as		1
are stored together	1
are stored near		1
are stored consecutively	1
are called and			1
are called from			1
are called every		1
are called global		1
are called near			1
are called accumulators.	1
are critical time		1
are critical resources.		1
are less efficient		3
are less likely			1
are less efficient.		1
are less strict			1
are less expensive.		1
are less susceptible		1
are first compiled		1
are 64 bits			1
are often used			3
are often much			1
are often inlined		1
are often waiting		1
are often conflicting		1
are often mispredicted.		1
are often abusing		1
are often fluctuating		1
are often unreliable.		1
are useful for			7
are useful when			1
are sure the			1
are sure to			4
are sure that			2
are sure you			1
are always stored		1
are always available		1
are always calculated		1
are always transferred		1
are always resolved		1
are out of 1
are part of	1
are cases where	1
are available to	1
are available in	3
are available for	4
are available if	1
are available as	1
are available from	2
are available at	1
are up to     1
are making a  1
are making programs	1
are making branches	1
are accessed in		7
are accessed on		2
are accessed very	1
are accessed through	5
are accessed equally	1
are accessed backwards	1
are accessed consecutively	1
are accessed sequentially.	2
are accessed column-wise.	1
are accessed row-wise,		1
are compiled with		1
are compiled without		1
are best at  1
are necessary then	1
are specific advantages	1
are much higher		1
are single instructions	1
are several different	3
are several ways	1
are several factors	2
are allocated and	2
are allocated in	1
are allocated resources	1
are integers or		1
are good for 2
are done with	2
are done at	1
are done only	1
are done under	1
are done implicitly	1
are therefore as	2
are optimized for	1
are optimized well,	1
are explained in	2
are explained on	1
are calculated faster	1
are calculated much	1
are four kinds 1
are advantageous for	1
are implemented in	1
are implemented by	1
are implemented with	1
are implemented as	2
are supported by	3
are eight floating	1
are likely to		1
are doing the		1
are doing a		1
are doing different	1
are doing exactly	1
are simply put		1
are simply treated	1
are able to		8
are certain that	1
are certain restrictions	2
are shared between		1
are quite costly		1
are used. a			1
are used. It			1
are used. See			2
are used. Example:		1
are used. Such			1
are used. Do			1
are used. Conversions		1
are fast in			1
are both positive.		1
are cases, however,		1
are particular advantageous	1
are typically stored		1
are typically small		1
are typically specified		1
are preferably aligned		1
are members of 2
are intrinsic instructions	1
are never used			2
are never called.		1
are never modified		1
are various function		1
are various methods		1
are various ways		5
are various things		1
are various discussion		1
are various profilers		1
are various alternatives	1
are running in			2
are running this		1
are three ways			2
are better at			1
are too large			1
are too big			1
are too small			1
are needed from			1
are needed even			1
are difficult to		2
are transferred in		7
are transferred by		1
are transferred on		2
are aligned to	1
are aligned or	1
are aligned by	1
are aligned at	1
are actually called	1
are actually able	1
are actually quite	1
are actually reducing	1
are linked together.	1
are declared in		1
are declared as		1
are declared outside	1
are declared whenever	1
are higher for		1
are bigger than		1
are usually stored	1
are usually included	1
are usually dealt	1
are called. The		2
are called. A		1
are called. Therefore,	1
are based on		8
are just as		1
are core clock		1
are replaced by		1
are negative or		1
are predicted most	1
are predicted well	2
are loaded at 1
are loaded into	1
are relative to	1
are intended to	1
are intended for	1
are slow unless		1
are inefficient when	1
are described in	1
are including a		1
are particularly critical	1
are particularly important	1
are particularly fast		1
are particularly critical.	1
are particularly problematic	1
are given in	 2
are given on	 1
are given below. 1
are sometimes more	1
are sometimes able	1
are inlined so		1
are special cases	1
are further described	1
are testing contains	1
are 100 floating	1
are writing to		1
are adding -100		1
are containers 93	1
are discussed in	2
are discussed below.	2
are reading and		1
are defined with	1
are defined as		1
are identical to	1
are identical so	1
are used, there		1
are used, while		1
are not. Supports	1
are organized as	1
are organized into	1
are approximately six	1
are situations where	1
are scattered around	2
are scattered everywhere	1
are scattered randomly		1
are independent then		1
are provided in	2
are provided below,	1
are 6 unused 1
are inefficient. If	1
are search requests	1
are executed. However,	1
are usability issues,	1
are pure functions,	1
are mentioned below.	1
are fully compatible	1
are included in		1
are temporary intermediates,	1
are frequent sources		2
are now used 1
are equally efficient	2
are equally likely	1
are equally efficient.	1
are equally near	1
are designed to		2
are listed in		4
are listed on		1
are preferred because	1
are zero. Zero		1
are exactly the		1
are exactly as		1
are resolved before	1
are poorly predictable.	1
are allowed to		1
are allowed in		1
are serious limitations	1
are disadvantages of	1
are generally not 1
are generally very	1
are instances of	1
are hardly relevant	1
are saved in		1
are integers, while	1
are highly system	1
are highly optimized	2
are highly optimized,	1
are waiting for		1
are available, i.e.	1
are powers of  1
are constant. 14.2	1
are expected to		1
are converting a	1
are costly and 1
are evaluated in	1
are evaluated every	1
are deallocated when	1
are permissible in	1
are swapping column	1
are swapped then	1
are becoming more	1
are becoming better	1
are becoming increasingly	1
are finished. This		1
are generated from		1
are equivalent to		1
are relatively costly		1
are relatively cheap		1
are frameworks that		1
are safer to   1
are combined by	1
are currently available,	1
are sufficiently large		2
are needed, and	 1
are needed, or	 1
are needed, but	 1
are running. Such	1
are optimal. Best-case	1
are guaranteed to	1
are missing in 2
are extended to	1
are cleaned up	1
are image processing,	1
are uncached or		1
are returned by		1
are coded in 1
are smaller. The	1
are identified by	2
are kept in    1
are incompatible with	2
are normally compiled	1
are inferior to		1
are auto_ptr and	1
are modified should	1
are satisfied with	2
are assuming that	1
are long. This		1
are implemented. Use	1
are spaced a	 1
are comparisons, etc.	1
are separated by 2
are annoying to	 1
are supplied in	 1
are overriding Intel's	2
are stored. The		1
are competing for	1
are read-only can	1
are indeed of 1
are impossible with	1
are type-casted to	1
are aligned. It	1
are disabled will	1
are CPU-specific and	1
are inherent performance	1
are uninitialized or		1
are summarized in 1
are summarized below.	1
are smarter ways	2
are capable of		1
are eliminated. Code	1
are unstable due	1
are lost. It 1
are mutually incompatible.	2
are properly aligned		1
are fine-tuned for		1
are sharing the			1
are cached as			1
are relocated by		1
are dealing with		1
are created. Far		1
are covered in			1
are overdetermined in		1
are overdetermined Boolean	1
are unnecessary for		1
are produced regularly.		2
are lots of  1
are wrapped into	1
are fetched and		1
are accessible from	1
are primitive operations	1
are inherently serial,		1
are common, and			1
are constructed. All		1
are prone to	 1
are wrapper classes	1
are sufficient, and	1
are advised to	1
are seeing an	1
are doing. See	1
are among the	1
are cumbersome to	1
are dominating and	1
are instantiated at	1
are universal, flexible,	1
are undocumented. 2.7		1
are aligned, and  1
are offering profiling	1
are areas where		1
are unavoidable. It	1
are indexed in	 1
are feeding an	 1
are unacceptable. Each	1
are hundreds of	  1
are modified, if  1
are compiler-specific. You	1
are dominating. At     1
are short. In	1
are met: the	1
are cheap, in	1
are costless in	1
are obscured in	1
are different. 64-bit	1
are risking to 1
are confined to	1
are satisfied. The	1
are satisfied: 1.	1
are breaking out	1
are CPLDs and		1
are relying on		1
are uninitialized, if	1
are removed, all   1
are incremental or 1
are limiting factors	1
are unrelated to	1
can in most   1
can be a      6
can be an     3
can be time   1
can be different	1
can be used		18
can be set		2
can be very		4
can be stored		2
can be called		1
can be less		1
can be 64		1
can be useful		12
can be important	1
can be accessed		5
can be necessary	1
can be allocated	5
can be done		7
can be optimized	3
can be calculated	11
can be advantageous	3
can be implemented	11
can be shared		1
can be quite		4
can be used.		2
can be signed		1
can be difficult	1
can be read		1
can be linked		2
can be made		5
can be replaced		6
can be predicted	4
can be loaded		2
can be avoided		8
can be particularly	1
can be given		1
can be vectorized	1
can be further		1
can be reduced		2
can be obtained		2
can be changed		4
can be initialized	2
can be improved		8
can be copied		3
can be invalid		1
can be used,		1
can be organized	1
can be added		2
can be chosen		1
can be applied		2
can be critical.	2
can be mentioned	1
can be mispredicted	2
can be converted	3
can be 8,		1
can be determined	2
can be expensive	1
can be saved		1
can be expected		3
can be completely	1
can be permissible	1
can be turned		1
can be overcome		1
can be increased	2
can be divided		2
can be updated		1
can be combined		1
can be said		1
can be extended		1
can be expressed	3
can be prevented	2
can be eliminated	2
can be illustrated	1
can be returned		2
can be found		2
can be coded		1
can be represented	2
can be carried		1
can be considered	1
can be expected.	1
can be solved		2
can be inlined.		1
can be moved		1
can be joined		1
can be placed		1
can be manipulated	1
can be justified	1
can be vectorized,	1
can be disabled		1
can be ruled		1
can be reused		1
can be bypassed		1
can be annoyingly	1
can be defined.		1
can be obtained.	1
can be predicted.	1
can be fed		1
can be shared.		1
can be left		1
can be wrapped		1
can be fetched		1
can be broken		1
can be arranged		1
can be cross-		1
can be combined.	1
can be improved.	1
can be programmed	1
can be reduced.		1
can be omitted,		1
can be speeded		1
can be used:		1
can be made)		1
can be ameliorated	1
can be wired		1
can be accomplished	1
can be overridden	1
can be propagated	1
can be accessed.	1
can not only		1
can not do.		1
can you assume		1
can have one		1
can have no		1
can have any		1
can have eight		1
can have quite		1
can use the		7
can use a		2
can use for		1
can use it		1
can use this		3
can use vector		1
can use only		1
can use 64-bit		1
can use any		1
can use standard	1
can then be		1
can then use		1
can then run		1
can make a		1
can make function	1
can make an		2
can make this		1
can make use		1
can make two		1
can make sure		1
can make dynamic	1
can make arrays		1
can make certain	1
can make thread-local	1
can only be		2
can only have		1
can only hope		2
can set multiple	1
can set up		1
can do the		1
can do is		1
can do a		2
can do to		2
can do and		1
can do with		1
can do this		2
can do because		1
can do simple		1
can do while		1
can do calculations	2
can do four		1
can do another		1
can do mathematical	1
can do whole		1
can do out-of-order	1
can do arithmetic	1
can double the		1
can also be		11
can also use		1
can also find		1
can also eliminate	1
can return with		1
can call the		1
can call all		1
can call C1::f		1
can take the		1
can take more		1
can take several	2
can take advantage	6
can take quite		2
can take care		2
can often be		3
can often optimize	1
can often happen	1
can often reveal	1
can test or		1
can even be		1
can access internal	1
can avoid the		3
can avoid this		2
can avoid virtual	1
can avoid it.		1
can avoid hyperthreading	1
can cause the			1
can cause other			1
can cause all			1
can cause cache			1
can cause branch		1
can cause problems		1
can cause caching		1
can cause contentions		1
can cause errors		1
can cause overflow.		1
can cause unpredictable		1
can cause complications		1
can cause severe		1
can cause holes			1
can therefore be		2
can therefore suffer		1
can therefore conclude		1
can get the   1
can get very  1
can get answers	1
can check the	2
can check if	1
can run in	1
can run only	1
can run eight	1
can run optimally	1
can calculate the	1
can calculate a		1
can calculate that	1
can calculate which	1
can calculate each	1
can calculate how	1
can store the 1
can optimize away	1
can optimize specifically	1
can replace a			1
can replace an			1
can replace all			1
can replace j			1
can automatically replace	1
can automatically generate	1
can automatically detect	1
can see the	  1
can see that	  2
can never be	  2
can block the	  1
can read about	  1
can give some	  1
can look like	  1
can actually reduce	1
can assume that		4
can improve the		3
can improve this	1
can improve performance	1
can improve optimizations	1
can improve search		1
can reduce the			2
can reduce other		1
can reduce any			1
can reduce some			1
can reduce simple		1
can reduce them			1
can start a			1
can go more			1
can change the			3
can change their		1
can change what			1
can become a			1
can become very			1
can become imprecise		1
can turn on			1
can rely on			2
can produce no			1
can sometimes be		4
can sometimes take		1
can still be  2
can still run 1
can still give	1
can prevent the	1
can shift out	1
can save a	1
can save cache	1
can save several	1
can tell it		1
can tell how		1
can divide by		1
can clear or		1
can predict the		1
can predict where	1
can possibly be		2
can possibly block	1
can possibly improve	1
can possibly throw	1
can execute the		1
can execute a		1
can execute instructions	1
can convert an			1
can convert example		1
can handle eight		1
can occur in			1
can occur if			1
can occur at			1
can insert nontemporal		1
can align the			1
can expect a			1
can expect 64-bit		1
can modify x			1
can modify x,			1
can not. Static			1
can happen in			1
can happen that			1
can happen if			1
can happen with			1
can define in			1
can contain either		1
can help the			1
can multiply a			1
can multiply by			1
can share the			3
can now be			1
can easily be			1
can easily optimize		1
can easily become		1
can easily justify		1
can spend a			1
can generally assume		2
can hold many 1
can hold 8    1
can hold four 1
can hold e.g. 1
can eliminate this	1
can eliminate one	1
can eliminate common	1
can eliminate branches,	1
can increase the	1
can detect that		1
can prefetch the	1
can benefit from	2
can consume a		2
can lead to 3
can overlap the	1
can obtain most	1
can obtain much	1
can move out	1
can move outside	1
can disable exception	2
can begin the		1
can force a		1
can run. Some		1
can skip large		1
can probably be		1
can open the 1
can bypass the	2
can compute a	1
can proceed unattended.	1
can emulate a		1
can throw. In		1
can occur, but		1
can influence the	1
can add, remove		1
can see, it		1
can be, for		1
can subtract this	1
can roughly estimate	1
can build code		1
can steal the		1
can incur a		1
can surely rely		1
can toggle multiple	1
can handle. Waiting	1
can learn from		1
can safely assume	1
can overwrite the	1
can exceed 2  1
// of function	2
// The child	1
// The purpose	1
// or from	1
// function to	3
// function prototypes	1
// if above 2
// This is  5
// This function	2
// This triangle	1
// this function	1
// will give		1
// It will		1
// Example 13.1		1
// Example 16.2		1
// Example 14.9		1
// Example 14.8		1
// Example 16.1		1
// Example 9.3		1
// Example 8.26a	1
// Example 12.2		1
// Example 14.6		1
// Example 14.28	1
// Example 14.30	1
// Example 7.2		1
// Example 7.1		1
// Example 7.8		1
// Example 14.10	1
// Example 14.11	1
// Example 8.4		1
// Example 8.7		1
// Example 7.21		1
// Example 9.6b.	1
// Example 9.5a		1
// Example 7.7		1
// Example 7.11		1
// Example 7.12		1
// Example 11.3		1
// Example 7.22		1
// Example 7.23		1
// Example 7.20		1
// Example 7.27		1
// Example 7.24		1
// Example 7.25		1
// Example 7.28		1
// Example 9.4		1
// Example 7.14		1
// Example 7.16		1
// Example 7.17		1
// Example 7.13		1
// Example 7.19		1
// Example 7.18		1
// Example 12.5.	1
// Example 8.26b	1
// Example 14.12b	1
// Example 14.14b	1
// Example 15.1c.	1
// Example 14.14a	1
// Example 8.15a	1
// Example 14.13b	1
// Example 9.6a		1
// Example 12.1a.	1
// Example 14.19	1
// Example 14.1c	1
// Example 14.23b	1
// Example 11.2b	1
// Example 11.1a	1
// Example 11.1b	1
// Example 7.15b	1
// Example 15.1b.	1
// Example 14.26	1
// Example 14.27	1
// Example 14.23	1
// Example 8.21		1
// Example 14.5b	1
// Example 14.5a	1
// Example 7.6.		1
// Example 9.5b		1
// Example 13.2.	1
// Example 7.40a	1
// Example 7.40b	1
// Example 7.40c	1
// Example 14.3a	1
// Example 14.3b	1
// Example 11.2a	1
// Example 12.4a.	1
// Example 8.9b		1
// Example 8.9a		1
// Example 8.23b.	1
// Example 14.1b	1
// Example 14.1a	1
// Example 8.3a		1
// Example 12.4c.	1
// Example 12.6.	1
// Example 7.29b	1
// Example 7.29a	1
// Example 7.34a.	1
// Example 14.13c	1
// Example 14.13a	1
// Example 8.15b	1
// Example 7.10b	1
// Example 7.10a	1
// Example 12.4e.	1
// Example 8.5b		1
// Example 8.5a		1
// Example 7.31b	1
// Example 7.31a	1
// Example 7.43b.	1
// Example 14.4b	1
// Example 15.1a.	1
// Example 8.13a	1
// Example 8.13b	1
// Example 14.15b	1
// Example 9.1a		1
// Example 9.1b		1
// Example 7.33b	1
// Example 8.11b	1
// Example 8.11a	1
// Example 7.38b.	1
// Example 8.1b		1
// Example 8.1a		1
// Example 12.9b.	1
// Example 8.16		1
// Example 8.17		1
// Example 8.18		1
// Example 7.42		1
// Example 7.45		1
// Example 7.44		1
// Example 7.4.		1
// Example 12.8a.	1
// Example 7.35b	1
// Example 7.35a	1
// Example 8.23a.	1
// Example 12.8b.	1
// Example 14.18c	1
// Example 8.2a		1
// Example 8.2b		1
// Example 14.7b.	1
// Example 7.9b		1
// Example 7.9a		1
// Example 8.25		1
// Example 8.20		1
// Example 8.22		1
// Example 12.9a.	1
// Example 8.3b		1
// Example 7.38a.	1
// Example 7.43a.	1
// Example 14.21.	1
// Example 7.32a	1
// Example 14.22b	1
// Example 14.22a	1
// Example 15.1d.	1
// Example 14.18a	1
// Example 14.18b	1
// Example 9.2b		1
// Example 9.2a		1
// Example 8.24.	1
// Example 7.32b	1
// Example 8.6a		1
// Example 8.6b		1
// Example 7.15a.	1
// Example 7.5.		1
// Example 14.17b	1
// Example 14.7a.	1
// Example 14.16a	1
// Example 7.26b	1
// Example 7.26a	1
// Example 8.19.	1
// Example 8.10b	1
// Example 8.10a	1
// Example 7.30b	1
// Example 7.30a	1
// Example 7.3.		1
// Example 7.39		1
// Example 7.37		1
// Example 7.36		1
// Example 12.1b.	1
// Example 8.12a	1
// Example 8.12b	1
// Example 12.4b.	1
// Example 12.4d.	1
// Example 14.12a	1
// Example 8.14b	1
// Example 8.14a	1
// Example 7.33a	1
// Example 8.8b		1
// Example 8.8a		1
// Example 12.7.	1
// Example 7.34b.	1
// Example 14.16b	1
// Example 14.17a	1
// Example 14.15a	1
// Example 14.2a	1
// Example 14.2b	1
// Example 14.29	1
// Example 14.24	1
// Example 14.25	1
// Example 14.20	1
// Example 14.4a	1
// Example 7.41a	1
// Example 7.41b	1
// vector class		1
// make dispatcher	1
// CPU dispatching	1
// loop for		1
// loop through		2
// loop columns		2
// If Microsoft		1
// used for		1
// set a		2
// set sign		2
// do nothing		1
// number of		3
// C++ casting		1
// return 0		1
// return y		1
// return x^10		1
// 2 unused		1
// 2 bytes.		2
// You may		1
// table of		1
// 32-bit Windows,	1
// 32-bit Linux,	1
// makes intermediate	1
// 4 unused		1
// 4 bytes.		3
// call polymorphic	1
// call transpose	1
// 8 bytes.		2
// For unused		1
// test bits		1
// test sign		1
// always 1		1
// SSE2 //		1
// SSE2 version		2
// SSE2 supported	2
// constant data	1
// Gnu compiler,	1
// Windows syntax	1
// result =		2
// Use template		1
// Use signed		1
// Use mask		1
// Use ReadTSC()	1
// specific version	1
// Linux syntax		1
// AVX version		2
// AVX supported	2
// get next		1
// check if		1
// Function to		8
// Function pointer	2
// Function template	1
// Function prototype	1
// add the  1
// add 2    1
// add elements	1
// add n	1
// sign bit	1
// copy a	2
// ... for	1
// ... }	1
// next four	1
// n factorial	1
// Make the	1
// Make a	6
// Make all	1
// Make array	1
// Make dynamic	1
// Make three	1
// Table of	2
// Table //	2
// Table lookup	1
// Floating point	1
// AVX2 //  1
// constructor //	1
// constructor initializes	1
// go to       1
// Loop to     1
// Loop with   1
// Loop through	1
// Loop counter	2
// Loop r1	1
// Loop r2	1
// No cache	1
// No error	1
// sum operator	1
// exponent +	3
// Define function	2
// Define vector	4
// Define size		1
// Define SSE2		1
// Define vectors	1
// Define macro		2
// Define biggest	1
// square x		1
// Any function		1
// align by		1
// align table		1
// SSE4.1 //		1
// header for		1
// swap elements	2
// Store the		4
// Store result		1
// f is	 2
// define a	1
// define function	1
// define matrix	1
// define fprintf	1
// Load eight		8
// multiply //		1
// 6 unused 1
// default constructor	1
// Time // 1
// Time before	1
// Time difference	1
// everything is	2
// parent class.	1
// Virtual function	1
// Virtual call		1
// Template for		1
// Cache contentions	1
// Now call		1
// Now 1.0		1
// Add 2		2
// Number of		1
// SSE3 required	1
// Set function		1
// Set pointer		2
// Set sign		1
// INSTRSET ==		1
// Roll out 5
// Critical function	1
// Critical innermost	1
// AND each 2
// SIZE must	1
// OR the	1
// Array of	1
// Array with	1
// Array size	1
// Calculate polynomial	1
// Only for  1
// Division by	1
// n! //    1
// n! int   1
// s +=	    1
// Writes "Hello	4
// x^4 // 2
// x^4 F32vec4	1
// Multiply b	2
// u.f >    1
// Header file	2
// C-style type	1
// Bounds checking	1
// Same as		1
// MOVNTQ _mm_empty();	1
// Still faster		4
// Faster if		2
// After first		2
// Return the		1
// Return a		1
// Return reference	1
// fractional part	3
// Index out  1
// At the     1
// Get supported	2
// Get upper		1
// sum, initialize	1
// Check that		1
// Check if		1
// Call to		1
// Call critical	2
// Structure of		1
// 400 bytes.		1
// x^2 //		1
// x^2 float		1
// Full template	2
// (N &	1
// Enable exception	1
// Lowest version	2
// Initialize to	1
// Initialize loop	1
// x^n //     1
// (time after)	1
// Volatile to	1
// x^10 //  1
// _controlfp(0, _EM_OVERFLOW);	2
// Polynomial coefficients	2
// Increment loop		1
// Overflow may			1
// General case,		1
// ipow faster			1
// (This is			1
// Returns a			1
// Returns time			1
// Portability note:		1
// Catch floating		1
// Catch exceptions		1
// Update induction		2
// Mixing float			1
// Or #include			1
// EMMS }			1
// Approximate exp(x)		2
// initialize sum		1
// Remove right-most		1
// Compare each			2
// flip sign			1
// incremented every		1
// Repeat NumberOfTests		1
// Prevent optimizing		1
// Dispatcher void		1
// Re-do the  1
// x^8 //     1
// Non-polymorphic functions	1
// Error: lowest   1
// Safe []	   1
// Output array	   1
// Generic version 1
// polynomial(x) = 1
// u.d is	 1
// Called directly	1
// Round to		1
// versions: class	1
// Entry to  1
// Truncation is	1
// Implicit type	1
// Constructor //	1
// Modulo by   1
// Branch/loop function	1
// Detect supported	1
// Place non-polymorphic	1
// Print heading		1
// x,y coordinates		1
// Reset floating		1
// x^1, x^2,			1
// Serialize //			1
// Convert to			1
// Find numerically		1
// Faster, but			1
// continue in			1
// erroneously called		1
// Read time   1
// Dispatcher. Will	1
// Constructor-style type	1
// 2-dimensional vector		1
// Partial template		1
// instrset_detect function	1
// Rounding is	   1
// Prototype for   1
// abs(u.f) >	   1
// Main loop	   1
// (Some compilers 1
// Default version 1
= a a	   3
= a -	   10
= a x	   1
= a +	   7
= a *	   9
= a &	   2
= a ;	   1
= a &&	   1
= a |	   1
= a ||	   1
= a ?	   2
= a ^	   2
= a XOR	   1
= int 4	   1
= int 8	   1
= x * 1
= x > 1
= x *x;	1
= { //	1
= { "Alpha",	1
= A +		2
= A |		1
= point to	1
= double 2	1
= double 4	1
= b +	 5
= b *	 9
= b /	 4
= b >	 2
= b %	 3
= b ?	 1
= i =	 1
= i *	 1
= i %	 1
= float or	2
= float 4	1
= float 8	1
= 2 *	1
= 4 rows.	1
= 0; for	3
= 0; //		1
= 0; int	3
= 0; x		2
= 0; }		2
= 0; i		39
= 0; while	1
= 0; c		4
= 0; r		2
= 0; row	1
= 0; j		1
= 0; column	1
= 0; c1		1
= 0; 14.6	1
= 0; list[i+1]	1
= 0; r1		1
= 8 *		1
= 64 kb.	1
= 16 is		1
= 0 a		2
= 0 that	1
= 0 //		1
= 0 -		8
= 0 because	1
= 0 a+0=a	1
= & obj1;	1
= c +		1
= i; }		2
= a, a		4
= a, but	1
= b; A		1
= b; }		1
= b; c		1
= 1; for	1
= 1; }		2
= 1; n		1
= 1; r		2
= 1; list[i+2]	2
= 1; a[1]	1
= 256 times	1
= y + 3
= c; }	1
= char 16	2
= x; float	1
= 100; //	1
= 100; int	2
= 100; float	3
= 100; S1	1
= r +  2
= r ebx,	1
= 0, b		1
= 0, b;		1
= 0, c,		1
= 0, sum2	1
= 0, s3		1
= 0, s2		1
= 0, sum;	1
= 0, (a&b)	1
= 0, s1		1
= 2; }		2
= 2; i		1
= 2; Unfortunately,	1
= a[i] +		1
= a; b 1
= a; y 1
= p +  1
= 1. This	1
= 1. /		1
= temp *	2
= temp /	1
= shift and	1
= d +	2
= divide by	1
= 2, Tuesday	1
= true a	2
= temp; }	1
= temp; temp	1
= u; If	1
= row +	1
= 3; for	1
= multiply and	1
= multiply by	2
= *p +	   3
= false where	1
= 4, we	1
= 4, Wednesday	1
= -1 -		1
= -1 x		1
= -1 (a&~b)|(~a&b)=a^b	1
= 8, Thursday		1
= (unsigned int)b	4
= (unsigned int)a	1
= 10; int   1
= 10; Templates	1
= 1, Monday	1
= 256; //	1
= (a + 1
= (a >=	1
= Induction ;	1
= int64_t 2 1
= int64_t 4 1
= log (b[i] 1
= 16; int   1
= x- x-	    1
= (float *)alloca(n	1
= 1.0; for		1
= 1.0; int		1
= 1.0; while		1
= 1.0; list[i].b	1
= 1.0; temp->b		1
= 250 μs		1
= a[i]; It		1
= ~a a	1
= b[i] +	1
= C; double	1
= C; Assuming	1
= 1000; int	2
= 1000; float	1
= 1000; unsigned	1
= parabola (2.0f);	1
= 2.0; x   1
= 2.0; }   2
= 2.0; i   1
= s; An	   1
= 0x2710 and	1
= (n &	 1
= (b ==	 1
= Induction; ;	2
= Induction; a[i+1]	1
= Induction; Induction++;	1
= 100, c     1
= 100, y;    1
= 100, max   1
= 100, NUMCOLUMNS	1
= LoadVector(cc +	3
= LoadVector(bb +	3
= r; for	1
= 100. Now,	1
= x2 * 1
= 28. This	1
= 28. We	1
= b;} vector	1
= 8; //		1
= 8; float	1
= (number of	1
= false, a	2
= 1024; int	2
= 1024; struct	1
= r1; c2	1
= r1; r2	1
= a*b -		1
= ReadTSC() -	1
= *(p++) is 1
= 0x1C. Reading	1
= _mm_set1_epi16(2); //	2
= a2 *		     1
= a2 /		     1
= a1 *		     1
= a1 /		     1
= ((a*x+b)*x+c)*x+d x*x*x*x*x*x*x*x	1
= (a+b)+(c+d) a*b+a*c=a*(b+c)		2
= cos(x); }   1
= cos(x); z   1
= a+(b+c) -   2
= N&(N-1) gives	1
= 3.3; // 1
= 3.3; double	1
= 2.0f; x.i	1
= {1, 1,	2
= StringLength; i	1
= 32. This	1
= string; int	1
= string; while	1
= &Object1; p1->Hello();	1
= &Object1; p->NotPolymorphic();	1
= a*(b+c) - 2
= (bb[i] >  1
= order(i); matrix[j][0]	1
= order(i); list[j].a		1
= 2048 bytes			1
= InstructionSet(); //		2
= ((x2) 2)	    2
= 512; //	    2
= 20, columns	    2
= bb[i] +	    1
= (memory address)  1
= log(b[i]) +	    2
= _mm_set1_epi16(0); //	2
= a&&(b||c) !a	     1
= a&&(b||c) (a&&!b)  1
= (a&b) |   1
= 8192 bytes,	1
= _mm_cmpgt_epi16(b, zero);	2
= (double)(signed int)u;	2
= &CriticalFunction_386; }	1
= select(b >		 2
= sin(x); }		 1
= sin(x); z		 1
= 1.f; for		 1
= 1.f; float		 1
= A; x.b		 1
= _mm_add_epi16(c, two); 2
= 2.2, C	   2
= &CriticalFunction_SSE2; }	1
= 1.23456. But		  1
= 1.1, B   2
= &Object2; p->Hello();	1
= &Object2; p2->Hello();	1
= 80. The   1
= c1; c2    1
= 0x40 };   1
= !(a ||    1
= _mm_mullo_epi16 (b,	2
= (a<b &&	  1
= B; x.c	  1
= 1.0f +	  1
= b*a -		  1
= b*a (a+b)+c=a+(b+c)	1
= &CriticalFunction_AVX; }	1
= (a+1) *		 1
= (a+1) /		 1
= a&(b|c) -		 1
= a&(b|c) x-xxxx--x	 1
= 10, columns		 1
= b+a a*b		 1
= x8*x2; return		 1
= 128. These		 1
= i+1; The		 1
= -abs(x);. There	 1
= b.y +	    1
= sin(0.8); The	1
= x∙xn-1, and	1
= 6.0f; Constant	1
= a1/b1 +		1
= &SelectAddMul_AVX2; (iset	1
= 64; //	      1
= list[j].b +	      1
= 1.23456, y;	      1
= x2*x2; double	      1
= -100, b	      1
= {2.6f, 1.5f};	      1
= (int)n -	      1
= a[i].u[1] *	      1
= 110; int  1
= lookup[b]; If	1
= pow(x,n) As	1
= 2.5*x^2 -	1
= a<<(b+c) -	1
= {1.1, 0.3,	1
= A*x*x +	1
= 1.0E8, c	1
= (short int)i;	1
= (s0+s1)+(s2+s3); Now	1
= &SelectAddMul_dispatch; //	1
= (a&b)&(c&d) a		  1
= n∙(n-1)!. If		  1
= (total cache		  1
= _mm_or_si128(c2, bc);	  1
= (a1*b2 +	   1
= OneOrTwo5[b!=0]; will	1
= b[r][c]; }	   1
= *(++p) because   1
= array[++i] because	1
= (10000 /   1
= {1.0f, 2.5f};	1
= (int)d; //	1
= absvalue; largest_index	1
= _mm_andnot_si128(mask, bc);	1
= 0x20, Saturday	 1
= instrset_detect(); 116 1
= (b*c)/d, it	     1
= Y; Y	   1
= Func1(2); ...	1
= &list[0]; temp	1
= a|(b&c) x-xxxx--x	1
= 32; float		1
= WhateverFunction(i); //	1
= array[i++] is	       1
= 100000001.23456. The 1
= Func(a[i]); }	   1
= -1.0E8, b   1
= 0x10, Friday	1
= y.d +	1
= y.a +	1
= y.b +	1
= y.c +	1
= (float)i; f	1
= 0.0; //   1
= &CriticalFunction_Dispatch; //	1
= 5.0f; b		      1
= lrint(d); //		      1
= 123; are  1
= OneOrTwo5[b &	1
= MAX(f(x), g(x));	1
= Func(ab[i].a); }	1
= log(2.0); ...	 1
= 50; float 1
= (int)(&list[0]) +	1
= MultiplyBy<8>(10); a	1
= &SelectAddMul_SSE2; //	1
= b+a, a*b	      1
= _mm_blendv_epi8(bc, c2,	1
= CriticalFunction(b, c);	1
= _mm_hadd_ps(x, x);  1
= r1+1; r2	 1
= 10000, then	 1
= (A &	 1
= !a; can	1
= __rdtsc(); return	1
= b++; will  1
= a*4 -	     1
= float(i); f	1
= ++b; the  1
= (*CriticalFunction)(b, c);	1
= Multiply(10,8); b	 1
= b.x +		  1
= select_gt(b, zero,	1
= (0x2710 /    1
= x4*x4; double	1
= _mm_hadd_ps(s, s);	1
= ((x2)2)2 a+a+a+a=a*4	1
= ReadTSC(); CriticalFunction();	1
= FactorialTable[b]; ...		1
